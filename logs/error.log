2021-09-29 17:46:48,446 - [test_regist.py - line:38] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2021-09-29 17:46:48,446 - [test_regist.py - line:39] - ERROR:{'code': 1003, 'msg': '确认密码不能为空'} != {'code': 1004, 'msg': '两次密码输入不一致'}
- {'code': 1003, 'msg': '确认密码不能为空'}
?             ^          ^^   ^^^

+ {'code': 1004, 'msg': '两次密码输入不一致'}
?             ^          ^^  ++ ^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest02\testcases\test_regist.py", line 35, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1003, 'msg': '确认密码不能为空'} != {'code': 1004, 'msg': '两次密码输入不一致'}
- {'code': 1003, 'msg': '确认密码不能为空'}
?             ^          ^^   ^^^

+ {'code': 1004, 'msg': '两次密码输入不一致'}
?             ^          ^^  ++ ^^

2021-09-29 17:46:48,587 - [test_regist.py - line:38] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2021-09-29 17:46:48,587 - [test_regist.py - line:39] - ERROR:{'code': 1007, 'msg': '手机号码格式不正确'} != {'code': 1009, 'msg': '用户名已存在'}
- {'code': 1007, 'msg': '手机号码格式不正确'}
+ {'code': 1009, 'msg': '用户名已存在'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest02\testcases\test_regist.py", line 35, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '手机号码格式不正确'} != {'code': 1009, 'msg': '用户名已存在'}
- {'code': 1007, 'msg': '手机号码格式不正确'}
+ {'code': 1009, 'msg': '用户名已存在'}
2021-09-29 17:46:48,696 - [test_regist.py - line:38] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2021-09-29 17:46:48,696 - [test_regist.py - line:39] - ERROR:{'code': 1009, 'msg': '邮箱格式不正确'} != {'code': 1009, 'msg': '用户名已存在'}
- {'code': 1009, 'msg': '邮箱格式不正确'}
?                        ^^^^^^^

+ {'code': 1009, 'msg': '用户名已存在'}
?                        ^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest02\testcases\test_regist.py", line 35, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1009, 'msg': '邮箱格式不正确'} != {'code': 1009, 'msg': '用户名已存在'}
- {'code': 1009, 'msg': '邮箱格式不正确'}
?                        ^^^^^^^

+ {'code': 1009, 'msg': '用户名已存在'}
?                        ^^^^^^

2021-09-30 10:34:53,878 - [test_Login_teacher.py - line:29] - ERROR:测试编号1,测试用例标题:正常登录流程,执行失败！实际结果:{'code': 1007, 'msg': '用户名或者密码错误'}
2021-09-30 10:34:53,878 - [test_Login_teacher.py - line:30] - ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest02\testcases\test_Login_teacher.py", line 26, in test_login
    self.assertIn(case.expect, str(res_body))
  File "D:\tools\python\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-09-30 10:48:35,703 - [test_regist.py - line:38] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2021-09-30 10:48:35,703 - [test_regist.py - line:39] - ERROR:{'code': 1003, 'msg': '确认密码不能为空'} != {'code': 1004, 'msg': '两次密码输入不一致'}
- {'code': 1003, 'msg': '确认密码不能为空'}
?             ^          ^^   ^^^

+ {'code': 1004, 'msg': '两次密码输入不一致'}
?             ^          ^^  ++ ^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_regist.py", line 35, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1003, 'msg': '确认密码不能为空'} != {'code': 1004, 'msg': '两次密码输入不一致'}
- {'code': 1003, 'msg': '确认密码不能为空'}
?             ^          ^^   ^^^

+ {'code': 1004, 'msg': '两次密码输入不一致'}
?             ^          ^^  ++ ^^

2021-09-30 10:48:35,866 - [test_regist.py - line:38] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2021-09-30 10:48:35,866 - [test_regist.py - line:39] - ERROR:{'code': 1007, 'msg': '手机号码格式不正确'} != {'code': 1009, 'msg': '用户名已存在'}
- {'code': 1007, 'msg': '手机号码格式不正确'}
+ {'code': 1009, 'msg': '用户名已存在'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_regist.py", line 35, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '手机号码格式不正确'} != {'code': 1009, 'msg': '用户名已存在'}
- {'code': 1007, 'msg': '手机号码格式不正确'}
+ {'code': 1009, 'msg': '用户名已存在'}
2021-09-30 10:48:35,987 - [test_regist.py - line:38] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2021-09-30 10:48:35,988 - [test_regist.py - line:39] - ERROR:{'code': 1009, 'msg': '邮箱格式不正确'} != {'code': 1009, 'msg': '用户名已存在'}
- {'code': 1009, 'msg': '邮箱格式不正确'}
?                        ^^^^^^^

+ {'code': 1009, 'msg': '用户名已存在'}
?                        ^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_regist.py", line 35, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1009, 'msg': '邮箱格式不正确'} != {'code': 1009, 'msg': '用户名已存在'}
- {'code': 1009, 'msg': '邮箱格式不正确'}
?                        ^^^^^^^

+ {'code': 1009, 'msg': '用户名已存在'}
?                        ^^^^^^

2021-09-30 10:50:23,801 - [test_regist.py - line:38] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2021-09-30 10:50:23,801 - [test_regist.py - line:39] - ERROR:{'code': 1003, 'msg': '确认密码不能为空'} != {'code': 1004, 'msg': '两次密码输入不一致'}
- {'code': 1003, 'msg': '确认密码不能为空'}
?             ^          ^^   ^^^

+ {'code': 1004, 'msg': '两次密码输入不一致'}
?             ^          ^^  ++ ^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_regist.py", line 35, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1003, 'msg': '确认密码不能为空'} != {'code': 1004, 'msg': '两次密码输入不一致'}
- {'code': 1003, 'msg': '确认密码不能为空'}
?             ^          ^^   ^^^

+ {'code': 1004, 'msg': '两次密码输入不一致'}
?             ^          ^^  ++ ^^

2021-09-30 10:50:23,959 - [test_regist.py - line:38] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2021-09-30 10:50:23,960 - [test_regist.py - line:39] - ERROR:{'code': 1007, 'msg': '手机号码格式不正确'} != {'code': 1009, 'msg': '用户名已存在'}
- {'code': 1007, 'msg': '手机号码格式不正确'}
+ {'code': 1009, 'msg': '用户名已存在'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_regist.py", line 35, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '手机号码格式不正确'} != {'code': 1009, 'msg': '用户名已存在'}
- {'code': 1007, 'msg': '手机号码格式不正确'}
+ {'code': 1009, 'msg': '用户名已存在'}
2021-09-30 10:50:24,081 - [test_regist.py - line:38] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2021-09-30 10:50:24,081 - [test_regist.py - line:39] - ERROR:{'code': 1009, 'msg': '邮箱格式不正确'} != {'code': 1009, 'msg': '用户名已存在'}
- {'code': 1009, 'msg': '邮箱格式不正确'}
?                        ^^^^^^^

+ {'code': 1009, 'msg': '用户名已存在'}
?                        ^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_regist.py", line 35, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1009, 'msg': '邮箱格式不正确'} != {'code': 1009, 'msg': '用户名已存在'}
- {'code': 1009, 'msg': '邮箱格式不正确'}
?                        ^^^^^^^

+ {'code': 1009, 'msg': '用户名已存在'}
?                        ^^^^^^

2021-10-04 14:53:03,344 - [test_login03.py - line:54] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MDM4My4zMTU2NDkzOmRkZGQ2ZGEzMWU0MWEyYjMxNzk1ZWJhMTU2NmJlMTQzZjY0MDg4YjA='}
2021-10-04 14:53:03,344 - [test_login03.py - line:55] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MDM4My4zMTU2NDkzOmRkZGQ2ZGEzMWU0MWEyYjMxNzk1ZWJhMTU2NmJlMTQzZjY0MDg4YjA='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MDM4M[64 chars]jA='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MDM4My4zMTU2NDkzOmRkZGQ2ZGEzMWU0MWEyYjMxNzk1ZWJhMTU2NmJlMTQzZjY0MDg4YjA='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 51, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MDM4My4zMTU2NDkzOmRkZGQ2ZGEzMWU0MWEyYjMxNzk1ZWJhMTU2NmJlMTQzZjY0MDg4YjA='}
2021-10-04 14:53:03,414 - [test_login03.py - line:54] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MDM4My4zODY0NTk4OmJlZGVkOGYyZWZkYzdjN2Q5ZjM5NDVjNjQ2YWU4NWFkYWQ4MWRmZDY='}
2021-10-04 14:53:03,414 - [test_login03.py - line:55] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MDM4My4zODY0NTk4OmJlZGVkOGYyZWZkYzdjN2Q5ZjM5NDVjNjQ2YWU4NWFkYWQ4MWRmZDY='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MDM4M[64 chars]DY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MDM4My4zODY0NTk4OmJlZGVkOGYyZWZkYzdjN2Q5ZjM5NDVjNjQ2YWU4NWFkYWQ4MWRmZDY='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 51, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MDM4My4zODY0NTk4OmJlZGVkOGYyZWZkYzdjN2Q5ZjM5NDVjNjQ2YWU4NWFkYWQ4MWRmZDY='}
2021-10-04 14:58:39,378 - [test_login03.py - line:54] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MDcxOS4zNTA4OTA0OjUwYmFjNzM4NTJlY2U5ODkxODFiNDIxOWI3Mjg4NjA1YTk4M2RjODc='}
2021-10-04 14:58:39,379 - [test_login03.py - line:55] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MDcxO[64 chars]Dc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MDcxOS4zNTA4OTA0OjUwYmFjNzM4NTJlY2U5ODkxODFiNDIxOWI3Mjg4NjA1YTk4M2RjODc='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 51, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MDcxO[64 chars]Dc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MDcxOS4zNTA4OTA0OjUwYmFjNzM4NTJlY2U5ODkxODFiNDIxOWI3Mjg4NjA1YTk4M2RjODc='}
2021-10-04 14:58:39,448 - [test_login03.py - line:54] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MDcxOS40MjA3MDQ2OmZmN2U3MmQ3OGZhNDNhNTk4YjlmNWE4YmVhNzZlMTk3YjlhYTlkNWY='}
2021-10-04 14:58:39,448 - [test_login03.py - line:55] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MDcxO[64 chars]WY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MDcxOS40MjA3MDQ2OmZmN2U3MmQ3OGZhNDNhNTk4YjlmNWE4YmVhNzZlMTk3YjlhYTlkNWY='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 51, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MDcxO[64 chars]WY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MDcxOS40MjA3MDQ2OmZmN2U3MmQ3OGZhNDNhNTk4YjlmNWE4YmVhNzZlMTk3YjlhYTlkNWY='}
2021-10-04 15:39:51,217 - [test_login04.py - line:60] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5MS4xODQ4ODU1OmMxZDY4MjhjMDZjNzczZjg4NGY1ZDQwZjM0MmEwNzM3ZjU4NTAzYmQ='}
2021-10-04 15:39:51,217 - [test_login04.py - line:61] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5MS4xODQ4ODU1OmMxZDY4MjhjMDZjNzczZjg4NGY1ZDQwZjM0MmEwNzM3ZjU4NTAzYmQ='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5M[64 chars]mQ='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MzE5MS4xODQ4ODU1OmMxZDY4MjhjMDZjNzczZjg4NGY1ZDQwZjM0MmEwNzM3ZjU4NTAzYmQ='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5MS4xODQ4ODU1OmMxZDY4MjhjMDZjNzczZjg4NGY1ZDQwZjM0MmEwNzM3ZjU4NTAzYmQ='}
2021-10-04 15:39:51,302 - [test_login04.py - line:60] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5MS4yNjg2NjEzOjkyNDdiN2NmYWYzMGI4YjA4MGE2YWI0OTRmZDQzZjIzYTAyMTcwNWI='}
2021-10-04 15:39:51,302 - [test_login04.py - line:61] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5MS4yNjg2NjEzOjkyNDdiN2NmYWYzMGI4YjA4MGE2YWI0OTRmZDQzZjIzYTAyMTcwNWI='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5M[64 chars]WI='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MzE5MS4yNjg2NjEzOjkyNDdiN2NmYWYzMGI4YjA4MGE2YWI0OTRmZDQzZjIzYTAyMTcwNWI='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5MS4yNjg2NjEzOjkyNDdiN2NmYWYzMGI4YjA4MGE2YWI0OTRmZDQzZjIzYTAyMTcwNWI='}
2021-10-04 15:39:54,308 - [test_login04.py - line:60] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5NC4yNjc2NDM6MTAyZmM3YzUwZTE1Y2I2NWQxNzE1ZGQyNDQ0MjAxMzMxYTMxNTY3MQ=='}
2021-10-04 15:39:54,308 - [test_login04.py - line:61] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5NC4yNjc2NDM6MTAyZmM3YzUwZTE1Y2I2NWQxNzE1ZGQyNDQ0MjAxMzMxYTMxNTY3MQ=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5N[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MzE5NC4yNjc2NDM6MTAyZmM3YzUwZTE1Y2I2NWQxNzE1ZGQyNDQ0MjAxMzMxYTMxNTY3MQ=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5NC4yNjc2NDM6MTAyZmM3YzUwZTE1Y2I2NWQxNzE1ZGQyNDQ0MjAxMzMxYTMxNTY3MQ=='}
2021-10-04 15:39:54,391 - [test_login04.py - line:60] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5NC4zNTY0MDI5OmFiNTNjMGI2NDMzZGNjZTFiMTg0YjAyZmNiNmQ2MzliNGYyZDRiY2E='}
2021-10-04 15:39:54,391 - [test_login04.py - line:61] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5NC4zNTY0MDI5OmFiNTNjMGI2NDMzZGNjZTFiMTg0YjAyZmNiNmQ2MzliNGYyZDRiY2E='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5N[64 chars]2E='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MzE5NC4zNTY0MDI5OmFiNTNjMGI2NDMzZGNjZTFiMTg0YjAyZmNiNmQ2MzliNGYyZDRiY2E='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5NC4zNTY0MDI5OmFiNTNjMGI2NDMzZGNjZTFiMTg0YjAyZmNiNmQ2MzliNGYyZDRiY2E='}
2021-10-04 15:39:56,648 - [test_login04.py - line:60] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5Ni42MTIzNjk4OmUzYzc1MDMxZWQwODg5ODU1MmUwOThlMDk2NmE3ZjkxZDljOGRmMmI='}
2021-10-04 15:39:56,648 - [test_login04.py - line:61] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5Ni42MTIzNjk4OmUzYzc1MDMxZWQwODg5ODU1MmUwOThlMDk2NmE3ZjkxZDljOGRmMmI='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5N[64 chars]mI='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MzE5Ni42MTIzNjk4OmUzYzc1MDMxZWQwODg5ODU1MmUwOThlMDk2NmE3ZjkxZDljOGRmMmI='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5Ni42MTIzNjk4OmUzYzc1MDMxZWQwODg5ODU1MmUwOThlMDk2NmE3ZjkxZDljOGRmMmI='}
2021-10-04 15:39:56,730 - [test_login04.py - line:60] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5Ni42OTYxNDU6MDU4OGZhOGY5ODZhNTI2NjFjODQ5NmUyZjk1Y2M3NDcyMjIxODUwNg=='}
2021-10-04 15:39:56,730 - [test_login04.py - line:61] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5Ni42OTYxNDU6MDU4OGZhOGY5ODZhNTI2NjFjODQ5NmUyZjk1Y2M3NDcyMjIxODUwNg=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5N[64 chars]g=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MzE5Ni42OTYxNDU6MDU4OGZhOGY5ODZhNTI2NjFjODQ5NmUyZjk1Y2M3NDcyMjIxODUwNg=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5Ni42OTYxNDU6MDU4OGZhOGY5ODZhNTI2NjFjODQ5NmUyZjk1Y2M3NDcyMjIxODUwNg=='}
2021-10-04 15:39:59,117 - [test_login04.py - line:60] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5OS4wODM3NTg4OmFhNGUyMGJkOGIzM2U1OGFjYjQ0YTVlNzVlNWY3NjI3ZDhjNzc5ZTY='}
2021-10-04 15:39:59,117 - [test_login04.py - line:61] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5OS4wODM3NTg4OmFhNGUyMGJkOGIzM2U1OGFjYjQ0YTVlNzVlNWY3NjI3ZDhjNzc5ZTY='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5O[64 chars]TY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MzE5OS4wODM3NTg4OmFhNGUyMGJkOGIzM2U1OGFjYjQ0YTVlNzVlNWY3NjI3ZDhjNzc5ZTY='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5OS4wODM3NTg4OmFhNGUyMGJkOGIzM2U1OGFjYjQ0YTVlNzVlNWY3NjI3ZDhjNzc5ZTY='}
2021-10-04 15:39:59,199 - [test_login04.py - line:60] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5OS4xNjY1Mzg6ZDVlYWM2MzMwY2Q0ZjlkMTA1ZDUzOTJkZjlhZDkwOWM5Njg3YWNlZA=='}
2021-10-04 15:39:59,200 - [test_login04.py - line:61] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5OS4xNjY1Mzg6ZDVlYWM2MzMwY2Q0ZjlkMTA1ZDUzOTJkZjlhZDkwOWM5Njg3YWNlZA=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5O[64 chars]A=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MzE5OS4xNjY1Mzg6ZDVlYWM2MzMwY2Q0ZjlkMTA1ZDUzOTJkZjlhZDkwOWM5Njg3YWNlZA=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5OS4xNjY1Mzg6ZDVlYWM2MzMwY2Q0ZjlkMTA1ZDUzOTJkZjlhZDkwOWM5Njg3YWNlZA=='}
2021-10-04 16:20:03,885 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTYwMy44NDk1MjE2OmYwMjYzYzczNGU5NTg5YTMwYWNjOTU0MDgyMzVmY2E4MzY5YTk0NTc='}
2021-10-04 16:20:03,886 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTYwMy44NDk1MjE2OmYwMjYzYzczNGU5NTg5YTMwYWNjOTU0MDgyMzVmY2E4MzY5YTk0NTc='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTYwM[64 chars]Tc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NTYwMy44NDk1MjE2OmYwMjYzYzczNGU5NTg5YTMwYWNjOTU0MDgyMzVmY2E4MzY5YTk0NTc='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTYwMy44NDk1MjE2OmYwMjYzYzczNGU5NTg5YTMwYWNjOTU0MDgyMzVmY2E4MzY5YTk0NTc='}
2021-10-04 16:20:03,978 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:20:03,978 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:20:10,012 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTYwOS45NzcxMzI4OjBmOGJjMTRkOThiZmVkYWQ0MGFlOTBiOGExNTU2NzI5ZTFjODQ0OTg='}
2021-10-04 16:20:10,012 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTYwOS45NzcxMzI4OjBmOGJjMTRkOThiZmVkYWQ0MGFlOTBiOGExNTU2NzI5ZTFjODQ0OTg='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTYwO[64 chars]Tg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NTYwOS45NzcxMzI4OjBmOGJjMTRkOThiZmVkYWQ0MGFlOTBiOGExNTU2NzI5ZTFjODQ0OTg='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTYwOS45NzcxMzI4OjBmOGJjMTRkOThiZmVkYWQ0MGFlOTBiOGExNTU2NzI5ZTFjODQ0OTg='}
2021-10-04 16:20:10,366 - [test_login05.py - line:53] - ERROR:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:20:10,366 - [test_login05.py - line:54] - ERROR: :: {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:20:45,152 - [test_login05.py - line:54] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTY0NS4xMTcxNDc0OjMwMzMzYjcwNjczM2RlMmYxYzU3ZWYzM2UyMzYwNTg2OGQ1M2NjMzg='}
2021-10-04 16:20:45,152 - [test_login05.py - line:55] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTY0NS4xMTcxNDc0OjMwMzMzYjcwNjczM2RlMmYxYzU3ZWYzM2UyMzYwNTg2OGQ1M2NjMzg='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTY0N[64 chars]zg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NTY0NS4xMTcxNDc0OjMwMzMzYjcwNjczM2RlMmYxYzU3ZWYzM2UyMzYwNTg2OGQ1M2NjMzg='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 51, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTY0NS4xMTcxNDc0OjMwMzMzYjcwNjczM2RlMmYxYzU3ZWYzM2UyMzYwNTg2OGQ1M2NjMzg='}
2021-10-04 16:20:45,243 - [test_login05.py - line:54] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:20:45,244 - [test_login05.py - line:55] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 51, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:20:54,203 - [test_login05.py - line:54] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTY1NC4xNjc5NDA0OjFkNDQ0YTVjYzExYWU4MmZkZjM4ZTMwNDc4NTYwMDU2OWU5NTE0YzA='}
2021-10-04 16:20:54,203 - [test_login05.py - line:55] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTY1NC4xNjc5NDA0OjFkNDQ0YTVjYzExYWU4MmZkZjM4ZTMwNDc4NTYwMDU2OWU5NTE0YzA='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTY1N[64 chars]zA='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NTY1NC4xNjc5NDA0OjFkNDQ0YTVjYzExYWU4MmZkZjM4ZTMwNDc4NTYwMDU2OWU5NTE0YzA='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 51, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTY1NC4xNjc5NDA0OjFkNDQ0YTVjYzExYWU4MmZkZjM4ZTMwNDc4NTYwMDU2OWU5NTE0YzA='}
2021-10-04 16:20:54,295 - [test_login05.py - line:54] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTY1NC4yNTU3MDY6MWYwMWQwNjMxNjVjYWI3NjU3ODI4YzNhMTVjYjU4OGQ2NTg2OTgyMw=='}
2021-10-04 16:20:54,295 - [test_login05.py - line:55] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTY1NC4yNTU3MDY6MWYwMWQwNjMxNjVjYWI3NjU3ODI4YzNhMTVjYjU4OGQ2NTg2OTgyMw=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTY1N[64 chars]w=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NTY1NC4yNTU3MDY6MWYwMWQwNjMxNjVjYWI3NjU3ODI4YzNhMTVjYjU4OGQ2NTg2OTgyMw=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 51, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTY1NC4yNTU3MDY6MWYwMWQwNjMxNjVjYWI3NjU3ODI4YzNhMTVjYjU4OGQ2NTg2OTgyMw=='}
2021-10-04 16:20:57,015 - [test_login05.py - line:54] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTY1Ni45Nzg0MjM2OmE3NGUxZGFmZjE5NjFlMWQ3ODZmMDlmZjc0YzU5ZjYyZTRmMzk5ODA='}
2021-10-04 16:20:57,015 - [test_login05.py - line:55] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTY1Ni45Nzg0MjM2OmE3NGUxZGFmZjE5NjFlMWQ3ODZmMDlmZjc0YzU5ZjYyZTRmMzk5ODA='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTY1N[64 chars]DA='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NTY1Ni45Nzg0MjM2OmE3NGUxZGFmZjE5NjFlMWQ3ODZmMDlmZjc0YzU5ZjYyZTRmMzk5ODA='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 51, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTY1Ni45Nzg0MjM2OmE3NGUxZGFmZjE5NjFlMWQ3ODZmMDlmZjc0YzU5ZjYyZTRmMzk5ODA='}
2021-10-04 16:26:03,789 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTk2My43NTM5MjI1OjVjNWU2NThiYTRmNzJlZWQ3ZmMxOWVkNjhhMGY5NTUyMWZmNmVmNTk='}
2021-10-04 16:26:03,789 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTk2My43NTM5MjI1OjVjNWU2NThiYTRmNzJlZWQ3ZmMxOWVkNjhhMGY5NTUyMWZmNmVmNTk='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTk2M[64 chars]Tk='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NTk2My43NTM5MjI1OjVjNWU2NThiYTRmNzJlZWQ3ZmMxOWVkNjhhMGY5NTUyMWZmNmVmNTk='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTk2My43NTM5MjI1OjVjNWU2NThiYTRmNzJlZWQ3ZmMxOWVkNjhhMGY5NTUyMWZmNmVmNTk='}
2021-10-04 16:26:03,879 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTk2My44Mzk2OTM4OmM2ZDM4NGI0NzA2ZDdiZWFmNDE4MDM4OGIzMmQ1OTBhOWY3NWY5MmU='}
2021-10-04 16:26:03,879 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTk2My44Mzk2OTM4OmM2ZDM4NGI0NzA2ZDdiZWFmNDE4MDM4OGIzMmQ1OTBhOWY3NWY5MmU='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTk2M[64 chars]mU='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NTk2My44Mzk2OTM4OmM2ZDM4NGI0NzA2ZDdiZWFmNDE4MDM4OGIzMmQ1OTBhOWY3NWY5MmU='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTk2My44Mzk2OTM4OmM2ZDM4NGI0NzA2ZDdiZWFmNDE4MDM4OGIzMmQ1OTBhOWY3NWY5MmU='}
2021-10-04 16:26:35,159 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTk5NS4xMjUwMTg0Ojc0MmVhZWI0MDE0NzQyZWJhZGEzMTkyNWMyNGY5MThkYjlmOWI3MWM='}
2021-10-04 16:26:35,159 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTk5NS4xMjUwMTg0Ojc0MmVhZWI0MDE0NzQyZWJhZGEzMTkyNWMyNGY5MThkYjlmOWI3MWM='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTk5N[64 chars]WM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NTk5NS4xMjUwMTg0Ojc0MmVhZWI0MDE0NzQyZWJhZGEzMTkyNWMyNGY5MThkYjlmOWI3MWM='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTk5NS4xMjUwMTg0Ojc0MmVhZWI0MDE0NzQyZWJhZGEzMTkyNWMyNGY5MThkYjlmOWI3MWM='}
2021-10-04 16:26:35,247 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTk5NS4yMDg3OTQ6NmIzYWEwMDZjZTU1YjE0YmZjYmE2ZTI0NzJjNjYzZjhmZDVkMTk2Mw=='}
2021-10-04 16:26:35,247 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTk5NS4yMDg3OTQ6NmIzYWEwMDZjZTU1YjE0YmZjYmE2ZTI0NzJjNjYzZjhmZDVkMTk2Mw=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTk5N[64 chars]w=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NTk5NS4yMDg3OTQ6NmIzYWEwMDZjZTU1YjE0YmZjYmE2ZTI0NzJjNjYzZjhmZDVkMTk2Mw=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTk5NS4yMDg3OTQ6NmIzYWEwMDZjZTU1YjE0YmZjYmE2ZTI0NzJjNjYzZjhmZDVkMTk2Mw=='}
2021-10-04 16:26:43,176 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAwMy4xNDE1NzYzOjA3ZmM5YWQ2NDhkODY4NTcxYjlmMjdlMzZmNDNlYWEzZmJhNDdkZTg='}
2021-10-04 16:26:43,177 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAwMy4xNDE1NzYzOjA3ZmM5YWQ2NDhkODY4NTcxYjlmMjdlMzZmNDNlYWEzZmJhNDdkZTg='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAwM[64 chars]Tg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAwMy4xNDE1NzYzOjA3ZmM5YWQ2NDhkODY4NTcxYjlmMjdlMzZmNDNlYWEzZmJhNDdkZTg='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAwMy4xNDE1NzYzOjA3ZmM5YWQ2NDhkODY4NTcxYjlmMjdlMzZmNDNlYWEzZmJhNDdkZTg='}
2021-10-04 16:26:43,264 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAwMy4yMjYzNTpmNzE0NjEzOWZiYTc2ZDJhNzgyYmRmNDhjOTE5YThiNTg3Nzg1ZDdl'}
2021-10-04 16:26:43,265 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAwMy4yMjYzNTpmNzE0NjEzOWZiYTc2ZDJhNzgyYmRmNDhjOTE5YThiNTg3Nzg1ZDdl'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAwM[60 chars]Ddl'}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAwMy4yMjYzNTpmNzE0NjEzOWZiYTc2ZDJhNzgyYmRmNDhjOTE5YThiNTg3Nzg1ZDdl'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAwMy4yMjYzNTpmNzE0NjEzOWZiYTc2ZDJhNzgyYmRmNDhjOTE5YThiNTg3Nzg1ZDdl'}
2021-10-04 16:26:46,769 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAwNi43MzQ5NjU2OjMxMjNiYjY5Zjg0MGE3MzUzYTljMjg1N2U5ZWY0NTk1YjgzYTUyNzI='}
2021-10-04 16:26:46,770 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAwNi43MzQ5NjU2OjMxMjNiYjY5Zjg0MGE3MzUzYTljMjg1N2U5ZWY0NTk1YjgzYTUyNzI='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAwN[64 chars]zI='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAwNi43MzQ5NjU2OjMxMjNiYjY5Zjg0MGE3MzUzYTljMjg1N2U5ZWY0NTk1YjgzYTUyNzI='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAwNi43MzQ5NjU2OjMxMjNiYjY5Zjg0MGE3MzUzYTljMjg1N2U5ZWY0NTk1YjgzYTUyNzI='}
2021-10-04 16:26:46,859 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAwNi44MTk3Mzk2OjRmYjU2MzVlYThlZjU1OTdiYTkzZDZkNzRhODAyNDllZTNhZWJhNDA='}
2021-10-04 16:26:46,859 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAwNi44MTk3Mzk2OjRmYjU2MzVlYThlZjU1OTdiYTkzZDZkNzRhODAyNDllZTNhZWJhNDA='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAwN[64 chars]DA='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAwNi44MTk3Mzk2OjRmYjU2MzVlYThlZjU1OTdiYTkzZDZkNzRhODAyNDllZTNhZWJhNDA='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAwNi44MTk3Mzk2OjRmYjU2MzVlYThlZjU1OTdiYTkzZDZkNzRhODAyNDllZTNhZWJhNDA='}
2021-10-04 16:26:49,611 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAwOS41NzYzNjU3OmM2ZDgwYThhZWYxMGViMGFjOTI3NjFlNThhZjU3MjVhYWZiNGE3MTM='}
2021-10-04 16:26:49,611 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAwOS41NzYzNjU3OmM2ZDgwYThhZWYxMGViMGFjOTI3NjFlNThhZjU3MjVhYWZiNGE3MTM='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAwO[64 chars]TM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAwOS41NzYzNjU3OmM2ZDgwYThhZWYxMGViMGFjOTI3NjFlNThhZjU3MjVhYWZiNGE3MTM='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAwOS41NzYzNjU3OmM2ZDgwYThhZWYxMGViMGFjOTI3NjFlNThhZjU3MjVhYWZiNGE3MTM='}
2021-10-04 16:26:49,698 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAwOS42NjIxMzczOjRhNTg1NDAzNDZmYzZhYzc2MzFlOTFmMDU2MzlhNDkzNTU1ZDg2M2I='}
2021-10-04 16:26:49,699 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAwOS42NjIxMzczOjRhNTg1NDAzNDZmYzZhYzc2MzFlOTFmMDU2MzlhNDkzNTU1ZDg2M2I='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAwO[64 chars]2I='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAwOS42NjIxMzczOjRhNTg1NDAzNDZmYzZhYzc2MzFlOTFmMDU2MzlhNDkzNTU1ZDg2M2I='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAwOS42NjIxMzczOjRhNTg1NDAzNDZmYzZhYzc2MzFlOTFmMDU2MzlhNDkzNTU1ZDg2M2I='}
2021-10-04 16:26:51,814 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxMS43Nzg0NzY3OjM4MTE3MzQ4NTcxNzM2NTJhNDA1ZGFhOWEwODM1ZjQyYzZhMDkzYmE='}
2021-10-04 16:26:51,814 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxMS43Nzg0NzY3OjM4MTE3MzQ4NTcxNzM2NTJhNDA1ZGFhOWEwODM1ZjQyYzZhMDkzYmE='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxM[64 chars]mE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAxMS43Nzg0NzY3OjM4MTE3MzQ4NTcxNzM2NTJhNDA1ZGFhOWEwODM1ZjQyYzZhMDkzYmE='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxMS43Nzg0NzY3OjM4MTE3MzQ4NTcxNzM2NTJhNDA1ZGFhOWEwODM1ZjQyYzZhMDkzYmE='}
2021-10-04 16:26:51,899 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxMS44NjMyNDkzOmJmNGMzZjViZmNlMmRiZmM5NmNhZmEwZWU2YmMzZWFmODdkZGZlYTM='}
2021-10-04 16:26:51,899 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxMS44NjMyNDkzOmJmNGMzZjViZmNlMmRiZmM5NmNhZmEwZWU2YmMzZWFmODdkZGZlYTM='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxM[64 chars]TM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAxMS44NjMyNDkzOmJmNGMzZjViZmNlMmRiZmM5NmNhZmEwZWU2YmMzZWFmODdkZGZlYTM='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxMS44NjMyNDkzOmJmNGMzZjViZmNlMmRiZmM5NmNhZmEwZWU2YmMzZWFmODdkZGZlYTM='}
2021-10-04 16:26:54,216 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxNC4xODIwNDc2OmVlZjU4MDNhMWRiNDVhODRmMTkwZmM2NDc2YTlhNTMwOGE1ZTY0YzA='}
2021-10-04 16:26:54,216 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxNC4xODIwNDc2OmVlZjU4MDNhMWRiNDVhODRmMTkwZmM2NDc2YTlhNTMwOGE1ZTY0YzA='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxN[64 chars]zA='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAxNC4xODIwNDc2OmVlZjU4MDNhMWRiNDVhODRmMTkwZmM2NDc2YTlhNTMwOGE1ZTY0YzA='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxNC4xODIwNDc2OmVlZjU4MDNhMWRiNDVhODRmMTkwZmM2NDc2YTlhNTMwOGE1ZTY0YzA='}
2021-10-04 16:26:54,302 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxNC4yNjQ4MjY6ZDI3YjUwMDAyZjI2ZTg3MzM2MDdkZDRkNDM0YTFlNDI2NTY4YjU1OQ=='}
2021-10-04 16:26:54,302 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxNC4yNjQ4MjY6ZDI3YjUwMDAyZjI2ZTg3MzM2MDdkZDRkNDM0YTFlNDI2NTY4YjU1OQ=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxN[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAxNC4yNjQ4MjY6ZDI3YjUwMDAyZjI2ZTg3MzM2MDdkZDRkNDM0YTFlNDI2NTY4YjU1OQ=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxNC4yNjQ4MjY6ZDI3YjUwMDAyZjI2ZTg3MzM2MDdkZDRkNDM0YTFlNDI2NTY4YjU1OQ=='}
2021-10-04 16:26:56,823 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxNi43ODgwNzc6Mjc0YzcxNGMzZTRjYTY5MDUyYmE1ZTcyYzNmM2FlNmU1NmRlNDY3MQ=='}
2021-10-04 16:26:56,823 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxNi43ODgwNzc6Mjc0YzcxNGMzZTRjYTY5MDUyYmE1ZTcyYzNmM2FlNmU1NmRlNDY3MQ=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxN[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAxNi43ODgwNzc6Mjc0YzcxNGMzZTRjYTY5MDUyYmE1ZTcyYzNmM2FlNmU1NmRlNDY3MQ=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxNi43ODgwNzc6Mjc0YzcxNGMzZTRjYTY5MDUyYmE1ZTcyYzNmM2FlNmU1NmRlNDY3MQ=='}
2021-10-04 16:26:56,915 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxNi44NzU4NDI4OjMxYjVkNWIzY2RmMmM3NzZjMWE2MjJjNWIwYjAxNTdiODc2MzI0Mzk='}
2021-10-04 16:26:56,915 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxNi44NzU4NDI4OjMxYjVkNWIzY2RmMmM3NzZjMWE2MjJjNWIwYjAxNTdiODc2MzI0Mzk='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxN[64 chars]zk='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAxNi44NzU4NDI4OjMxYjVkNWIzY2RmMmM3NzZjMWE2MjJjNWIwYjAxNTdiODc2MzI0Mzk='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxNi44NzU4NDI4OjMxYjVkNWIzY2RmMmM3NzZjMWE2MjJjNWIwYjAxNTdiODc2MzI0Mzk='}
2021-10-04 16:26:59,389 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxOS4zNTQyMTQ6MWRhNWE1YTg2NWIwMTFiYTg4ZjNlN2VlY2ExZDVhYjc4YWJkMDg0Yg=='}
2021-10-04 16:26:59,389 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxOS4zNTQyMTQ6MWRhNWE1YTg2NWIwMTFiYTg4ZjNlN2VlY2ExZDVhYjc4YWJkMDg0Yg=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxO[64 chars]g=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAxOS4zNTQyMTQ6MWRhNWE1YTg2NWIwMTFiYTg4ZjNlN2VlY2ExZDVhYjc4YWJkMDg0Yg=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxOS4zNTQyMTQ6MWRhNWE1YTg2NWIwMTFiYTg4ZjNlN2VlY2ExZDVhYjc4YWJkMDg0Yg=='}
2021-10-04 16:26:59,477 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxOS40Mzg5ODg6MThlZTEyYjg3ZTlmYzczODQzMDAyMWY3YjJhMTYxYjY0OGExOWNiNQ=='}
2021-10-04 16:26:59,477 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxOS40Mzg5ODg6MThlZTEyYjg3ZTlmYzczODQzMDAyMWY3YjJhMTYxYjY0OGExOWNiNQ=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxO[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAxOS40Mzg5ODg6MThlZTEyYjg3ZTlmYzczODQzMDAyMWY3YjJhMTYxYjY0OGExOWNiNQ=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxOS40Mzg5ODg6MThlZTEyYjg3ZTlmYzczODQzMDAyMWY3YjJhMTYxYjY0OGExOWNiNQ=='}
2021-10-04 16:29:29,347 - [test_login05.py - line:52] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE2OS4zMTE2ODk6YWM4OTY2MTk5ZDEwNGY4NTYwMzZjODc5MTM5ZGU3MWQ1ZmNiMzRkZQ=='}
2021-10-04 16:29:29,348 - [test_login05.py - line:53] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE2OS4zMTE2ODk6YWM4OTY2MTk5ZDEwNGY4NTYwMzZjODc5MTM5ZGU3MWQ1ZmNiMzRkZQ=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE2O[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjE2OS4zMTE2ODk6YWM4OTY2MTk5ZDEwNGY4NTYwMzZjODc5MTM5ZGU3MWQ1ZmNiMzRkZQ=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE2OS4zMTE2ODk6YWM4OTY2MTk5ZDEwNGY4NTYwMzZjODc5MTM5ZGU3MWQ1ZmNiMzRkZQ=='}
2021-10-04 16:29:29,444 - [test_login05.py - line:52] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE2OS40MDc0MzI2OmZjMmZkMGNiZDMxMTVhZWYzMTNlM2YxNDJjNDllODM5YTg3NGVlMDY='}
2021-10-04 16:29:29,444 - [test_login05.py - line:53] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE2OS40MDc0MzI2OmZjMmZkMGNiZDMxMTVhZWYzMTNlM2YxNDJjNDllODM5YTg3NGVlMDY='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE2O[64 chars]DY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjE2OS40MDc0MzI2OmZjMmZkMGNiZDMxMTVhZWYzMTNlM2YxNDJjNDllODM5YTg3NGVlMDY='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE2OS40MDc0MzI2OmZjMmZkMGNiZDMxMTVhZWYzMTNlM2YxNDJjNDllODM5YTg3NGVlMDY='}
2021-10-04 16:29:31,844 - [test_login05.py - line:52] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE3MS44MTAwMDg6ZmE4ZjA5YmVjOTU1Njg3MzhiNDNiNGRlNzRjODIwM2JkMWNjZWM4OQ=='}
2021-10-04 16:29:31,844 - [test_login05.py - line:53] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE3MS44MTAwMDg6ZmE4ZjA5YmVjOTU1Njg3MzhiNDNiNGRlNzRjODIwM2JkMWNjZWM4OQ=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE3M[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjE3MS44MTAwMDg6ZmE4ZjA5YmVjOTU1Njg3MzhiNDNiNGRlNzRjODIwM2JkMWNjZWM4OQ=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE3MS44MTAwMDg6ZmE4ZjA5YmVjOTU1Njg3MzhiNDNiNGRlNzRjODIwM2JkMWNjZWM4OQ=='}
2021-10-04 16:29:31,933 - [test_login05.py - line:52] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE3MS44OTY3NzQzOjI2MzI0YjYwY2VhZDgxMWY3NTdjMTg5ZWRmMmVhOWQwOWUyMzAzNDE='}
2021-10-04 16:29:31,933 - [test_login05.py - line:53] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE3MS44OTY3NzQzOjI2MzI0YjYwY2VhZDgxMWY3NTdjMTg5ZWRmMmVhOWQwOWUyMzAzNDE='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE3M[64 chars]DE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjE3MS44OTY3NzQzOjI2MzI0YjYwY2VhZDgxMWY3NTdjMTg5ZWRmMmVhOWQwOWUyMzAzNDE='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE3MS44OTY3NzQzOjI2MzI0YjYwY2VhZDgxMWY3NTdjMTg5ZWRmMmVhOWQwOWUyMzAzNDE='}
2021-10-04 16:29:40,677 - [test_login05.py - line:52] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE4MC42NDAzODkyOjNmMTg0MjA2NDNlMjYwYzFkNDg0YjI5ZDg0NTg5MWY3YmE1ZTA1ZDM='}
2021-10-04 16:29:40,677 - [test_login05.py - line:53] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE4MC42NDAzODkyOjNmMTg0MjA2NDNlMjYwYzFkNDg0YjI5ZDg0NTg5MWY3YmE1ZTA1ZDM='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE4M[64 chars]DM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjE4MC42NDAzODkyOjNmMTg0MjA2NDNlMjYwYzFkNDg0YjI5ZDg0NTg5MWY3YmE1ZTA1ZDM='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE4MC42NDAzODkyOjNmMTg0MjA2NDNlMjYwYzFkNDg0YjI5ZDg0NTg5MWY3YmE1ZTA1ZDM='}
2021-10-04 16:29:40,764 - [test_login05.py - line:52] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE4MC43MjYxNTk2Ojk1NjdjNTllMjU4NDQwOGM1Nzg5N2VkMDM4ZDhkZmE0ZGEwMzY2Nzk='}
2021-10-04 16:29:40,764 - [test_login05.py - line:53] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE4MC43MjYxNTk2Ojk1NjdjNTllMjU4NDQwOGM1Nzg5N2VkMDM4ZDhkZmE0ZGEwMzY2Nzk='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE4M[64 chars]zk='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjE4MC43MjYxNTk2Ojk1NjdjNTllMjU4NDQwOGM1Nzg5N2VkMDM4ZDhkZmE0ZGEwMzY2Nzk='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE4MC43MjYxNTk2Ojk1NjdjNTllMjU4NDQwOGM1Nzg5N2VkMDM4ZDhkZmE0ZGEwMzY2Nzk='}
2021-10-04 16:29:43,797 - [test_login05.py - line:52] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE4My43NjMwMzcyOmI0MWMzMmM3NTY4YTY0NmUyYThjODBkZGNhNmY5Zjc1ZDAyNTBjYjU='}
2021-10-04 16:29:43,797 - [test_login05.py - line:53] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE4My43NjMwMzcyOmI0MWMzMmM3NTY4YTY0NmUyYThjODBkZGNhNmY5Zjc1ZDAyNTBjYjU='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE4M[64 chars]jU='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjE4My43NjMwMzcyOmI0MWMzMmM3NTY4YTY0NmUyYThjODBkZGNhNmY5Zjc1ZDAyNTBjYjU='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE4My43NjMwMzcyOmI0MWMzMmM3NTY4YTY0NmUyYThjODBkZGNhNmY5Zjc1ZDAyNTBjYjU='}
2021-10-04 16:29:43,883 - [test_login05.py - line:52] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE4My44NDc4MTAzOmMxZGNmNTUzYWMzMmEzNmRjMDBmNThlOTBiNGQwMmI5MjZhNGE4Zjk='}
2021-10-04 16:29:43,884 - [test_login05.py - line:53] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE4My44NDc4MTAzOmMxZGNmNTUzYWMzMmEzNmRjMDBmNThlOTBiNGQwMmI5MjZhNGE4Zjk='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE4M[64 chars]jk='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjE4My44NDc4MTAzOmMxZGNmNTUzYWMzMmEzNmRjMDBmNThlOTBiNGQwMmI5MjZhNGE4Zjk='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE4My44NDc4MTAzOmMxZGNmNTUzYWMzMmEzNmRjMDBmNThlOTBiNGQwMmI5MjZhNGE4Zjk='}
2021-10-04 16:29:57,038 - [test_login05.py - line:52] - ERROR:测试编号1,测试用例标题:正常登录流程,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:29:57,038 - [test_login05.py - line:53] - ERROR:'登录成功' not found in "{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 47, in test_login
    self.assertIn(case.expect, str(res_body))
  File "D:\tools\python\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}"
2021-10-04 16:29:57,168 - [test_login05.py - line:52] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE5Ny4xMzEyODI6NjFhNjJjMDM0MWE0NWJiOWM2ODVmNTM0ZTAwMWNlZTBmYzkyMDE1OQ=='}
2021-10-04 16:29:57,169 - [test_login05.py - line:53] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE5Ny4xMzEyODI6NjFhNjJjMDM0MWE0NWJiOWM2ODVmNTM0ZTAwMWNlZTBmYzkyMDE1OQ=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE5N[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjE5Ny4xMzEyODI6NjFhNjJjMDM0MWE0NWJiOWM2ODVmNTM0ZTAwMWNlZTBmYzkyMDE1OQ=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE5Ny4xMzEyODI6NjFhNjJjMDM0MWE0NWJiOWM2ODVmNTM0ZTAwMWNlZTBmYzkyMDE1OQ=='}
2021-10-04 16:29:57,255 - [test_login05.py - line:52] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:29:57,255 - [test_login05.py - line:53] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:29:57,302 - [test_login05.py - line:52] - ERROR:测试编号7,测试用例标题:测试错误密码的场景,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:29:57,302 - [test_login05.py - line:53] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:29:57,431 - [test_login05.py - line:52] - ERROR:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:29:57,431 - [test_login05.py - line:53] - ERROR: :: {'code': 1005, 'msg': 'typeId类型格式不正确'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1005, 'msg': 'typeId类型格式不正确'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1005, 'msg': 'typeId类型格式不正确'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1005, 'msg': 'typeId类型格式不正确'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:29:57,474 - [test_login05.py - line:52] - ERROR:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:29:57,474 - [test_login05.py - line:53] - ERROR: :: {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:09,082 - [test_login05.py - line:53] - ERROR:测试编号1,测试用例标题:正常登录流程,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:09,082 - [test_login05.py - line:54] - ERROR:'登录成功' not found in "{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 48, in test_login
    self.assertIn(case.expect, str(res_body))
  File "D:\tools\python\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}"
2021-10-04 16:31:09,211 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI2OS4xNzQ1OTU2OmEwMTMwMzRlY2Y4ZmVhMTZkYWFjZTk0ZThjZDBjNDllNDczZDlkNzQ='}
2021-10-04 16:31:09,211 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI2OS4xNzQ1OTU2OmEwMTMwMzRlY2Y4ZmVhMTZkYWFjZTk0ZThjZDBjNDllNDczZDlkNzQ='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI2O[64 chars]zQ='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjI2OS4xNzQ1OTU2OmEwMTMwMzRlY2Y4ZmVhMTZkYWFjZTk0ZThjZDBjNDllNDczZDlkNzQ='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI2OS4xNzQ1OTU2OmEwMTMwMzRlY2Y4ZmVhMTZkYWFjZTk0ZThjZDBjNDllNDczZDlkNzQ='}
2021-10-04 16:31:09,297 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:09,297 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:09,339 - [test_login05.py - line:53] - ERROR:测试编号7,测试用例标题:测试错误密码的场景,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:09,339 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:09,466 - [test_login05.py - line:53] - ERROR:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:09,466 - [test_login05.py - line:54] - ERROR: :: {'code': 1005, 'msg': 'typeId类型格式不正确'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1005, 'msg': 'typeId类型格式不正确'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1005, 'msg': 'typeId类型格式不正确'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1005, 'msg': 'typeId类型格式不正确'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:09,514 - [test_login05.py - line:53] - ERROR:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:09,514 - [test_login05.py - line:54] - ERROR: :: {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:29,538 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI4OS41MDIyMjczOjk5OWU0Zjk0NWQxYzdiMDFjNmJkMmY4Yjk0OWViYjljYzNlMDgxYjM='}
2021-10-04 16:31:29,539 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI4OS41MDIyMjczOjk5OWU0Zjk0NWQxYzdiMDFjNmJkMmY4Yjk0OWViYjljYzNlMDgxYjM='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI4O[64 chars]jM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjI4OS41MDIyMjczOjk5OWU0Zjk0NWQxYzdiMDFjNmJkMmY4Yjk0OWViYjljYzNlMDgxYjM='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI4OS41MDIyMjczOjk5OWU0Zjk0NWQxYzdiMDFjNmJkMmY4Yjk0OWViYjljYzNlMDgxYjM='}
2021-10-04 16:31:29,628 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI4OS41OTA5OTE1OjIzNDU4YjU4N2I2N2E1MDAxZTNhMTM4YTg4Y2Y2N2ZmMmRkZWNjZWI='}
2021-10-04 16:31:29,628 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI4OS41OTA5OTE1OjIzNDU4YjU4N2I2N2E1MDAxZTNhMTM4YTg4Y2Y2N2ZmMmRkZWNjZWI='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI4O[64 chars]WI='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjI4OS41OTA5OTE1OjIzNDU4YjU4N2I2N2E1MDAxZTNhMTM4YTg4Y2Y2N2ZmMmRkZWNjZWI='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI4OS41OTA5OTE1OjIzNDU4YjU4N2I2N2E1MDAxZTNhMTM4YTg4Y2Y2N2ZmMmRkZWNjZWI='}
2021-10-04 16:31:36,465 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI5Ni40Mjg3MDE5OjBlMWU0YjNjMTJiZTIzZWJhYmUxNWI1MTU4ZjYyMjdjZTU4MGM5ZTQ='}
2021-10-04 16:31:36,465 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI5Ni40Mjg3MDE5OjBlMWU0YjNjMTJiZTIzZWJhYmUxNWI1MTU4ZjYyMjdjZTU4MGM5ZTQ='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI5N[64 chars]TQ='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjI5Ni40Mjg3MDE5OjBlMWU0YjNjMTJiZTIzZWJhYmUxNWI1MTU4ZjYyMjdjZTU4MGM5ZTQ='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI5Ni40Mjg3MDE5OjBlMWU0YjNjMTJiZTIzZWJhYmUxNWI1MTU4ZjYyMjdjZTU4MGM5ZTQ='}
2021-10-04 16:31:36,553 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI5Ni41MTY0Njc6ZTY4OGJiYzY5MWE0MjI2ODNiMDE4YjY2NGZlNjI2YmM5YzJkYjZhNA=='}
2021-10-04 16:31:36,553 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI5Ni41MTY0Njc6ZTY4OGJiYzY5MWE0MjI2ODNiMDE4YjY2NGZlNjI2YmM5YzJkYjZhNA=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI5N[64 chars]A=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjI5Ni41MTY0Njc6ZTY4OGJiYzY5MWE0MjI2ODNiMDE4YjY2NGZlNjI2YmM5YzJkYjZhNA=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI5Ni41MTY0Njc6ZTY4OGJiYzY5MWE0MjI2ODNiMDE4YjY2NGZlNjI2YmM5YzJkYjZhNA=='}
2021-10-04 16:31:39,125 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI5OS4wODk1ODU6YzEzYmUxNmM0MmNiMjRiNDQwNTRiNWQ2ZTg2ZWRiN2QyOGUxZjc2Mw=='}
2021-10-04 16:31:39,125 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI5OS4wODk1ODU6YzEzYmUxNmM0MmNiMjRiNDQwNTRiNWQ2ZTg2ZWRiN2QyOGUxZjc2Mw=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI5O[64 chars]w=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjI5OS4wODk1ODU6YzEzYmUxNmM0MmNiMjRiNDQwNTRiNWQ2ZTg2ZWRiN2QyOGUxZjc2Mw=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI5OS4wODk1ODU6YzEzYmUxNmM0MmNiMjRiNDQwNTRiNWQ2ZTg2ZWRiN2QyOGUxZjc2Mw=='}
2021-10-04 16:31:39,236 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI5OS4xOTUzMDI3OjQ3NDdiOGQ2NTczNGY0YWUwZGUzN2VjNjUxZWFlOTIwNWZmZGE0MzA='}
2021-10-04 16:31:39,237 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI5OS4xOTUzMDI3OjQ3NDdiOGQ2NTczNGY0YWUwZGUzN2VjNjUxZWFlOTIwNWZmZGE0MzA='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI5O[64 chars]zA='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjI5OS4xOTUzMDI3OjQ3NDdiOGQ2NTczNGY0YWUwZGUzN2VjNjUxZWFlOTIwNWZmZGE0MzA='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI5OS4xOTUzMDI3OjQ3NDdiOGQ2NTczNGY0YWUwZGUzN2VjNjUxZWFlOTIwNWZmZGE0MzA='}
2021-10-04 16:31:42,156 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMwMi4xMjE0NzYyOjkzNmU4ZDM1MzhhMjJkYjk0OWMzOGI5MzkzOGM2MmM2MGQxMjdmMDc='}
2021-10-04 16:31:42,156 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMwMi4xMjE0NzYyOjkzNmU4ZDM1MzhhMjJkYjk0OWMzOGI5MzkzOGM2MmM2MGQxMjdmMDc='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMwM[64 chars]Dc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMwMi4xMjE0NzYyOjkzNmU4ZDM1MzhhMjJkYjk0OWMzOGI5MzkzOGM2MmM2MGQxMjdmMDc='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMwMi4xMjE0NzYyOjkzNmU4ZDM1MzhhMjJkYjk0OWMzOGI5MzkzOGM2MmM2MGQxMjdmMDc='}
2021-10-04 16:31:42,246 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMwMi4yMDYyNDkyOmIwYTkxMGE5ZmYxYmE3ZjgxZGE3YmQ4YWM2OGFiMDY3YzI5ZmUzYTg='}
2021-10-04 16:31:42,246 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMwMi4yMDYyNDkyOmIwYTkxMGE5ZmYxYmE3ZjgxZGE3YmQ4YWM2OGFiMDY3YzI5ZmUzYTg='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMwM[64 chars]Tg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMwMi4yMDYyNDkyOmIwYTkxMGE5ZmYxYmE3ZjgxZGE3YmQ4YWM2OGFiMDY3YzI5ZmUzYTg='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMwMi4yMDYyNDkyOmIwYTkxMGE5ZmYxYmE3ZjgxZGE3YmQ4YWM2OGFiMDY3YzI5ZmUzYTg='}
2021-10-04 16:31:45,031 - [test_login05.py - line:53] - ERROR:测试编号1,测试用例标题:正常登录流程,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:45,031 - [test_login05.py - line:54] - ERROR:'登录成功' not found in "{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 48, in test_login
    self.assertIn(case.expect, str(res_body))
  File "D:\tools\python\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}"
2021-10-04 16:31:45,157 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMwNS4xMjI0NDk0OmQxMDA5Mjg3MDY0MjI5NzBkODM5ZGRjNTc3YTQ3NGJhNjlmZTU5NGQ='}
2021-10-04 16:31:45,157 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMwNS4xMjI0NDk0OmQxMDA5Mjg3MDY0MjI5NzBkODM5ZGRjNTc3YTQ3NGJhNjlmZTU5NGQ='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMwN[64 chars]GQ='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMwNS4xMjI0NDk0OmQxMDA5Mjg3MDY0MjI5NzBkODM5ZGRjNTc3YTQ3NGJhNjlmZTU5NGQ='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMwNS4xMjI0NDk0OmQxMDA5Mjg3MDY0MjI5NzBkODM5ZGRjNTc3YTQ3NGJhNjlmZTU5NGQ='}
2021-10-04 16:31:45,243 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:45,244 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:45,289 - [test_login05.py - line:53] - ERROR:测试编号7,测试用例标题:测试错误密码的场景,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:45,289 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:45,421 - [test_login05.py - line:53] - ERROR:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:45,421 - [test_login05.py - line:54] - ERROR: :: {'code': 1005, 'msg': 'typeId类型格式不正确'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1005, 'msg': 'typeId类型格式不正确'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1005, 'msg': 'typeId类型格式不正确'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1005, 'msg': 'typeId类型格式不正确'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:45,466 - [test_login05.py - line:53] - ERROR:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:45,466 - [test_login05.py - line:54] - ERROR: :: {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:32:04,624 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMyNC41ODgzODYzOjBjNzk3MDQzOTM5ZjM5NzkyNjkxOWI4OTRjZmRhZDI1NzkzMWFmNTM='}
2021-10-04 16:32:04,624 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMyNC41ODgzODYzOjBjNzk3MDQzOTM5ZjM5NzkyNjkxOWI4OTRjZmRhZDI1NzkzMWFmNTM='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMyN[64 chars]TM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMyNC41ODgzODYzOjBjNzk3MDQzOTM5ZjM5NzkyNjkxOWI4OTRjZmRhZDI1NzkzMWFmNTM='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMyNC41ODgzODYzOjBjNzk3MDQzOTM5ZjM5NzkyNjkxOWI4OTRjZmRhZDI1NzkzMWFmNTM='}
2021-10-04 16:32:04,710 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMyNC42NzMxNTk0Ojk1ODc3NTM5OWVhZDhlMTZlYWM0ZWVmNGI0NTY4Yzk2YjkyNGNiMGQ='}
2021-10-04 16:32:04,710 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMyNC42NzMxNTk0Ojk1ODc3NTM5OWVhZDhlMTZlYWM0ZWVmNGI0NTY4Yzk2YjkyNGNiMGQ='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMyN[64 chars]GQ='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMyNC42NzMxNTk0Ojk1ODc3NTM5OWVhZDhlMTZlYWM0ZWVmNGI0NTY4Yzk2YjkyNGNiMGQ='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMyNC42NzMxNTk0Ojk1ODc3NTM5OWVhZDhlMTZlYWM0ZWVmNGI0NTY4Yzk2YjkyNGNiMGQ='}
2021-10-04 16:32:06,704 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMyNi42Njk4MTg5OmZmNzc5ZDRiMjRiODRlMTMwMzVhYzY5NTE2YjM3MzcyY2M2MTI3OTE='}
2021-10-04 16:32:06,704 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMyNi42Njk4MTg5OmZmNzc5ZDRiMjRiODRlMTMwMzVhYzY5NTE2YjM3MzcyY2M2MTI3OTE='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMyN[64 chars]TE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMyNi42Njk4MTg5OmZmNzc5ZDRiMjRiODRlMTMwMzVhYzY5NTE2YjM3MzcyY2M2MTI3OTE='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMyNi42Njk4MTg5OmZmNzc5ZDRiMjRiODRlMTMwMzVhYzY5NTE2YjM3MzcyY2M2MTI3OTE='}
2021-10-04 16:32:06,794 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMyNi43NTQ1OTI0OmVhYTFkNWNhNjIxYmUzYWIzOGIzZjMzYjM5NGM5Y2U3NmQ3NWM0NmQ='}
2021-10-04 16:32:06,794 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMyNi43NTQ1OTI0OmVhYTFkNWNhNjIxYmUzYWIzOGIzZjMzYjM5NGM5Y2U3NmQ3NWM0NmQ='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMyN[64 chars]mQ='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMyNi43NTQ1OTI0OmVhYTFkNWNhNjIxYmUzYWIzOGIzZjMzYjM5NGM5Y2U3NmQ3NWM0NmQ='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMyNi43NTQ1OTI0OmVhYTFkNWNhNjIxYmUzYWIzOGIzZjMzYjM5NGM5Y2U3NmQ3NWM0NmQ='}
2021-10-04 16:32:08,997 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMyOC45NjM2OTE1OmYyZjUyMDc2YTJhYmJiNzA4ZWVmM2Q4OGUzODgwOTA0ODhhNzNlNTU='}
2021-10-04 16:32:08,998 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMyOC45NjM2OTE1OmYyZjUyMDc2YTJhYmJiNzA4ZWVmM2Q4OGUzODgwOTA0ODhhNzNlNTU='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMyO[64 chars]TU='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMyOC45NjM2OTE1OmYyZjUyMDc2YTJhYmJiNzA4ZWVmM2Q4OGUzODgwOTA0ODhhNzNlNTU='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMyOC45NjM2OTE1OmYyZjUyMDc2YTJhYmJiNzA4ZWVmM2Q4OGUzODgwOTA0ODhhNzNlNTU='}
2021-10-04 16:32:09,086 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMyOS4wNDk0NTUyOjU5ZDdjZTVjNzVjMWEzN2UwMDBlNWI0ZWY2ZTdiMGVjNmMzZjgwMGM='}
2021-10-04 16:32:09,086 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMyOS4wNDk0NTUyOjU5ZDdjZTVjNzVjMWEzN2UwMDBlNWI0ZWY2ZTdiMGVjNmMzZjgwMGM='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMyO[64 chars]GM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMyOS4wNDk0NTUyOjU5ZDdjZTVjNzVjMWEzN2UwMDBlNWI0ZWY2ZTdiMGVjNmMzZjgwMGM='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMyOS4wNDk0NTUyOjU5ZDdjZTVjNzVjMWEzN2UwMDBlNWI0ZWY2ZTdiMGVjNmMzZjgwMGM='}
2021-10-04 16:32:10,686 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzMC42NDgxNzg6MDQzODA4YzNhYjEyMDkxMmM5YzcyNzdjZGZkMTAxYjg3ODY4ZDIxMA=='}
2021-10-04 16:32:10,686 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzMC42NDgxNzg6MDQzODA4YzNhYjEyMDkxMmM5YzcyNzdjZGZkMTAxYjg3ODY4ZDIxMA=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzM[64 chars]A=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMzMC42NDgxNzg6MDQzODA4YzNhYjEyMDkxMmM5YzcyNzdjZGZkMTAxYjg3ODY4ZDIxMA=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzMC42NDgxNzg6MDQzODA4YzNhYjEyMDkxMmM5YzcyNzdjZGZkMTAxYjg3ODY4ZDIxMA=='}
2021-10-04 16:32:10,772 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzMC43MzQ5NDk0OmJlMjZkN2FmOTg4M2UyNDIxYzYwY2Y0YmM5NThmZGQ5ZmJiYmUwMWE='}
2021-10-04 16:32:10,772 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzMC43MzQ5NDk0OmJlMjZkN2FmOTg4M2UyNDIxYzYwY2Y0YmM5NThmZGQ5ZmJiYmUwMWE='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzM[64 chars]WE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMzMC43MzQ5NDk0OmJlMjZkN2FmOTg4M2UyNDIxYzYwY2Y0YmM5NThmZGQ5ZmJiYmUwMWE='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzMC43MzQ5NDk0OmJlMjZkN2FmOTg4M2UyNDIxYzYwY2Y0YmM5NThmZGQ5ZmJiYmUwMWE='}
2021-10-04 16:32:12,703 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzMi42Njg3NzQ2OjI0NGJiMTE3NGI0ZjIxZGVkY2Q5ODBkZjYzMjdjYTg3NTM0NmI3MDQ='}
2021-10-04 16:32:12,704 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzMi42Njg3NzQ2OjI0NGJiMTE3NGI0ZjIxZGVkY2Q5ODBkZjYzMjdjYTg3NTM0NmI3MDQ='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzM[64 chars]DQ='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMzMi42Njg3NzQ2OjI0NGJiMTE3NGI0ZjIxZGVkY2Q5ODBkZjYzMjdjYTg3NTM0NmI3MDQ='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzMi42Njg3NzQ2OjI0NGJiMTE3NGI0ZjIxZGVkY2Q5ODBkZjYzMjdjYTg3NTM0NmI3MDQ='}
2021-10-04 16:32:12,799 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzMi43NTc1Mzg4OjgzNTZmN2MzM2ZkZjhmMDQ2MzE5MmMyN2Q0OGEwMzEzNmJkOWExZDY='}
2021-10-04 16:32:12,800 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzMi43NTc1Mzg4OjgzNTZmN2MzM2ZkZjhmMDQ2MzE5MmMyN2Q0OGEwMzEzNmJkOWExZDY='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzM[64 chars]DY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMzMi43NTc1Mzg4OjgzNTZmN2MzM2ZkZjhmMDQ2MzE5MmMyN2Q0OGEwMzEzNmJkOWExZDY='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzMi43NTc1Mzg4OjgzNTZmN2MzM2ZkZjhmMDQ2MzE5MmMyN2Q0OGEwMzEzNmJkOWExZDY='}
2021-10-04 16:32:14,805 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzNC43NTYxOTI0OjJhZThmYzgyNjExMTY1MzQ1NGM4Mjg4OWI5NGI4MmMxMjE5YzRjMzI='}
2021-10-04 16:32:14,805 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzNC43NTYxOTI0OjJhZThmYzgyNjExMTY1MzQ1NGM4Mjg4OWI5NGI4MmMxMjE5YzRjMzI='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzN[64 chars]zI='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMzNC43NTYxOTI0OjJhZThmYzgyNjExMTY1MzQ1NGM4Mjg4OWI5NGI4MmMxMjE5YzRjMzI='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzNC43NTYxOTI0OjJhZThmYzgyNjExMTY1MzQ1NGM4Mjg4OWI5NGI4MmMxMjE5YzRjMzI='}
2021-10-04 16:32:14,909 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzNC44NTM5Mjk4OmQ0NGQ2ZmUwZWFmZWY2YjcyYjdkMzg3MjVmNWI3NjlmMTkyNDhiNGY='}
2021-10-04 16:32:14,909 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzNC44NTM5Mjk4OmQ0NGQ2ZmUwZWFmZWY2YjcyYjdkMzg3MjVmNWI3NjlmMTkyNDhiNGY='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzN[64 chars]GY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMzNC44NTM5Mjk4OmQ0NGQ2ZmUwZWFmZWY2YjcyYjdkMzg3MjVmNWI3NjlmMTkyNDhiNGY='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzNC44NTM5Mjk4OmQ0NGQ2ZmUwZWFmZWY2YjcyYjdkMzg3MjVmNWI3NjlmMTkyNDhiNGY='}
2021-10-04 16:32:17,208 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzNy4xNzE3MzE6YmE0Nzk0ZmU5OGQxMGQ2YTk1YTQwM2EzZjQwZTNiZjQ0MDk5M2Y4OQ=='}
2021-10-04 16:32:17,208 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzNy4xNzE3MzE6YmE0Nzk0ZmU5OGQxMGQ2YTk1YTQwM2EzZjQwZTNiZjQ0MDk5M2Y4OQ=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzN[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMzNy4xNzE3MzE6YmE0Nzk0ZmU5OGQxMGQ2YTk1YTQwM2EzZjQwZTNiZjQ0MDk5M2Y4OQ=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzNy4xNzE3MzE6YmE0Nzk0ZmU5OGQxMGQ2YTk1YTQwM2EzZjQwZTNiZjQ0MDk5M2Y4OQ=='}
2021-10-04 16:32:17,296 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzNy4yNTc1MDE2OjlmZmI1NDBiMjY2N2VhZTg5OWJhY2M3OGRhYTgzYzM0NTBiODc1NmY='}
2021-10-04 16:32:17,296 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzNy4yNTc1MDE2OjlmZmI1NDBiMjY2N2VhZTg5OWJhY2M3OGRhYTgzYzM0NTBiODc1NmY='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzN[64 chars]mY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMzNy4yNTc1MDE2OjlmZmI1NDBiMjY2N2VhZTg5OWJhY2M3OGRhYTgzYzM0NTBiODc1NmY='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzNy4yNTc1MDE2OjlmZmI1NDBiMjY2N2VhZTg5OWJhY2M3OGRhYTgzYzM0NTBiODc1NmY='}
2021-10-05 09:38:38,582 - [test_business_register01.py - line:32] - ERROR:测试编号1,测试用例标题:注册正常流程,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 09:38:38,583 - [test_business_register01.py - line:33] - ERROR: :: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register01.py", line 29, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:47:29,885 - [test_business_register03.py - line:59] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:47:29,885 - [test_business_register03.py - line:60] - ERROR: :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:47:29,971 - [test_business_register03.py - line:59] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1000, 'msg': '注册成功'}!
2021-10-05 16:47:29,971 - [test_business_register03.py - line:60] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1010, 'msg': '生日格式错误'}
?            ^           ^^^^^^

+ {'code': 1000, 'msg': '注册成功'}
?            ^           ^^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
2021-10-05 16:47:30,053 - [test_business_register03.py - line:59] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1000, 'msg': '注册成功'}!
2021-10-05 16:47:30,053 - [test_business_register03.py - line:60] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1010, 'msg': '生日格式错误'}
?            ^           ^^^^^^

+ {'code': 1000, 'msg': '注册成功'}
?            ^           ^^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
2021-10-05 16:47:31,211 - [test_business_register03.py - line:59] - ERROR:测试编号22,测试用例标题:测试手机号已注册的场景,执行失败,实际结果为:{'code': 1000, 'msg': '注册成功'}!
2021-10-05 16:47:31,211 - [test_business_register03.py - line:60] - ERROR: :: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
2021-10-05 16:50:03,498 - [test_business_register03.py - line:59] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:50:03,498 - [test_business_register03.py - line:60] - ERROR: :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:50:03,585 - [test_business_register03.py - line:59] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:50:03,585 - [test_business_register03.py - line:60] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:50:03,670 - [test_business_register03.py - line:59] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:50:03,670 - [test_business_register03.py - line:60] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:50:04,904 - [test_business_register03.py - line:59] - ERROR:测试编号22,测试用例标题:测试手机号已注册的场景,执行失败,实际结果为:{'code': 1000, 'msg': '注册成功'}!
2021-10-05 16:50:04,904 - [test_business_register03.py - line:60] - ERROR: :: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
2021-10-05 16:51:58,147 - [test_business_register03.py - line:59] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:51:58,147 - [test_business_register03.py - line:60] - ERROR: :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:51:58,232 - [test_business_register03.py - line:59] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:51:58,232 - [test_business_register03.py - line:60] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:51:58,315 - [test_business_register03.py - line:59] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:51:58,316 - [test_business_register03.py - line:60] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:51:59,468 - [test_business_register03.py - line:59] - ERROR:测试编号22,测试用例标题:测试手机号已注册的场景,执行失败,实际结果为:{'code': 1000, 'msg': '注册成功'}!
2021-10-05 16:51:59,468 - [test_business_register03.py - line:60] - ERROR: :: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
2021-10-05 16:52:24,679 - [test_business_register03.py - line:60] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:52:24,680 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:52:24,763 - [test_business_register03.py - line:60] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:52:24,764 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:52:24,847 - [test_business_register03.py - line:60] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:52:24,847 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:52:26,011 - [test_business_register03.py - line:60] - ERROR:测试编号22,测试用例标题:测试手机号已注册的场景,执行失败,实际结果为:{'code': 1000, 'msg': '注册成功'}!
2021-10-05 16:52:26,011 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
2021-10-05 16:53:51,304 - [test_business_register03.py - line:60] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:53:51,304 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:53:51,393 - [test_business_register03.py - line:60] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:53:51,394 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:53:51,478 - [test_business_register03.py - line:60] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:53:51,478 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:54:10,979 - [test_business_register03.py - line:60] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:54:10,980 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:54:11,065 - [test_business_register03.py - line:60] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:54:11,065 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:54:11,149 - [test_business_register03.py - line:60] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:54:11,149 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:54:29,528 - [test_business_register03.py - line:60] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:54:29,528 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:54:29,613 - [test_business_register03.py - line:60] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:54:29,613 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:54:29,698 - [test_business_register03.py - line:60] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:54:29,699 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:55:07,216 - [test_business_register03.py - line:60] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:55:07,216 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:55:07,303 - [test_business_register03.py - line:60] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1000, 'msg': '注册成功'}!
2021-10-05 16:55:07,303 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1010, 'msg': '生日格式错误'}
?            ^           ^^^^^^

+ {'code': 1000, 'msg': '注册成功'}
?            ^           ^^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
2021-10-05 16:55:07,388 - [test_business_register03.py - line:60] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1000, 'msg': '注册成功'}!
2021-10-05 16:55:07,388 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1010, 'msg': '生日格式错误'}
?            ^           ^^^^^^

+ {'code': 1000, 'msg': '注册成功'}
?            ^           ^^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
2021-10-05 16:57:27,812 - [test_business_register03.py - line:60] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:57:27,813 - [test_business_register03.py - line:61] - ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:57:27,897 - [test_business_register03.py - line:60] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:57:27,897 - [test_business_register03.py - line:61] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:57:27,997 - [test_business_register03.py - line:60] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:57:27,997 - [test_business_register03.py - line:61] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:57:30,251 - [test_login05.py - line:52] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzQ1NDI1MC4xNzg1NTM2OmZlMDFmNTc5NGYwYjQ0YzU1MzBlYTE0NzI4NjliMjEyMTUyMzFkZDg='}
2021-10-05 16:57:30,251 - [test_login05.py - line:53] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzQ1NDI1M[64 chars]Dg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzQ1NDI1MC4xNzg1NTM2OmZlMDFmNTc5NGYwYjQ0YzU1MzBlYTE0NzI4NjliMjEyMTUyMzFkZDg='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzQ1NDI1M[64 chars]Dg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzQ1NDI1MC4xNzg1NTM2OmZlMDFmNTc5NGYwYjQ0YzU1MzBlYTE0NzI4NjliMjEyMTUyMzFkZDg='}
2021-10-05 16:57:30,434 - [test_login05.py - line:52] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzQ1NDI1MC4zNDExMTk4Ojk4Nzc0MGE0Y2QyYmZiZjY4MzIyZTRhYWEwYzI1MThhYzFiOWFmNmE='}
2021-10-05 16:57:30,435 - [test_login05.py - line:53] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzQ1NDI1M[64 chars]mE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzQ1NDI1MC4zNDExMTk4Ojk4Nzc0MGE0Y2QyYmZiZjY4MzIyZTRhYWEwYzI1MThhYzFiOWFmNmE='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzQ1NDI1M[64 chars]mE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzQ1NDI1MC4zNDExMTk4Ojk4Nzc0MGE0Y2QyYmZiZjY4MzIyZTRhYWEwYzI1MThhYzFiOWFmNmE='}
2021-10-06 10:39:35,551 - [test_business_register03.py - line:59] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-06 10:39:35,551 - [test_business_register03.py - line:60] - ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-06 10:39:35,676 - [test_business_register03.py - line:59] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-06 10:39:35,676 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-06 10:39:35,786 - [test_business_register03.py - line:59] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-06 10:39:35,786 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-06 10:40:07,903 - [test_business_register03.py - line:59] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-06 10:40:07,903 - [test_business_register03.py - line:60] - ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-06 10:40:07,997 - [test_business_register03.py - line:59] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-06 10:40:07,997 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-06 10:40:08,106 - [test_business_register03.py - line:59] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-06 10:40:08,106 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-06 14:55:12,565 - [test_business_token_goodsInfo03.py - line:69] - ERROR:测试编号5,测试用例标题:测试上一次的token的场景,执行失败,实际结果为:{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone11', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '华为P40', 'shopPrice': 6000.0, 'promotePrice': 0.0, 'num': 666}, {'goodsName': '华为P50', 'shopPrice': 4500.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米11', 'shopPrice': 4000.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '三星s21', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}]}!
2021-10-06 14:55:12,565 - [test_business_token_goodsInfo03.py - line:70] - ERROR: :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000,
 'goods_tiems': [{'goodsName': '预留数据',
                  'num': 1000,
                  'promotePrice': 0.0,
                  'shopPrice': 100.0},
                 {'goodsName': 'iphone11',
                  'num': 100,
                  'promotePrice': 0.0,
                  'shopPrice': 9999.0},
                 {'goodsName': '华为P40',
                  'num': 666,
                  'promotePrice': 0.0,
                  'shopPrice': 6000.0},
                 {'goodsName': '华为P50',
                  'num': 999,
                  'promotePrice': 0.0,
                  'shopPrice': 4500.0},
                 {'goodsName': '小米11',
                  'num': 999,
                  'promotePrice': 0.0,
                  'shopPrice': 4000.0},
                 {'goodsName': '三星s21',
                  'num': 9999,
                  'promotePrice': 0.0,
                  'shopPrice': 7000.0}],
 'msg': '查询成功'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[458 chars]99}]}
Diff is 1025 characters long. Set self.maxDiff to None to see it.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 66, in test_token_goods_info
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000,
 'goods_tiems': [{'goodsName': '预留数据',
                  'num': 1000,
                  'promotePrice': 0.0,
                  'shopPrice': 100.0},
                 {'goodsName': 'iphone11',
                  'num': 100,
                  'promotePrice': 0.0,
                  'shopPrice': 9999.0},
                 {'goodsName': '华为P40',
                  'num': 666,
                  'promotePrice': 0.0,
                  'shopPrice': 6000.0},
                 {'goodsName': '华为P50',
                  'num': 999,
                  'promotePrice': 0.0,
                  'shopPrice': 4500.0},
                 {'goodsName': '小米11',
                  'num': 999,
                  'promotePrice': 0.0,
                  'shopPrice': 4000.0},
                 {'goodsName': '三星s21',
                  'num': 9999,
                  'promotePrice': 0.0,
                  'shopPrice': 7000.0}],
 'msg': '查询成功'}
2021-10-06 14:55:57,612 - [test_business_token_goodsInfo03.py - line:69] - ERROR:测试编号5,测试用例标题:测试上一次的token的场景,执行失败,实际结果为:{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone11', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '华为P40', 'shopPrice': 6000.0, 'promotePrice': 0.0, 'num': 666}, {'goodsName': '华为P50', 'shopPrice': 4500.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米11', 'shopPrice': 4000.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '三星s21', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}]}!
2021-10-06 14:55:57,612 - [test_business_token_goodsInfo03.py - line:70] - ERROR: :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000,
 'goods_tiems': [{'goodsName': '预留数据',
                  'num': 1000,
                  'promotePrice': 0.0,
                  'shopPrice': 100.0},
                 {'goodsName': 'iphone11',
                  'num': 100,
                  'promotePrice': 0.0,
                  'shopPrice': 9999.0},
                 {'goodsName': '华为P40',
                  'num': 666,
                  'promotePrice': 0.0,
                  'shopPrice': 6000.0},
                 {'goodsName': '华为P50',
                  'num': 999,
                  'promotePrice': 0.0,
                  'shopPrice': 4500.0},
                 {'goodsName': '小米11',
                  'num': 999,
                  'promotePrice': 0.0,
                  'shopPrice': 4000.0},
                 {'goodsName': '三星s21',
                  'num': 9999,
                  'promotePrice': 0.0,
                  'shopPrice': 7000.0}],
 'msg': '查询成功'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[458 chars]99}]}
Diff is 1025 characters long. Set self.maxDiff to None to see it.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 66, in test_token_goods_info
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000,
 'goods_tiems': [{'goodsName': '预留数据',
                  'num': 1000,
                  'promotePrice': 0.0,
                  'shopPrice': 100.0},
                 {'goodsName': 'iphone11',
                  'num': 100,
                  'promotePrice': 0.0,
                  'shopPrice': 9999.0},
                 {'goodsName': '华为P40',
                  'num': 666,
                  'promotePrice': 0.0,
                  'shopPrice': 6000.0},
                 {'goodsName': '华为P50',
                  'num': 999,
                  'promotePrice': 0.0,
                  'shopPrice': 4500.0},
                 {'goodsName': '小米11',
                  'num': 999,
                  'promotePrice': 0.0,
                  'shopPrice': 4000.0},
                 {'goodsName': '三星s21',
                  'num': 9999,
                  'promotePrice': 0.0,
                  'shopPrice': 7000.0}],
 'msg': '查询成功'}
2021-10-06 14:56:01,830 - [test_business_token_goodsInfo03.py - line:69] - ERROR:测试编号5,测试用例标题:测试上一次的token的场景,执行失败,实际结果为:{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone11', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '华为P40', 'shopPrice': 6000.0, 'promotePrice': 0.0, 'num': 666}, {'goodsName': '华为P50', 'shopPrice': 4500.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米11', 'shopPrice': 4000.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '三星s21', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}]}!
2021-10-06 14:56:01,831 - [test_business_token_goodsInfo03.py - line:70] - ERROR: :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000,
 'goods_tiems': [{'goodsName': '预留数据',
                  'num': 1000,
                  'promotePrice': 0.0,
                  'shopPrice': 100.0},
                 {'goodsName': 'iphone11',
                  'num': 100,
                  'promotePrice': 0.0,
                  'shopPrice': 9999.0},
                 {'goodsName': '华为P40',
                  'num': 666,
                  'promotePrice': 0.0,
                  'shopPrice': 6000.0},
                 {'goodsName': '华为P50',
                  'num': 999,
                  'promotePrice': 0.0,
                  'shopPrice': 4500.0},
                 {'goodsName': '小米11',
                  'num': 999,
                  'promotePrice': 0.0,
                  'shopPrice': 4000.0},
                 {'goodsName': '三星s21',
                  'num': 9999,
                  'promotePrice': 0.0,
                  'shopPrice': 7000.0}],
 'msg': '查询成功'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[458 chars]99}]}
Diff is 1025 characters long. Set self.maxDiff to None to see it.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 66, in test_token_goods_info
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000,
 'goods_tiems': [{'goodsName': '预留数据',
                  'num': 1000,
                  'promotePrice': 0.0,
                  'shopPrice': 100.0},
                 {'goodsName': 'iphone11',
                  'num': 100,
                  'promotePrice': 0.0,
                  'shopPrice': 9999.0},
                 {'goodsName': '华为P40',
                  'num': 666,
                  'promotePrice': 0.0,
                  'shopPrice': 6000.0},
                 {'goodsName': '华为P50',
                  'num': 999,
                  'promotePrice': 0.0,
                  'shopPrice': 4500.0},
                 {'goodsName': '小米11',
                  'num': 999,
                  'promotePrice': 0.0,
                  'shopPrice': 4000.0},
                 {'goodsName': '三星s21',
                  'num': 9999,
                  'promotePrice': 0.0,
                  'shopPrice': 7000.0}],
 'msg': '查询成功'}
2021-10-06 14:57:06,428 - [test_business_register03.py - line:59] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-06 14:57:06,428 - [test_business_register03.py - line:60] - ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-06 14:57:06,535 - [test_business_register03.py - line:59] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-06 14:57:06,535 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-06 14:57:06,633 - [test_business_register03.py - line:59] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-06 14:57:06,633 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-06 14:57:09,515 - [test_business_token_goodsInfo03.py - line:69] - ERROR:测试编号5,测试用例标题:测试上一次的token的场景,执行失败,实际结果为:{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone11', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '华为P40', 'shopPrice': 6000.0, 'promotePrice': 0.0, 'num': 666}, {'goodsName': '华为P50', 'shopPrice': 4500.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米11', 'shopPrice': 4000.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '三星s21', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}]}!
2021-10-06 14:57:09,515 - [test_business_token_goodsInfo03.py - line:70] - ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[458 chars]99}]}
Diff is 1025 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 66, in test_token_goods_info
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[458 chars]99}]}
Diff is 1025 characters long. Set self.maxDiff to None to see it.
2021-10-06 14:57:11,853 - [test_login05.py - line:52] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzUzMzQzMS43NTc0Njc1OjMwOWNmYTgzYjY4MjI0ZWQ2MTdiMTkzN2Y3NzdlY2Q2MmY0MGViZDg='}
2021-10-06 14:57:11,853 - [test_login05.py - line:53] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzUzMzQzM[64 chars]Dg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzUzMzQzMS43NTc0Njc1OjMwOWNmYTgzYjY4MjI0ZWQ2MTdiMTkzN2Y3NzdlY2Q2MmY0MGViZDg='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzUzMzQzM[64 chars]Dg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzUzMzQzMS43NTc0Njc1OjMwOWNmYTgzYjY4MjI0ZWQ2MTdiMTkzN2Y3NzdlY2Q2MmY0MGViZDg='}
2021-10-06 14:57:12,049 - [test_login05.py - line:52] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzUzMzQzMS45NTk5MjY2OjZiNmUxNDEwZDczMGE3NjY0NjdiOTRhODQxMDhkMDkxYTcyMzZjNTM='}
2021-10-06 14:57:12,049 - [test_login05.py - line:53] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzUzMzQzM[64 chars]TM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzUzMzQzMS45NTk5MjY2OjZiNmUxNDEwZDczMGE3NjY0NjdiOTRhODQxMDhkMDkxYTcyMzZjNTM='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzUzMzQzM[64 chars]TM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzUzMzQzMS45NTk5MjY2OjZiNmUxNDEwZDczMGE3NjY0NjdiOTRhODQxMDhkMDkxYTcyMzZjNTM='}
2021-10-07 09:39:33,238 - [test_business_register03.py - line:59] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-07 09:39:33,238 - [test_business_register03.py - line:60] - ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-07 09:39:33,348 - [test_business_register03.py - line:59] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-07 09:39:33,348 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-07 09:39:33,473 - [test_business_register03.py - line:59] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-07 09:39:33,473 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-07 09:39:36,534 - [test_business_token_goodsInfo03.py - line:69] - ERROR:测试编号5,测试用例标题:测试上一次的token的场景,执行失败,实际结果为:{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone11', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '三星note7', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '华为P40', 'shopPrice': 6000.0, 'promotePrice': 0.0, 'num': 666}, {'goodsName': '华为P50', 'shopPrice': 4500.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米11', 'shopPrice': 4000.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '三星s21', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}]}!
2021-10-07 09:39:36,534 - [test_business_token_goodsInfo03.py - line:70] - ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[539 chars]99}]}
Diff is 1185 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 66, in test_token_goods_info
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[539 chars]99}]}
Diff is 1185 characters long. Set self.maxDiff to None to see it.
2021-10-07 09:39:39,065 - [test_login05.py - line:52] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzYwMDc3OC45NzE3MzA1OmZiNDBiNzYyMmIzYzRkZGZmNjgyNWEwNWZlNWFhZThiOGY2YmY0NTg='}
2021-10-07 09:39:39,065 - [test_login05.py - line:53] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzYwMDc3O[64 chars]Tg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzYwMDc3OC45NzE3MzA1OmZiNDBiNzYyMmIzYzRkZGZmNjgyNWEwNWZlNWFhZThiOGY2YmY0NTg='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzYwMDc3O[64 chars]Tg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzYwMDc3OC45NzE3MzA1OmZiNDBiNzYyMmIzYzRkZGZmNjgyNWEwNWZlNWFhZThiOGY2YmY0NTg='}
2021-10-07 09:39:39,284 - [test_login05.py - line:52] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzYwMDc3OS4xNzQ4MDczOmE0YjBkNWNlNTM5MjY3MTI2NzE5MGNmNjNhZDQ5Y2Q1NzRkY2JhZDc='}
2021-10-07 09:39:39,284 - [test_login05.py - line:53] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzYwMDc3O[64 chars]Dc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzYwMDc3OS4xNzQ4MDczOmE0YjBkNWNlNTM5MjY3MTI2NzE5MGNmNjNhZDQ5Y2Q1NzRkY2JhZDc='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzYwMDc3O[64 chars]Dc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzYwMDc3OS4xNzQ4MDczOmE0YjBkNWNlNTM5MjY3MTI2NzE5MGNmNjNhZDQ5Y2Q1NzRkY2JhZDc='}
2021-10-07 16:58:52,480 - [test_business_goods_input01.py - line:38] - ERROR:测试编号1,测试用例标题:商品录入正常流程,执行失败,实际结果为:{'code': 1013, 'msg': '产品名称不能重复'}!
2021-10-07 16:58:52,480 - [test_business_goods_input01.py - line:39] - ERROR: :: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1013, 'msg': '产品名称不能重复'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^          ^ ^^^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?            ^^          ^ ^^^^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input06\test_business_goods_input01.py", line 35, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1013, 'msg': '产品名称不能重复'}
2021-10-07 17:19:12,313 - [test_business_goods_input03.py - line:53] - ERROR:测试编号21,测试用例标题:测试商品价格输入0.00,执行失败,实际结果为:{'code': 1013, 'msg': '产品名称不能重复'}!
2021-10-07 17:19:12,313 - [test_business_goods_input03.py - line:54] - ERROR: :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input06\test_business_goods_input03.py", line 45, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
2021-10-07 17:20:00,138 - [test_business_goods_input03.py - line:53] - ERROR:测试编号21,测试用例标题:测试商品价格输入0.00,执行失败,实际结果为:{'code': 1000, 'msg': '商品录入成功'}!
2021-10-07 17:20:00,138 - [test_business_goods_input03.py - line:54] - ERROR: :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1000, 'msg': '商品录入成功'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1000, 'msg': '商品录入成功'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?            ^             ^^^^^^^

+ {'code': 1000, 'msg': '商品录入成功'}
?            ^             ^^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input06\test_business_goods_input03.py", line 45, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1000, 'msg': '商品录入成功'}
2021-10-07 17:21:18,260 - [test_business_goods_input03.py - line:53] - ERROR:测试编号21,测试用例标题:测试商品价格输入0.00,执行失败,实际结果为:{'code': 1013, 'msg': '产品名称不能重复'}!
2021-10-07 17:21:18,260 - [test_business_goods_input03.py - line:54] - ERROR: :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input06\test_business_goods_input03.py", line 45, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
2021-10-07 17:22:47,999 - [test_business_goods_input03.py - line:53] - ERROR:测试编号21,测试用例标题:测试商品价格输入0.00,执行失败,实际结果为:{'code': 1000, 'msg': '商品录入成功'}!
2021-10-07 17:22:48,000 - [test_business_goods_input03.py - line:54] - ERROR: :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1000, 'msg': '商品录入成功'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1000, 'msg': '商品录入成功'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?            ^             ^^^^^^^

+ {'code': 1000, 'msg': '商品录入成功'}
?            ^             ^^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input06\test_business_goods_input03.py", line 45, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1000, 'msg': '商品录入成功'}
2021-10-07 17:22:57,539 - [test_business_goods_input03.py - line:53] - ERROR:测试编号21,测试用例标题:测试商品价格输入0.00,执行失败,实际结果为:{'code': 1013, 'msg': '产品名称不能重复'}!
2021-10-07 17:22:57,539 - [test_business_goods_input03.py - line:54] - ERROR: :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input06\test_business_goods_input03.py", line 45, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
2021-10-07 17:23:08,511 - [test_business_goods_input03.py - line:53] - ERROR:测试编号21,测试用例标题:测试商品价格输入0.00,执行失败,实际结果为:{'code': 1013, 'msg': '产品名称不能重复'}!
2021-10-07 17:23:08,511 - [test_business_goods_input03.py - line:54] - ERROR: :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input06\test_business_goods_input03.py", line 45, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
2021-10-07 17:23:47,959 - [test_business_goods_input03.py - line:53] - ERROR:测试编号21,测试用例标题:测试商品价格输入0.00,执行失败,实际结果为:{'code': 1013, 'msg': '产品名称不能重复'}!
2021-10-07 17:23:47,959 - [test_business_goods_input03.py - line:54] - ERROR: :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input06\test_business_goods_input03.py", line 45, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
2021-10-08 11:05:41,737 - [test_business_goods_promote03.py - line:62] - ERROR:测试编号19,测试用例标题:测试商品编号输入不存在的,执行失败,实际结果为:{'code': 1011, 'msg': '该商品不存在'}!
2021-10-08 11:05:41,737 - [test_business_goods_promote03.py - line:63] - ERROR: :: {'code': 1007, 'msg': '商品编号格式不正确'} != {'code': 1011, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '商品编号格式不正确'} != {'code': 1011, 'msg': '该商品不存在'}
- {'code': 1007, 'msg': '商品编号格式不正确'}
?            ^^            ---- ^^

+ {'code': 1011, 'msg': '该商品不存在'}
?            ^^          +   ^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote07\test_business_goods_promote03.py", line 53, in test_goods_promote
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '商品编号格式不正确'} != {'code': 1011, 'msg': '该商品不存在'}
2021-10-08 15:55:03,066 - [test_business_goods_delete01.py - line:38] - ERROR:测试编号1,测试用例标题:商品删除正确流程,执行失败,实际结果为:{'code': 1005, 'msg': '当前商品没有下架，不允许删除'}!
2021-10-08 15:55:03,066 - [test_business_goods_delete01.py - line:39] - ERROR: :: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^              --

+ {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ++  ++++++++


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_delete08\test_business_goods_delete01.py", line 35, in test_goods_delete
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
2021-10-08 15:55:47,779 - [test_business_goods_delete01.py - line:38] - ERROR:测试编号1,测试用例标题:商品删除正确流程,执行失败,实际结果为:{'code': 1004, 'msg': '该商品不存在'}!
2021-10-08 15:55:47,779 - [test_business_goods_delete01.py - line:39] - ERROR: :: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1004, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1004, 'msg': '该商品不存在'}
?             ^          +  ^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_delete08\test_business_goods_delete01.py", line 35, in test_goods_delete
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1004, 'msg': '该商品不存在'}
2021-10-08 16:32:31,457 - [test_business_register03.py - line:59] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-08 16:32:31,457 - [test_business_register03.py - line:60] - ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-08 16:32:31,613 - [test_business_register03.py - line:59] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-08 16:32:31,613 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-08 16:32:31,767 - [test_business_register03.py - line:59] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-08 16:32:31,767 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-08 16:32:36,185 - [test_business_token_goodsInfo03.py - line:69] - ERROR:测试编号5,测试用例标题:测试上一次的token的场景,执行失败,实际结果为:{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone11', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '三星note7', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '华为P40', 'shopPrice': 6000.0, 'promotePrice': 0.0, 'num': 666}, {'goodsName': '华为P50', 'shopPrice': 4500.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米11', 'shopPrice': 4000.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '三星s21', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '贵州茅台', 'shopPrice': 1499.0, 'promotePrice': 0.0, 'num': 0}, {'goodsName': '牛仔短裤', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': '优衣库', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': '卫龙辣条', 'shopPrice': 2.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '牛仔上衣', 'shopPrice': 99.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': '牛仔裤', 'shopPrice': 0.01, 'promotePrice': 0.0, 'num': 50}, {'goodsName': '小米8', 'shopPrice': 2299.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '三星s7', 'shopPrice': 500.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '华为mate10', 'shopPrice': 800.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '红米10', 'shopPrice': 500.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '羊毛衫', 'shopPrice': 199.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': 'iPhone8', 'shopPrice': 2999.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone5s', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone10', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone20', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhonese', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone6', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone6s', 'shopPrice': 1666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone7', 'shopPrice': 1999.0, 'promotePrice': 0.0, 'num': 9999}]}!
2021-10-08 16:32:36,186 - [test_business_token_goodsInfo03.py - line:70] - ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[2015 chars]99}]}
Diff is 4162 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 66, in test_token_goods_info
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[2015 chars]99}]}
Diff is 4162 characters long. Set self.maxDiff to None to see it.
2021-10-08 16:32:36,857 - [test_business_token_goodsInfo03.py - line:69] - ERROR:测试编号9,测试用例标题:测试isOnSale状态不对应的场景,执行失败,实际结果为:{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}]}!
2021-10-08 16:32:36,857 - [test_business_token_goodsInfo03.py - line:70] - ERROR:{'code': 1008, 'msg': '没有符合条件的数据'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[65 chars]00}]}
- {'code': 1008, 'msg': '没有符合条件的数据'}
+ {'code': 1000,
+  'goods_tiems': [{'goodsName': '预留数据',
+                   'num': 1000,
+                   'promotePrice': 0.0,
+                   'shopPrice': 100.0}],
+  'msg': '查询成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 66, in test_token_goods_info
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '没有符合条件的数据'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[65 chars]00}]}
- {'code': 1008, 'msg': '没有符合条件的数据'}
+ {'code': 1000,
+  'goods_tiems': [{'goodsName': '预留数据',
+                   'num': 1000,
+                   'promotePrice': 0.0,
+                   'shopPrice': 100.0}],
+  'msg': '查询成功'}
2021-10-08 16:32:43,591 - [test_business_goods_input03.py - line:53] - ERROR:测试编号21,测试用例标题:测试商品价格输入0.00,执行失败,实际结果为:{'code': 1013, 'msg': '产品名称不能重复'}!
2021-10-08 16:32:43,591 - [test_business_goods_input03.py - line:54] - ERROR:{'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input06\test_business_goods_input03.py", line 45, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

2021-10-08 16:32:44,978 - [test_login05.py - line:52] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzcxMTk2NC44MzU5MjAzOmQzM2UyYjA5ZmZmYTM5MmY4NDkzNTUyNTNhMDcxZTAzN2ZjYmFkNmE='}
2021-10-08 16:32:44,978 - [test_login05.py - line:53] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzcxMTk2N[64 chars]mE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzcxMTk2NC44MzU5MjAzOmQzM2UyYjA5ZmZmYTM5MmY4NDkzNTUyNTNhMDcxZTAzN2ZjYmFkNmE='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzcxMTk2N[64 chars]mE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzcxMTk2NC44MzU5MjAzOmQzM2UyYjA5ZmZmYTM5MmY4NDkzNTUyNTNhMDcxZTAzN2ZjYmFkNmE='}
2021-10-08 16:32:45,302 - [test_login05.py - line:52] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzcxMTk2NS4xNjAwNTI1OmYzNGY5MzVkZTcwOWMxZmVkODA3NWJjOTgyNTAxOWQ5NDY3OTViYTY='}
2021-10-08 16:32:45,302 - [test_login05.py - line:53] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzcxMTk2N[64 chars]TY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzcxMTk2NS4xNjAwNTI1OmYzNGY5MzVkZTcwOWMxZmVkODA3NWJjOTgyNTAxOWQ5NDY3OTViYTY='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzcxMTk2N[64 chars]TY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzcxMTk2NS4xNjAwNTI1OmYzNGY5MzVkZTcwOWMxZmVkODA3NWJjOTgyNTAxOWQ5NDY3OTViYTY='}
2021-10-08 16:35:02,891 - [test_business_register03.py - line:59] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-08 16:35:02,891 - [test_business_register03.py - line:60] - ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-08 16:35:03,038 - [test_business_register03.py - line:59] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-08 16:35:03,038 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-08 16:35:03,192 - [test_business_register03.py - line:59] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-08 16:35:03,192 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-08 16:35:07,528 - [test_business_token_goodsInfo03.py - line:69] - ERROR:测试编号5,测试用例标题:测试上一次的token的场景,执行失败,实际结果为:{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone11', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '三星note7', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '华为P40', 'shopPrice': 6000.0, 'promotePrice': 0.0, 'num': 666}, {'goodsName': '华为P50', 'shopPrice': 4500.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米11', 'shopPrice': 4000.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '三星s21', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '贵州茅台', 'shopPrice': 1499.0, 'promotePrice': 0.0, 'num': 0}, {'goodsName': '牛仔短裤', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': '优衣库', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': '小米8', 'shopPrice': 2299.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '三星s7', 'shopPrice': 500.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '华为mate10', 'shopPrice': 800.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '红米10', 'shopPrice': 500.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '羊毛衫', 'shopPrice': 199.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': 'iPhone8', 'shopPrice': 2999.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone5s', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone10', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone20', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhonese', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone6', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone6s', 'shopPrice': 1666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone7', 'shopPrice': 1999.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '卫龙辣条', 'shopPrice': 2.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '牛仔上衣', 'shopPrice': 99.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': '牛仔裤', 'shopPrice': 0.01, 'promotePrice': 0.0, 'num': 50}]}!
2021-10-08 16:35:07,528 - [test_business_token_goodsInfo03.py - line:70] - ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[2015 chars]50}]}
Diff is 4162 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 66, in test_token_goods_info
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[2015 chars]50}]}
Diff is 4162 characters long. Set self.maxDiff to None to see it.
2021-10-08 16:35:08,166 - [test_business_token_goodsInfo03.py - line:69] - ERROR:测试编号9,测试用例标题:测试isOnSale状态不对应的场景,执行失败,实际结果为:{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}]}!
2021-10-08 16:35:08,166 - [test_business_token_goodsInfo03.py - line:70] - ERROR:{'code': 1008, 'msg': '没有符合条件的数据'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[65 chars]00}]}
- {'code': 1008, 'msg': '没有符合条件的数据'}
+ {'code': 1000,
+  'goods_tiems': [{'goodsName': '预留数据',
+                   'num': 1000,
+                   'promotePrice': 0.0,
+                   'shopPrice': 100.0}],
+  'msg': '查询成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 66, in test_token_goods_info
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '没有符合条件的数据'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[65 chars]00}]}
- {'code': 1008, 'msg': '没有符合条件的数据'}
+ {'code': 1000,
+  'goods_tiems': [{'goodsName': '预留数据',
+                   'num': 1000,
+                   'promotePrice': 0.0,
+                   'shopPrice': 100.0}],
+  'msg': '查询成功'}
2021-10-08 16:35:14,687 - [test_business_goods_input03.py - line:53] - ERROR:测试编号21,测试用例标题:测试商品价格输入0.00,执行失败,实际结果为:{'code': 1013, 'msg': '产品名称不能重复'}!
2021-10-08 16:35:14,687 - [test_business_goods_input03.py - line:54] - ERROR:{'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input06\test_business_goods_input03.py", line 45, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

2021-10-08 16:36:42,545 - [test_business_register03.py - line:59] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-08 16:36:42,546 - [test_business_register03.py - line:60] - ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-08 16:36:42,693 - [test_business_register03.py - line:59] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-08 16:36:42,693 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-08 16:36:42,843 - [test_business_register03.py - line:59] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-08 16:36:42,844 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-08 16:36:47,048 - [test_business_token_goodsInfo03.py - line:69] - ERROR:测试编号5,测试用例标题:测试上一次的token的场景,执行失败,实际结果为:{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone11', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '三星note7', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '华为P40', 'shopPrice': 6000.0, 'promotePrice': 0.0, 'num': 666}, {'goodsName': '华为P50', 'shopPrice': 4500.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米11', 'shopPrice': 4000.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '三星s21', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '贵州茅台', 'shopPrice': 1499.0, 'promotePrice': 0.0, 'num': 0}, {'goodsName': '牛仔短裤', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': '优衣库', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': '小米8', 'shopPrice': 2299.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '三星s7', 'shopPrice': 500.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '华为mate10', 'shopPrice': 800.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '红米10', 'shopPrice': 500.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '羊毛衫', 'shopPrice': 199.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': 'iPhone8', 'shopPrice': 2999.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone5s', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone10', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone20', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhonese', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone6', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone6s', 'shopPrice': 1666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone7', 'shopPrice': 1999.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '卫龙辣条', 'shopPrice': 2.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '牛仔上衣', 'shopPrice': 99.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': '牛仔裤', 'shopPrice': 0.01, 'promotePrice': 0.0, 'num': 50}]}!
2021-10-08 16:36:47,048 - [test_business_token_goodsInfo03.py - line:70] - ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[2015 chars]50}]}
Diff is 4162 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 66, in test_token_goods_info
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[2015 chars]50}]}
Diff is 4162 characters long. Set self.maxDiff to None to see it.
2021-10-08 16:36:47,668 - [test_business_token_goodsInfo03.py - line:69] - ERROR:测试编号9,测试用例标题:测试isOnSale状态不对应的场景,执行失败,实际结果为:{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}]}!
2021-10-08 16:36:47,668 - [test_business_token_goodsInfo03.py - line:70] - ERROR:{'code': 1008, 'msg': '没有符合条件的数据'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[65 chars]00}]}
- {'code': 1008, 'msg': '没有符合条件的数据'}
+ {'code': 1000,
+  'goods_tiems': [{'goodsName': '预留数据',
+                   'num': 1000,
+                   'promotePrice': 0.0,
+                   'shopPrice': 100.0}],
+  'msg': '查询成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 66, in test_token_goods_info
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '没有符合条件的数据'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[65 chars]00}]}
- {'code': 1008, 'msg': '没有符合条件的数据'}
+ {'code': 1000,
+  'goods_tiems': [{'goodsName': '预留数据',
+                   'num': 1000,
+                   'promotePrice': 0.0,
+                   'shopPrice': 100.0}],
+  'msg': '查询成功'}
2021-10-08 16:36:54,106 - [test_business_goods_input03.py - line:53] - ERROR:测试编号21,测试用例标题:测试商品价格输入0.00,执行失败,实际结果为:{'code': 1013, 'msg': '产品名称不能重复'}!
2021-10-08 16:36:54,106 - [test_business_goods_input03.py - line:54] - ERROR:{'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input06\test_business_goods_input03.py", line 45, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

2021-10-08 16:37:28,278 - [test_business_register03.py - line:59] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-08 16:37:28,278 - [test_business_register03.py - line:60] - ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-08 16:37:28,440 - [test_business_register03.py - line:59] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-08 16:37:28,440 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-08 16:37:28,590 - [test_business_register03.py - line:59] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-08 16:37:28,591 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-08 16:37:32,987 - [test_business_token_goodsInfo03.py - line:69] - ERROR:测试编号5,测试用例标题:测试上一次的token的场景,执行失败,实际结果为:{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone11', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '三星note7', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '华为P40', 'shopPrice': 6000.0, 'promotePrice': 0.0, 'num': 666}, {'goodsName': '华为P50', 'shopPrice': 4500.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米11', 'shopPrice': 4000.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '三星s21', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '贵州茅台', 'shopPrice': 1499.0, 'promotePrice': 0.0, 'num': 0}, {'goodsName': '牛仔短裤', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': '优衣库', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': '小米8', 'shopPrice': 2299.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '三星s7', 'shopPrice': 500.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '华为mate10', 'shopPrice': 800.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '红米10', 'shopPrice': 500.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '羊毛衫', 'shopPrice': 199.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': 'iPhone8', 'shopPrice': 2999.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone5s', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone10', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone20', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhonese', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone6', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone6s', 'shopPrice': 1666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone7', 'shopPrice': 1999.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '卫龙辣条', 'shopPrice': 2.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '牛仔上衣', 'shopPrice': 99.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': '牛仔裤', 'shopPrice': 0.01, 'promotePrice': 0.0, 'num': 50}]}!
2021-10-08 16:37:32,987 - [test_business_token_goodsInfo03.py - line:70] - ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[2015 chars]50}]}
Diff is 4162 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 66, in test_token_goods_info
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[2015 chars]50}]}
Diff is 4162 characters long. Set self.maxDiff to None to see it.
2021-10-08 16:37:33,674 - [test_business_token_goodsInfo03.py - line:69] - ERROR:测试编号9,测试用例标题:测试isOnSale状态不对应的场景,执行失败,实际结果为:{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}]}!
2021-10-08 16:37:33,674 - [test_business_token_goodsInfo03.py - line:70] - ERROR:{'code': 1008, 'msg': '没有符合条件的数据'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[65 chars]00}]}
- {'code': 1008, 'msg': '没有符合条件的数据'}
+ {'code': 1000,
+  'goods_tiems': [{'goodsName': '预留数据',
+                   'num': 1000,
+                   'promotePrice': 0.0,
+                   'shopPrice': 100.0}],
+  'msg': '查询成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 66, in test_token_goods_info
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '没有符合条件的数据'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[65 chars]00}]}
- {'code': 1008, 'msg': '没有符合条件的数据'}
+ {'code': 1000,
+  'goods_tiems': [{'goodsName': '预留数据',
+                   'num': 1000,
+                   'promotePrice': 0.0,
+                   'shopPrice': 100.0}],
+  'msg': '查询成功'}
2021-10-08 16:37:40,456 - [test_business_goods_input03.py - line:53] - ERROR:测试编号21,测试用例标题:测试商品价格输入0.00,执行失败,实际结果为:{'code': 1013, 'msg': '产品名称不能重复'}!
2021-10-08 16:37:40,456 - [test_business_goods_input03.py - line:54] - ERROR:{'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input06\test_business_goods_input03.py", line 45, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

2021-10-08 16:37:41,844 - [test_login05.py - line:52] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzcxMjI2MS42OTc4MjQyOmJmY2UyYTE4OWIwYWRjZjczNzkxYzQxMDhmMjhhMmY3ZjgyZTE4OTA='}
2021-10-08 16:37:41,844 - [test_login05.py - line:53] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzcxMjI2M[64 chars]TA='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzcxMjI2MS42OTc4MjQyOmJmY2UyYTE4OWIwYWRjZjczNzkxYzQxMDhmMjhhMmY3ZjgyZTE4OTA='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzcxMjI2M[64 chars]TA='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzcxMjI2MS42OTc4MjQyOmJmY2UyYTE4OWIwYWRjZjczNzkxYzQxMDhmMjhhMmY3ZjgyZTE4OTA='}
2021-10-08 16:37:42,160 - [test_login05.py - line:52] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzcxMjI2MS45OTgwMjE6NDkyMmI4YTFhMjEyYjg0YTU2MTg0MTMxMjczYTNiYzdlOGUzYjE3Ng=='}
2021-10-08 16:37:42,160 - [test_login05.py - line:53] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzcxMjI2M[64 chars]g=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzcxMjI2MS45OTgwMjE6NDkyMmI4YTFhMjEyYjg0YTU2MTg0MTMxMjczYTNiYzdlOGUzYjE3Ng=='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzcxMjI2M[64 chars]g=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzcxMjI2MS45OTgwMjE6NDkyMmI4YTFhMjEyYjg0YTU2MTg0MTMxMjczYTNiYzdlOGUzYjE3Ng=='}
2022-02-24 19:44:17,222 - [Ftest_regist.py - line:38] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 19:44:17,222 - [Ftest_regist.py - line:39] - ERROR:{'code': 1003, 'msg': '确认密码不能为空'} != {'code': 1004, 'msg': '两次密码输入不一致'}
- {'code': 1003, 'msg': '确认密码不能为空'}
?             ^          ^^   ^^^

+ {'code': 1004, 'msg': '两次密码输入不一致'}
?             ^          ^^  ++ ^^
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\Ftest_regist.py", line 35, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "C:\Program Files\JetBrains\PyCharm Community Edition 2021.2.1\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files (x86)\新建文件夹\lib\unittest\case.py", line 912, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files (x86)\新建文件夹\lib\unittest\case.py", line 1211, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files (x86)\新建文件夹\lib\unittest\case.py", line 753, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1003, 'msg': '确认密码不能为空'} != {'code': 1004, 'msg': '两次密码输入不一致'}
- {'code': 1003, 'msg': '确认密码不能为空'}
?             ^          ^^   ^^^

+ {'code': 1004, 'msg': '两次密码输入不一致'}
?             ^          ^^  ++ ^^

2022-02-24 19:44:17,707 - [Ftest_regist.py - line:38] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 9999, 'msg': '注册成功'}!
2022-02-24 19:44:17,708 - [Ftest_regist.py - line:39] - ERROR:{'code': 1007, 'msg': '手机号码格式不正确'} != {'code': 9999, 'msg': '注册成功'}
- {'code': 1007, 'msg': '手机号码格式不正确'}
+ {'code': 9999, 'msg': '注册成功'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\Ftest_regist.py", line 35, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "C:\Program Files\JetBrains\PyCharm Community Edition 2021.2.1\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files (x86)\新建文件夹\lib\unittest\case.py", line 912, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files (x86)\新建文件夹\lib\unittest\case.py", line 1211, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files (x86)\新建文件夹\lib\unittest\case.py", line 753, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '手机号码格式不正确'} != {'code': 9999, 'msg': '注册成功'}
- {'code': 1007, 'msg': '手机号码格式不正确'}
+ {'code': 9999, 'msg': '注册成功'}
2022-02-24 19:44:18,004 - [Ftest_regist.py - line:38] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 9999, 'msg': '注册成功'}!
2022-02-24 19:44:18,004 - [Ftest_regist.py - line:39] - ERROR:{'code': 1009, 'msg': '邮箱格式不正确'} != {'code': 9999, 'msg': '注册成功'}
- {'code': 1009, 'msg': '邮箱格式不正确'}
+ {'code': 9999, 'msg': '注册成功'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\Ftest_regist.py", line 35, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "C:\Program Files\JetBrains\PyCharm Community Edition 2021.2.1\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files (x86)\新建文件夹\lib\unittest\case.py", line 912, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files (x86)\新建文件夹\lib\unittest\case.py", line 1211, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files (x86)\新建文件夹\lib\unittest\case.py", line 753, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1009, 'msg': '邮箱格式不正确'} != {'code': 9999, 'msg': '注册成功'}
- {'code': 1009, 'msg': '邮箱格式不正确'}
+ {'code': 9999, 'msg': '注册成功'}
2022-02-24 19:48:13,488 - [test_regist.py - line:37] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 19:48:13,488 - [test_regist.py - line:38] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 19:48:13,923 - [test_regist.py - line:37] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 19:48:13,923 - [test_regist.py - line:38] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 19:48:14,172 - [test_regist.py - line:37] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 19:48:14,172 - [test_regist.py - line:38] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 19:49:03,007 - [test_regist.py - line:37] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 19:49:03,007 - [test_regist.py - line:38] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 19:49:03,514 - [test_regist.py - line:37] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 9999, 'msg': '注册成功'}!
2022-02-24 19:49:03,514 - [test_regist.py - line:38] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 9999, 'msg': '注册成功'}
  Differing items:
  {'code': 1007} != {'code': 9999}
  {'msg': '手机号码格式不正确'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 9999, 'msg': '注册成功'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 9999, 'msg': '注册成功'}
  Differing items:
  {'code': 1007} != {'code': 9999}
  {'msg': '手机号码格式不正确'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 9999, 'msg': '注册成功'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 19:49:03,788 - [test_regist.py - line:37] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 9999, 'msg': '注册成功'}!
2022-02-24 19:49:03,788 - [test_regist.py - line:38] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 9999, 'msg': '注册成功'}
  Differing items:
  {'code': 1009} != {'code': 9999}
  {'msg': '邮箱格式不正确'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 9999, 'msg': '注册成功'}
  + {'code': 1009, 'msg': '邮箱格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 9999, 'msg': '注册成功'}
  Differing items:
  {'code': 1009} != {'code': 9999}
  {'msg': '邮箱格式不正确'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 9999, 'msg': '注册成功'}
  + {'code': 1009, 'msg': '邮箱格式不正确'}
2022-02-24 19:59:30,742 - [test_regist.py - line:37] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 19:59:30,743 - [test_regist.py - line:38] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 19:59:31,205 - [test_regist.py - line:37] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 19:59:31,205 - [test_regist.py - line:38] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 19:59:31,495 - [test_regist.py - line:37] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 19:59:31,495 - [test_regist.py - line:38] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 20:08:21,304 - [test_regist.py - line:37] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 20:08:21,304 - [test_regist.py - line:38] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 20:08:21,752 - [test_regist.py - line:37] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 20:08:21,753 - [test_regist.py - line:38] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 20:08:22,012 - [test_regist.py - line:37] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 20:08:22,012 - [test_regist.py - line:38] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 20:17:15,101 - [test_regist.py - line:37] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 20:17:15,101 - [test_regist.py - line:38] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 20:17:15,538 - [test_regist.py - line:37] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 20:17:15,538 - [test_regist.py - line:38] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 20:17:15,788 - [test_regist.py - line:37] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 20:17:15,789 - [test_regist.py - line:38] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 20:19:29,607 - [test_regist.py - line:37] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 20:19:29,607 - [test_regist.py - line:38] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 20:19:30,048 - [test_regist.py - line:37] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 20:19:30,048 - [test_regist.py - line:38] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 20:19:30,303 - [test_regist.py - line:37] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 20:19:30,304 - [test_regist.py - line:38] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 20:29:38,939 - [test_regist.py - line:37] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 20:29:38,939 - [test_regist.py - line:38] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 20:29:39,406 - [test_regist.py - line:37] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 20:29:39,406 - [test_regist.py - line:38] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 20:29:39,657 - [test_regist.py - line:37] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 20:29:39,657 - [test_regist.py - line:38] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:01:02,817 - [test_regist.py - line:37] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 21:01:02,818 - [test_regist.py - line:38] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:01:03,155 - [test_regist.py - line:37] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:01:03,155 - [test_regist.py - line:38] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 21:01:03,403 - [test_regist.py - line:37] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:01:03,404 - [test_regist.py - line:38] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:02:48,107 - [test_regist.py - line:37] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 21:02:48,107 - [test_regist.py - line:38] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:02:48,565 - [test_regist.py - line:37] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:02:48,565 - [test_regist.py - line:38] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 21:02:48,817 - [test_regist.py - line:37] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:02:48,817 - [test_regist.py - line:38] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:04:40,697 - [test_regist.py - line:37] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 21:04:40,697 - [test_regist.py - line:38] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:04:41,143 - [test_regist.py - line:37] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:04:41,143 - [test_regist.py - line:38] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 21:04:41,384 - [test_regist.py - line:37] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:04:41,384 - [test_regist.py - line:38] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:05:22,919 - [test_regist.py - line:37] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 21:05:22,919 - [test_regist.py - line:38] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:05:23,372 - [test_regist.py - line:37] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:05:23,372 - [test_regist.py - line:38] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 21:05:23,619 - [test_regist.py - line:37] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:05:23,619 - [test_regist.py - line:38] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:06:56,072 - [test_regist.py - line:37] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 21:06:56,072 - [test_regist.py - line:38] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:06:56,523 - [test_regist.py - line:37] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:06:56,523 - [test_regist.py - line:38] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 21:06:56,772 - [test_regist.py - line:37] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:06:56,772 - [test_regist.py - line:38] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:08:44,431 - [test_regist.py - line:37] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 21:08:44,431 - [test_regist.py - line:38] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:08:44,887 - [test_regist.py - line:37] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:08:44,887 - [test_regist.py - line:38] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 21:08:45,138 - [test_regist.py - line:37] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:08:45,138 - [test_regist.py - line:38] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:10:26,544 - [test_regist.py - line:42] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 21:10:26,544 - [test_regist.py - line:43] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:10:27,008 - [test_regist.py - line:42] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:10:27,008 - [test_regist.py - line:43] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 21:10:27,257 - [test_regist.py - line:42] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:10:27,257 - [test_regist.py - line:43] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 16:42:45,266 - [test_regist.py - line:42] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 16:42:45,266 - [test_regist.py - line:43] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 16:42:45,749 - [test_regist.py - line:42] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 16:42:45,749 - [test_regist.py - line:43] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 16:42:45,998 - [test_regist.py - line:42] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 16:42:45,998 - [test_regist.py - line:43] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 16:45:50,735 - [test_regist.py - line:42] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 16:45:50,735 - [test_regist.py - line:43] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 16:45:51,198 - [test_regist.py - line:42] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 16:45:51,199 - [test_regist.py - line:43] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 16:45:51,448 - [test_regist.py - line:42] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 16:45:51,448 - [test_regist.py - line:43] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 16:46:40,863 - [test_regist.py - line:42] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 16:46:40,863 - [test_regist.py - line:43] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 16:46:41,323 - [test_regist.py - line:42] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 16:46:41,323 - [test_regist.py - line:43] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 16:46:41,572 - [test_regist.py - line:42] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 16:46:41,572 - [test_regist.py - line:43] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 16:50:21,641 - [test_regist.py - line:42] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 16:50:21,641 - [test_regist.py - line:43] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 16:50:22,102 - [test_regist.py - line:42] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 16:50:22,102 - [test_regist.py - line:43] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 16:50:22,354 - [test_regist.py - line:42] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 16:50:22,354 - [test_regist.py - line:43] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 16:50:54,901 - [test_regist.py - line:42] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 16:50:54,901 - [test_regist.py - line:43] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 16:50:55,378 - [test_regist.py - line:42] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 16:50:55,378 - [test_regist.py - line:43] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 16:50:55,656 - [test_regist.py - line:42] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 16:50:55,656 - [test_regist.py - line:43] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:01:00,468 - [test_regist.py - line:43] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 17:01:00,468 - [test_regist.py - line:44] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:01:00,929 - [test_regist.py - line:43] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:01:00,929 - [test_regist.py - line:44] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 17:01:01,182 - [test_regist.py - line:43] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:01:01,182 - [test_regist.py - line:44] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:04:55,297 - [test_regist.py - line:43] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 17:04:55,297 - [test_regist.py - line:44] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:04:55,633 - [test_regist.py - line:43] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:04:55,633 - [test_regist.py - line:44] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 17:04:55,898 - [test_regist.py - line:43] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:04:55,898 - [test_regist.py - line:44] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:05:50,385 - [test_regist.py - line:43] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 17:05:50,385 - [test_regist.py - line:44] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:05:50,874 - [test_regist.py - line:43] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:05:50,874 - [test_regist.py - line:44] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 17:05:51,144 - [test_regist.py - line:43] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:05:51,144 - [test_regist.py - line:44] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:08:48,702 - [test_regist.py - line:43] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 17:08:48,702 - [test_regist.py - line:44] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:08:49,055 - [test_regist.py - line:43] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:08:49,055 - [test_regist.py - line:44] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 17:08:49,311 - [test_regist.py - line:43] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:08:49,311 - [test_regist.py - line:44] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:09:43,609 - [test_regist.py - line:43] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 17:09:43,609 - [test_regist.py - line:44] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:09:43,962 - [test_regist.py - line:43] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:09:43,962 - [test_regist.py - line:44] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 17:09:44,214 - [test_regist.py - line:43] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:09:44,214 - [test_regist.py - line:44] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:13:54,570 - [test_regist.py - line:43] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 17:13:54,570 - [test_regist.py - line:44] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:13:55,056 - [test_regist.py - line:43] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:13:55,056 - [test_regist.py - line:44] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 17:13:55,311 - [test_regist.py - line:43] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:13:55,312 - [test_regist.py - line:44] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:16:22,393 - [test_regist.py - line:46] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 17:16:22,393 - [test_regist.py - line:47] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 43, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:16:22,891 - [test_regist.py - line:46] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:16:22,892 - [test_regist.py - line:47] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 43, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 17:16:23,159 - [test_regist.py - line:46] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:16:23,159 - [test_regist.py - line:47] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 43, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:19:25,529 - [test_regist.py - line:46] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 17:19:25,529 - [test_regist.py - line:47] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 43, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:19:26,004 - [test_regist.py - line:46] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:19:26,004 - [test_regist.py - line:47] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 43, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 17:19:26,266 - [test_regist.py - line:46] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:19:26,266 - [test_regist.py - line:47] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 43, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 18:52:19,957 - [test_regist.py - line:46] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 18:52:19,958 - [test_regist.py - line:47] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 43, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 18:52:20,387 - [test_regist.py - line:46] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 18:52:20,387 - [test_regist.py - line:47] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 43, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 18:52:20,630 - [test_regist.py - line:46] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 18:52:20,631 - [test_regist.py - line:47] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 43, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-01 16:35:40,111 - [test_login03.py - line:55] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1Mzc0MC4wMzI3Mjg3OmU3NTFiMzdhM2RmYzNlNDU2ZDU0NTYzMzU2ODk0ODllNTlmMDIxZjQ='}
2022-03-01 16:35:40,112 - [test_login03.py - line:56] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NTlmMDIxZjQ='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1Mzc0MC4wMzI3Mjg3OmU3NTFiMzdhM2RmYzNlNDU2ZDU0NTYzMzU2ODk0ODllNTlmMDIxZjQ='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 52, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NTlmMDIxZjQ='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1Mzc0MC4wMzI3Mjg3OmU3NTFiMzdhM2RmYzNlNDU2ZDU0NTYzMzU2ODk0ODllNTlmMDIxZjQ='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 16:35:40,394 - [test_login03.py - line:55] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1Mzc0MC4zMTU5NzQ6MTU2NTk1MWVhODgzOWViMDc5Y2Q1NmQ3NGRkMmExYTk3NWVmYmJmOA=='}
2022-03-01 16:35:40,394 - [test_login03.py - line:56] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NWVmYmJmOA=='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1Mzc0MC4zMTU5NzQ6MTU2NTk1MWVhODgzOWViMDc5Y2Q1NmQ3NGRkMmExYTk3NWVmYmJmOA=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 52, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NWVmYmJmOA=='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1Mzc0MC4zMTU5NzQ6MTU2NTk1MWVhODgzOWViMDc5Y2Q1NmQ3NGRkMmExYTk3NWVmYmJmOA=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 16:39:47,452 - [test_login03.py - line:55] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1Mzk4Ny4zNzMwNTk1Ojg0Zjc4ODBkM2E0ODI5YjA1NTgzZTk4ZGQwZmZiYjdkYmM4NGYwYWU='}
2022-03-01 16:39:47,452 - [test_login03.py - line:56] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YmM4NGYwYWU='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1Mzk4Ny4zNzMwNTk1Ojg0Zjc4ODBkM2E0ODI5YjA1NTgzZTk4ZGQwZmZiYjdkYmM4NGYwYWU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 52, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YmM4NGYwYWU='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1Mzk4Ny4zNzMwNTk1Ojg0Zjc4ODBkM2E0ODI5YjA1NTgzZTk4ZGQwZmZiYjdkYmM4NGYwYWU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 16:39:47,814 - [test_login03.py - line:55] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1Mzk4Ny43MzUwOTE6MzU3OGQ0ZWE2MzNhMmVmYTdjNjg3MjcxODdjYmY1ZTVlMzhhYTQ1MA=='}
2022-03-01 16:39:47,814 - [test_login03.py - line:56] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MzhhYTQ1MA=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1Mzk4Ny43MzUwOTE6MzU3OGQ0ZWE2MzNhMmVmYTdjNjg3MjcxODdjYmY1ZTVlMzhhYTQ1MA=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 52, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MzhhYTQ1MA=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1Mzk4Ny43MzUwOTE6MzU3OGQ0ZWE2MzNhMmVmYTdjNjg3MjcxODdjYmY1ZTVlMzhhYTQ1MA=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 16:40:23,147 - [test_login03.py - line:55] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NDAyMy4wNjY1NzE1OmZkZjU3MDBkMDIzY2JiZDkyY2FlZmQ3NTMwYWM3MWZkMTBlOTQzMzQ='}
2022-03-01 16:40:23,147 - [test_login03.py - line:56] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MTBlOTQzMzQ='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NDAyMy4wNjY1NzE1OmZkZjU3MDBkMDIzY2JiZDkyY2FlZmQ3NTMwYWM3MWZkMTBlOTQzMzQ='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 52, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MTBlOTQzMzQ='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NDAyMy4wNjY1NzE1OmZkZjU3MDBkMDIzY2JiZDkyY2FlZmQ3NTMwYWM3MWZkMTBlOTQzMzQ='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 16:40:23,331 - [test_login03.py - line:55] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NDAyMy4yNTAwODo1N2Q4ZmQ2Y2Q2ZTgwNzA0ZGRjYWYwMGZiNDlmN2NlZTcwZWY1Mjdi'}
2022-03-01 16:40:23,331 - [test_login03.py - line:56] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTcwZWY1Mjdi'}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NDAyMy4yNTAwODo1N2Q4ZmQ2Y2Q2ZTgwNzA0ZGRjYWYwMGZiNDlmN2NlZTcwZWY1Mjdi'}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 52, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTcwZWY1Mjdi'}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NDAyMy4yNTAwODo1N2Q4ZmQ2Y2Q2ZTgwNzA0ZGRjYWYwMGZiNDlmN2NlZTcwZWY1Mjdi'}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 16:49:31,637 - [test_login03.py - line:64] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NDU3MS41NTU2NjcyOjdmMWI5Y2Y1YjRiZDg4MmM1MjEyYjkwYmM4NWFmYzJkODYxNTJiODE='}
2022-03-01 16:49:31,637 - [test_login03.py - line:65] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ODYxNTJiODE='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NDU3MS41NTU2NjcyOjdmMWI5Y2Y1YjRiZDg4MmM1MjEyYjkwYmM4NWFmYzJkODYxNTJiODE='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 61, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ODYxNTJiODE='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NDU3MS41NTU2NjcyOjdmMWI5Y2Y1YjRiZDg4MmM1MjEyYjkwYmM4NWFmYzJkODYxNTJiODE='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 16:49:31,821 - [test_login03.py - line:64] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NDU3MS43NDIxNjc3OjliN2MxN2U3MDFkYTczNjRkMjc1MTA4MGViODQ4N2I1NDVmNGQxZDU='}
2022-03-01 16:49:31,821 - [test_login03.py - line:65] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NDVmNGQxZDU='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NDU3MS43NDIxNjc3OjliN2MxN2U3MDFkYTczNjRkMjc1MTA4MGViODQ4N2I1NDVmNGQxZDU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 61, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NDVmNGQxZDU='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NDU3MS43NDIxNjc3OjliN2MxN2U3MDFkYTczNjRkMjc1MTA4MGViODQ4N2I1NDVmNGQxZDU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 16:51:00,620 - [test_login03.py - line:64] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NDY2MC41NDI2MDU0OmEzODVmNzUwZDYzNjU3ODRhMDZkNmI2NTdiNDIyZGRmZGM1YzkxODA='}
2022-03-01 16:51:00,620 - [test_login03.py - line:65] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZGM1YzkxODA='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NDY2MC41NDI2MDU0OmEzODVmNzUwZDYzNjU3ODRhMDZkNmI2NTdiNDIyZGRmZGM1YzkxODA='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 61, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZGM1YzkxODA='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NDY2MC41NDI2MDU0OmEzODVmNzUwZDYzNjU3ODRhMDZkNmI2NTdiNDIyZGRmZGM1YzkxODA='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 16:51:00,931 - [test_login03.py - line:64] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NDY2MC44NTM3NzM6ODEwOWE4MzUxNTRhZWZmNDNmMjBkN2FiNTNlM2ZhYTc5NTFmMzUyNQ=='}
2022-03-01 16:51:00,931 - [test_login03.py - line:65] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NTFmMzUyNQ=='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NDY2MC44NTM3NzM6ODEwOWE4MzUxNTRhZWZmNDNmMjBkN2FiNTNlM2ZhYTc5NTFmMzUyNQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 61, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NTFmMzUyNQ=='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NDY2MC44NTM3NzM6ODEwOWE4MzUxNTRhZWZmNDNmMjBkN2FiNTNlM2ZhYTc5NTFmMzUyNQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:06:42,871 - [test_login04.py - line:60] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTYwMi43Nzc2ODQ1OjdjZjZjNzZjNzlhZmUzYTE1NjE4N2ZiZTEyMWY5YjRjNWQxM2ZjYzY='}
2022-03-01 17:06:42,871 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NWQxM2ZjYzY='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTYwMi43Nzc2ODQ1OjdjZjZjNzZjNzlhZmUzYTE1NjE4N2ZiZTEyMWY5YjRjNWQxM2ZjYzY='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NWQxM2ZjYzY='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTYwMi43Nzc2ODQ1OjdjZjZjNzZjNzlhZmUzYTE1NjE4N2ZiZTEyMWY5YjRjNWQxM2ZjYzY='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:06:43,052 - [test_login04.py - line:60] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTYwMi45NzAxNjk6NThiNDRjOGU3MmMyNGJlMWUzYzI5MzUxMDliYzFiNjBiYjRhNzdhZQ=='}
2022-03-01 17:06:43,052 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YjRhNzdhZQ=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTYwMi45NzAxNjk6NThiNDRjOGU3MmMyNGJlMWUzYzI5MzUxMDliYzFiNjBiYjRhNzdhZQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YjRhNzdhZQ=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTYwMi45NzAxNjk6NThiNDRjOGU3MmMyNGJlMWUzYzI5MzUxMDliYzFiNjBiYjRhNzdhZQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:07:01,432 - [test_login04.py - line:60] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTYyMS4zNDUwMTI6MDY1YmJhNzhlMDM1N2YzMThkMzliODJiNTZjMWY3NzdlN2ZmZmI2MQ=='}
2022-03-01 17:07:01,433 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...N2ZmZmI2MQ=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTYyMS4zNDUwMTI6MDY1YmJhNzhlMDM1N2YzMThkMzliODJiNTZjMWY3NzdlN2ZmZmI2MQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...N2ZmZmI2MQ=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTYyMS4zNDUwMTI6MDY1YmJhNzhlMDM1N2YzMThkMzliODJiNTZjMWY3NzdlN2ZmZmI2MQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:07:01,732 - [test_login04.py - line:60] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTYyMS42NTYxNzk0OmM5YmIzM2VhYzc0YjA1ODVhNWViMmY4MmM4ZmViZjg2MTg5ZWM1ZTg='}
2022-03-01 17:07:01,732 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MTg5ZWM1ZTg='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTYyMS42NTYxNzk0OmM5YmIzM2VhYzc0YjA1ODVhNWViMmY4MmM4ZmViZjg2MTg5ZWM1ZTg='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MTg5ZWM1ZTg='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTYyMS42NTYxNzk0OmM5YmIzM2VhYzc0YjA1ODVhNWViMmY4MmM4ZmViZjg2MTg5ZWM1ZTg='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:08:57,290 - [test_login04.py - line:60] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTczNy4yMDg2NTI3OmRjZTQzMTIxZjFhNGZlOGRiZDIxY2Y2OWNiMGRiNzE4YWNmNDBjNmI='}
2022-03-01 17:08:57,290 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YWNmNDBjNmI='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTczNy4yMDg2NTI3OmRjZTQzMTIxZjFhNGZlOGRiZDIxY2Y2OWNiMGRiNzE4YWNmNDBjNmI='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YWNmNDBjNmI='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTczNy4yMDg2NTI3OmRjZTQzMTIxZjFhNGZlOGRiZDIxY2Y2OWNiMGRiNzE4YWNmNDBjNmI='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:08:57,654 - [test_login04.py - line:60] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTczNy41NzI2ODpjOWJjMDNhMGRjMzNmY2ZjMzk5ZDlkMWQ1NGEyM2UwZjJmYzkzMjg1'}
2022-03-01 17:08:57,654 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZjJmYzkzMjg1'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTczNy41NzI2ODpjOWJjMDNhMGRjMzNmY2ZjMzk5ZDlkMWQ1NGEyM2UwZjJmYzkzMjg1'}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZjJmYzkzMjg1'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTczNy41NzI2ODpjOWJjMDNhMGRjMzNmY2ZjMzk5ZDlkMWQ1NGEyM2UwZjJmYzkzMjg1'}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:11:06,701 - [test_login04.py - line:60] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTg2Ni41OTQ3MDEzOjY0ODdmZjVmZmJiZDU2ZmMxNGFjNDI4OGQ1ZDY4NDkzOTQzMjVhZDU='}
2022-03-01 17:11:06,702 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...OTQzMjVhZDU='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTg2Ni41OTQ3MDEzOjY0ODdmZjVmZmJiZDU2ZmMxNGFjNDI4OGQ1ZDY4NDkzOTQzMjVhZDU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...OTQzMjVhZDU='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTg2Ni41OTQ3MDEzOjY0ODdmZjVmZmJiZDU2ZmMxNGFjNDI4OGQ1ZDY4NDkzOTQzMjVhZDU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:11:07,054 - [test_login04.py - line:60] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTg2Ni45NzQ2ODU6OTNjZjYyNTFjMDFiNGMwYzMxMWUzYjk3ODM3M2U3ZmVhMzk0ODYzNQ=='}
2022-03-01 17:11:07,054 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...Mzk0ODYzNQ=='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTg2Ni45NzQ2ODU6OTNjZjYyNTFjMDFiNGMwYzMxMWUzYjk3ODM3M2U3ZmVhMzk0ODYzNQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...Mzk0ODYzNQ=='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTg2Ni45NzQ2ODU6OTNjZjYyNTFjMDFiNGMwYzMxMWUzYjk3ODM3M2U3ZmVhMzk0ODYzNQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:11:29,454 - [test_login04.py - line:60] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTg4OS4zNzA3NzAyOmI1MWEwYmRjMjgwZWQzOWM0YjU4MzEyZGMwZjJiMjhlNGZmMWU3ZDk='}
2022-03-01 17:11:29,454 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NGZmMWU3ZDk='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTg4OS4zNzA3NzAyOmI1MWEwYmRjMjgwZWQzOWM0YjU4MzEyZGMwZjJiMjhlNGZmMWU3ZDk='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NGZmMWU3ZDk='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTg4OS4zNzA3NzAyOmI1MWEwYmRjMjgwZWQzOWM0YjU4MzEyZGMwZjJiMjhlNGZmMWU3ZDk='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:11:29,818 - [test_login04.py - line:60] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTg4OS43NDE3NzcyOmNkZjZmOWIwMDQyNzI4YTJiN2EwNjIwYTNlYTEyMTExYTMxYWJkYmM='}
2022-03-01 17:11:29,818 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YTMxYWJkYmM='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTg4OS43NDE3NzcyOmNkZjZmOWIwMDQyNzI4YTJiN2EwNjIwYTNlYTEyMTExYTMxYWJkYmM='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YTMxYWJkYmM='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTg4OS43NDE3NzcyOmNkZjZmOWIwMDQyNzI4YTJiN2EwNjIwYTNlYTEyMTExYTMxYWJkYmM='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:12:21,129 - [test_login04.py - line:60] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTk0MS4wNTE1MzY2OmMzYjgwZDQ5YmY5OWY0NWVlZTliYWRmZDU3ODkxMDBkM2M0ZTFiNDM='}
2022-03-01 17:12:21,129 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...M2M0ZTFiNDM='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTk0MS4wNTE1MzY2OmMzYjgwZDQ5YmY5OWY0NWVlZTliYWRmZDU3ODkxMDBkM2M0ZTFiNDM='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...M2M0ZTFiNDM='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTk0MS4wNTE1MzY2OmMzYjgwZDQ5YmY5OWY0NWVlZTliYWRmZDU3ODkxMDBkM2M0ZTFiNDM='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:12:21,305 - [test_login04.py - line:60] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTk0MS4yMjMwNzgzOjFmN2ZhNDk1NmM2ODA1NzczZTdmNjNlNWRmZGVmZTM3Njc1MzRhMDg='}
2022-03-01 17:12:21,305 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...Njc1MzRhMDg='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTk0MS4yMjMwNzgzOjFmN2ZhNDk1NmM2ODA1NzczZTdmNjNlNWRmZGVmZTM3Njc1MzRhMDg='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...Njc1MzRhMDg='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTk0MS4yMjMwNzgzOjFmN2ZhNDk1NmM2ODA1NzczZTdmNjNlNWRmZGVmZTM3Njc1MzRhMDg='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:12:29,064 - [test_login04.py - line:60] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTk0OC45ODUzMTI6OTQyOGIzYzIyMTI4MjFlYzQwNDYxMTE3ZDA4NDI4ZDdlNjY2OWUxYg=='}
2022-03-01 17:12:29,065 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NjY2OWUxYg=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTk0OC45ODUzMTI6OTQyOGIzYzIyMTI4MjFlYzQwNDYxMTE3ZDA4NDI4ZDdlNjY2OWUxYg=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NjY2OWUxYg=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTk0OC45ODUzMTI6OTQyOGIzYzIyMTI4MjFlYzQwNDYxMTE3ZDA4NDI4ZDdlNjY2OWUxYg=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:12:29,361 - [test_login04.py - line:60] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTk0OS4yNzg1Mjc1Ojc4MzZhOTQ2MzgwM2U0NTFmNWI1NTY2MDFiZjg5YzFhZjViNzA4M2I='}
2022-03-01 17:12:29,361 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZjViNzA4M2I='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTk0OS4yNzg1Mjc1Ojc4MzZhOTQ2MzgwM2U0NTFmNWI1NTY2MDFiZjg5YzFhZjViNzA4M2I='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZjViNzA4M2I='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTk0OS4yNzg1Mjc1Ojc4MzZhOTQ2MzgwM2U0NTFmNWI1NTY2MDFiZjg5YzFhZjViNzA4M2I='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:24:09,940 - [test_login05.py - line:60] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NjY0OS44NDk1MDA0OmRlMDRhODMxMWI3NmM3ZjVmN2UzMjZkMDNjYmQ0MDMzN2NhZDQwYWE='}
2022-03-01 17:24:09,940 - [test_login05.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...N2NhZDQwYWE='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NjY0OS44NDk1MDA0OmRlMDRhODMxMWI3NmM3ZjVmN2UzMjZkMDNjYmQ0MDMzN2NhZDQwYWE='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...N2NhZDQwYWE='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NjY0OS44NDk1MDA0OmRlMDRhODMxMWI3NmM3ZjVmN2UzMjZkMDNjYmQ0MDMzN2NhZDQwYWE='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:24:10,116 - [test_login05.py - line:60] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NjY1MC4wMzg5OTI2OjFkNTEzMWU0NjUwOGEyNjMzNDMxN2JkZjRmMjE1YTk2NmM4NmNjZWY='}
2022-03-01 17:24:10,116 - [test_login05.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NmM4NmNjZWY='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NjY1MC4wMzg5OTI2OjFkNTEzMWU0NjUwOGEyNjMzNDMxN2JkZjRmMjE1YTk2NmM4NmNjZWY='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NmM4NmNjZWY='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NjY1MC4wMzg5OTI2OjFkNTEzMWU0NjUwOGEyNjMzNDMxN2JkZjRmMjE1YTk2NmM4NmNjZWY='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:24:33,047 - [test_login05.py - line:55] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NjY3Mi45NjI2Njc6OWMyOGE4NzgzMmRkMDBiZDg2MThiMDI4OGRiZTk2MmQwYTM3NGIxYg=='}
2022-03-01 17:24:33,048 - [test_login05.py - line:56] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YTM3NGIxYg=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NjY3Mi45NjI2Njc6OWMyOGE4NzgzMmRkMDBiZDg2MThiMDI4OGRiZTk2MmQwYTM3NGIxYg=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 52, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YTM3NGIxYg=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NjY3Mi45NjI2Njc6OWMyOGE4NzgzMmRkMDBiZDg2MThiMDI4OGRiZTk2MmQwYTM3NGIxYg=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:24:33,217 - [test_login05.py - line:55] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NjY3My4xNDIxODY6YzM0ZWM2NjhkYjY3NDYxYTZhNGFhMzFmN2M5YzNmNDFhZWJhMmQxYQ=='}
2022-03-01 17:24:33,218 - [test_login05.py - line:56] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZWJhMmQxYQ=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NjY3My4xNDIxODY6YzM0ZWM2NjhkYjY3NDYxYTZhNGFhMzFmN2M5YzNmNDFhZWJhMmQxYQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 52, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZWJhMmQxYQ=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NjY3My4xNDIxODY6YzM0ZWM2NjhkYjY3NDYxYTZhNGFhMzFmN2M5YzNmNDFhZWJhMmQxYQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:30:19,429 - [test_login05.py - line:62] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NzAxOS4zNTE5OTI0OmFiMDczZjM0Nzc2OTgxZjViOTVmNGQ4NjNmYWNjMDA4MWVmYjIzMGY='}
2022-03-01 17:30:19,429 - [test_login05.py - line:63] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MWVmYjIzMGY='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzAxOS4zNTE5OTI0OmFiMDczZjM0Nzc2OTgxZjViOTVmNGQ4NjNmYWNjMDA4MWVmYjIzMGY='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 59, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MWVmYjIzMGY='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzAxOS4zNTE5OTI0OmFiMDczZjM0Nzc2OTgxZjViOTVmNGQ4NjNmYWNjMDA4MWVmYjIzMGY='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:30:19,602 - [test_login05.py - line:62] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NzAxOS41MjU1Mjc3OjVmYjA3YjcwNDhiZmZmYzRjY2Y0NjkwZmNkNWZjZjZlYzJjNGMzMWQ='}
2022-03-01 17:30:19,603 - [test_login05.py - line:63] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YzJjNGMzMWQ='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzAxOS41MjU1Mjc3OjVmYjA3YjcwNDhiZmZmYzRjY2Y0NjkwZmNkNWZjZjZlYzJjNGMzMWQ='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 59, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YzJjNGMzMWQ='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzAxOS41MjU1Mjc3OjVmYjA3YjcwNDhiZmZmYzRjY2Y0NjkwZmNkNWZjZjZlYzJjNGMzMWQ='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:30:31,612 - [test_login05.py - line:62] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NzAzMS41MTk0NDE2OjJmZmI0ZGYxZDc1MjY5ZWRjNzlkNGZlZDQzM2IyMWNmOTFmNGM2ZTk='}
2022-03-01 17:30:31,612 - [test_login05.py - line:63] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...OTFmNGM2ZTk='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzAzMS41MTk0NDE2OjJmZmI0ZGYxZDc1MjY5ZWRjNzlkNGZlZDQzM2IyMWNmOTFmNGM2ZTk='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 59, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...OTFmNGM2ZTk='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzAzMS41MTk0NDE2OjJmZmI0ZGYxZDc1MjY5ZWRjNzlkNGZlZDQzM2IyMWNmOTFmNGM2ZTk='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:30:56,584 - [test_login05.py - line:62] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NzA1Ni41MDA4ODA3OjZlOTEyZWQwYmZlNDcxYTEwMjQwZTU5OTI2NjEwMWFiNjY0OTRkZmE='}
2022-03-01 17:30:56,584 - [test_login05.py - line:63] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NjY0OTRkZmE='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzA1Ni41MDA4ODA3OjZlOTEyZWQwYmZlNDcxYTEwMjQwZTU5OTI2NjEwMWFiNjY0OTRkZmE='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 59, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NjY0OTRkZmE='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzA1Ni41MDA4ODA3OjZlOTEyZWQwYmZlNDcxYTEwMjQwZTU5OTI2NjEwMWFiNjY0OTRkZmE='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:32:01,524 - [test_login05.py - line:62] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NzEyMS40NDYxMzY1OjZlYTUzM2MyMWQ4MWIwNzM1NzYwYjFiODNmY2E4OGU0MjEzMmExZjk='}
2022-03-01 17:32:01,524 - [test_login05.py - line:63] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MjEzMmExZjk='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzEyMS40NDYxMzY1OjZlYTUzM2MyMWQ4MWIwNzM1NzYwYjFiODNmY2E4OGU0MjEzMmExZjk='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 59, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MjEzMmExZjk='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzEyMS40NDYxMzY1OjZlYTUzM2MyMWQ4MWIwNzM1NzYwYjFiODNmY2E4OGU0MjEzMmExZjk='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:37:19,316 - [test_login05.py - line:64] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NzQzOS4yMzk5NjI6ODlmZmU0M2JmNzM5ZTViYjJlM2YxNzYwYmJiZWM3NzgxYWQyZGY0Yw=='}
2022-03-01 17:37:19,316 - [test_login05.py - line:65] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YWQyZGY0Yw=='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzQzOS4yMzk5NjI6ODlmZmU0M2JmNzM5ZTViYjJlM2YxNzYwYmJiZWM3NzgxYWQyZGY0Yw=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 61, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YWQyZGY0Yw=='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzQzOS4yMzk5NjI6ODlmZmU0M2JmNzM5ZTViYjJlM2YxNzYwYmJiZWM3NzgxYWQyZGY0Yw=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:37:19,489 - [test_login05.py - line:64] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NzQzOS40MDk1MDkyOmU3ODAwNjE3M2I1NDQzODIwYzcwZTZhMzcyYTExMGM5YTBhMzJlNDM='}
2022-03-01 17:37:19,489 - [test_login05.py - line:65] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YTBhMzJlNDM='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzQzOS40MDk1MDkyOmU3ODAwNjE3M2I1NDQzODIwYzcwZTZhMzcyYTExMGM5YTBhMzJlNDM='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 61, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YTBhMzJlNDM='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzQzOS40MDk1MDkyOmU3ODAwNjE3M2I1NDQzODIwYzcwZTZhMzcyYTExMGM5YTBhMzJlNDM='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:37:27,318 - [test_login05.py - line:64] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NzQ0Ny4yMzU1NzE5Ojc1ZTcxYWVmNGRmOTkyYmRmODcxN2NiNjBhMTNmZGYwYjAzYWFmMjk='}
2022-03-01 17:37:27,319 - [test_login05.py - line:65] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YjAzYWFmMjk='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzQ0Ny4yMzU1NzE5Ojc1ZTcxYWVmNGRmOTkyYmRmODcxN2NiNjBhMTNmZGYwYjAzYWFmMjk='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 61, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YjAzYWFmMjk='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzQ0Ny4yMzU1NzE5Ojc1ZTcxYWVmNGRmOTkyYmRmODcxN2NiNjBhMTNmZGYwYjAzYWFmMjk='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:37:27,603 - [test_login05.py - line:64] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NzQ0Ny41MjU3OTU3OmM0ZGFlNTI5ODMxNzMyMTZiZjE0MmFhMzQ0Mzc5OTJlNTM4MzAwMzM='}
2022-03-01 17:37:27,603 - [test_login05.py - line:65] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NTM4MzAwMzM='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzQ0Ny41MjU3OTU3OmM0ZGFlNTI5ODMxNzMyMTZiZjE0MmFhMzQ0Mzc5OTJlNTM4MzAwMzM='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 61, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NTM4MzAwMzM='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzQ0Ny41MjU3OTU3OmM0ZGFlNTI5ODMxNzMyMTZiZjE0MmFhMzQ0Mzc5OTJlNTM4MzAwMzM='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:39:27,452 - [test_login05.py - line:66] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NzU2Ny4zNzUxNzAyOmZmMjYyYTMyOWVjZjEzZjM1YjhkOGVlYjQ2ODNhMTc2MTFlNmExNmE='}
2022-03-01 17:39:27,452 - [test_login05.py - line:67] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MTFlNmExNmE='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzU2Ny4zNzUxNzAyOmZmMjYyYTMyOWVjZjEzZjM1YjhkOGVlYjQ2ODNhMTc2MTFlNmExNmE='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 63, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MTFlNmExNmE='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzU2Ny4zNzUxNzAyOmZmMjYyYTMyOWVjZjEzZjM1YjhkOGVlYjQ2ODNhMTc2MTFlNmExNmE='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:39:47,575 - [test_login05.py - line:66] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NzU4Ny40OTAzNTc6ZjJiMTc3NTI3YjI2NDBhMjU2MWQwMzUzYWM4ZmQxOTM2Y2I4MjljMQ=='}
2022-03-01 17:39:47,575 - [test_login05.py - line:67] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...Y2I4MjljMQ=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzU4Ny40OTAzNTc6ZjJiMTc3NTI3YjI2NDBhMjU2MWQwMzUzYWM4ZmQxOTM2Y2I4MjljMQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 63, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...Y2I4MjljMQ=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzU4Ny40OTAzNTc6ZjJiMTc3NTI3YjI2NDBhMjU2MWQwMzUzYWM4ZmQxOTM2Y2I4MjljMQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:39:47,753 - [test_login05.py - line:66] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NzU4Ny42NzM4NjYzOjkyMjdiYjU3ZTE1ZmEzZGUxMmVkYTM1YWQzZDlkMzZhODE0OGYxNmQ='}
2022-03-01 17:39:47,753 - [test_login05.py - line:67] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ODE0OGYxNmQ='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzU4Ny42NzM4NjYzOjkyMjdiYjU3ZTE1ZmEzZGUxMmVkYTM1YWQzZDlkMzZhODE0OGYxNmQ='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 63, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ODE0OGYxNmQ='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzU4Ny42NzM4NjYzOjkyMjdiYjU3ZTE1ZmEzZGUxMmVkYTM1YWQzZDlkMzZhODE0OGYxNmQ='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 14:58:42,322 - [test_login05.py - line:66] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMyMDcyMi4yMjY0MTk3OjgzZDIwNTQ0M2UxMDgzMjk1NTliOWQzYjBhMTUyMzJiNTI1NmY0MTA='}
2022-03-03 14:58:42,322 - [test_login05.py - line:67] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NTI1NmY0MTA='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyMi4yMjY0MTk3OjgzZDIwNTQ0M2UxMDgzMjk1NTliOWQzYjBhMTUyMzJiNTI1NmY0MTA='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 63, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NTI1NmY0MTA='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyMi4yMjY0MTk3OjgzZDIwNTQ0M2UxMDgzMjk1NTliOWQzYjBhMTUyMzJiNTI1NmY0MTA='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 14:58:42,707 - [test_login05.py - line:66] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMyMDcyMi42MjUzNTI5OjYzMDUzYmJiMmE2YmRiYWE2Nzg5MzUyYmNiMmU1ZGQ0MTVmZjc2ZDU='}
2022-03-03 14:58:42,707 - [test_login05.py - line:67] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MTVmZjc2ZDU='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyMi42MjUzNTI5OjYzMDUzYmJiMmE2YmRiYWE2Nzg5MzUyYmNiMmU1ZGQ0MTVmZjc2ZDU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 63, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MTVmZjc2ZDU='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyMi42MjUzNTI5OjYzMDUzYmJiMmE2YmRiYWE2Nzg5MzUyYmNiMmU1ZGQ0MTVmZjc2ZDU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 14:58:43,728 - [test_login03.py - line:64] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMyMDcyMy42MzY2NDc3OmUzNzBiMzQzYWM0OTI1MGJlNWI4OGUyZjA0YWYwZWZjMDMwN2E2NmU='}
2022-03-03 14:58:43,729 - [test_login03.py - line:65] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MDMwN2E2NmU='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyMy42MzY2NDc3OmUzNzBiMzQzYWM0OTI1MGJlNWI4OGUyZjA0YWYwZWZjMDMwN2E2NmU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 61, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MDMwN2E2NmU='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyMy42MzY2NDc3OmUzNzBiMzQzYWM0OTI1MGJlNWI4OGUyZjA0YWYwZWZjMDMwN2E2NmU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 14:58:43,935 - [test_login03.py - line:64] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMyMDcyMy44NDcwODQ6ZWYzZDliMTY5YjgxOTM1ZTMwYzlhMTY1NDViNTBmYzIxNTMyMWQ5MQ=='}
2022-03-03 14:58:43,936 - [test_login03.py - line:65] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NTMyMWQ5MQ=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyMy44NDcwODQ6ZWYzZDliMTY5YjgxOTM1ZTMwYzlhMTY1NDViNTBmYzIxNTMyMWQ5MQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 61, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NTMyMWQ5MQ=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyMy44NDcwODQ6ZWYzZDliMTY5YjgxOTM1ZTMwYzlhMTY1NDViNTBmYzIxNTMyMWQ5MQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 14:58:44,820 - [test_login04.py - line:60] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMyMDcyNC43NDM2ODU1OmVmNGRlMWFiOTUzYzE3MzY1NjhiYjlhYzdiMzU0NzNlYWNlN2ExM2M='}
2022-03-03 14:58:44,821 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YWNlN2ExM2M='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyNC43NDM2ODU1OmVmNGRlMWFiOTUzYzE3MzY1NjhiYjlhYzdiMzU0NzNlYWNlN2ExM2M='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YWNlN2ExM2M='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyNC43NDM2ODU1OmVmNGRlMWFiOTUzYzE3MzY1NjhiYjlhYzdiMzU0NzNlYWNlN2ExM2M='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 14:58:45,002 - [test_login04.py - line:60] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMyMDcyNC45MjYxOTczOjc1YTNjMDhiNGNhMjNmM2JhNjc3ZjgyY2NmMmZlNDI4ZTJhYjA3NjA='}
2022-03-03 14:58:45,002 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTJhYjA3NjA='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyNC45MjYxOTczOjc1YTNjMDhiNGNhMjNmM2JhNjc3ZjgyY2NmMmZlNDI4ZTJhYjA3NjA='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTJhYjA3NjA='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyNC45MjYxOTczOjc1YTNjMDhiNGNhMjNmM2JhNjc3ZjgyY2NmMmZlNDI4ZTJhYjA3NjA='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 14:58:45,854 - [test_login05.py - line:66] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMyMDcyNS43Nzc5MTk6YjFhNWVhYmJkM2JkODQzZmQ1NmZlYTc0YmI2OWU3MTVhZTQwNDU2Mw=='}
2022-03-03 14:58:45,854 - [test_login05.py - line:67] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTQwNDU2Mw=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyNS43Nzc5MTk6YjFhNWVhYmJkM2JkODQzZmQ1NmZlYTc0YmI2OWU3MTVhZTQwNDU2Mw=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 63, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTQwNDU2Mw=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyNS43Nzc5MTk6YjFhNWVhYmJkM2JkODQzZmQ1NmZlYTc0YmI2OWU3MTVhZTQwNDU2Mw=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 14:58:46,036 - [test_login05.py - line:66] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMyMDcyNS45NTQ0NDYzOmY5ZDI0ZTkxM2JkNTQ4YTkzZTE5ZmMwZjEyZmU2YzBjNTkyNGZhN2Q='}
2022-03-03 14:58:46,036 - [test_login05.py - line:67] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NTkyNGZhN2Q='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyNS45NTQ0NDYzOmY5ZDI0ZTkxM2JkNTQ4YTkzZTE5ZmMwZjEyZmU2YzBjNTkyNGZhN2Q='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 63, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NTkyNGZhN2Q='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyNS45NTQ0NDYzOmY5ZDI0ZTkxM2JkNTQ4YTkzZTE5ZmMwZjEyZmU2YzBjNTkyNGZhN2Q='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 15:00:21,344 - [test_login05.py - line:66] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMyMDgyMS4yNjM0NzIzOmJiMWM1NmI2NmU4NzFkNjdjNzU2MTZjMGQxMTI4ZTM1ZjQ2YjEzZWM='}
2022-03-03 15:00:21,345 - [test_login05.py - line:67] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZjQ2YjEzZWM='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDgyMS4yNjM0NzIzOmJiMWM1NmI2NmU4NzFkNjdjNzU2MTZjMGQxMTI4ZTM1ZjQ2YjEzZWM='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 63, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZjQ2YjEzZWM='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDgyMS4yNjM0NzIzOmJiMWM1NmI2NmU4NzFkNjdjNzU2MTZjMGQxMTI4ZTM1ZjQ2YjEzZWM='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 15:00:21,652 - [test_login05.py - line:66] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMyMDgyMS41NzQ2NDo0NzQwYjUyNWUwNWRmNjNjMzU5OTgyY2E1NGY3ZThhMWZhM2Y5NDRh'}
2022-03-03 15:00:21,652 - [test_login05.py - line:67] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MWZhM2Y5NDRh'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDgyMS41NzQ2NDo0NzQwYjUyNWUwNWRmNjNjMzU5OTgyY2E1NGY3ZThhMWZhM2Y5NDRh'}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 63, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MWZhM2Y5NDRh'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDgyMS41NzQ2NDo0NzQwYjUyNWUwNWRmNjNjMzU5OTgyY2E1NGY3ZThhMWZhM2Y5NDRh'}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 15:00:22,890 - [test_regist.py - line:46] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-03-03 15:00:22,890 - [test_regist.py - line:47] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 43, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-03 15:00:23,231 - [test_regist.py - line:46] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-03-03 15:00:23,231 - [test_regist.py - line:47] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 43, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-03-03 15:00:23,517 - [test_regist.py - line:46] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-03-03 15:00:23,517 - [test_regist.py - line:47] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 43, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
