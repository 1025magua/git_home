2021-09-29 17:46:48,150 - [test_login.py - line:46] - INFO:测试编号1,测试用例标题:登录成功,执行成功！
2021-09-29 17:46:48,196 - [test_login.py - line:46] - INFO:测试编号2,测试用例标题:用户名错误,执行成功！
2021-09-29 17:46:48,228 - [test_login.py - line:46] - INFO:测试编号3,测试用例标题:用户名为空,执行成功！
2021-09-29 17:46:48,259 - [test_login.py - line:46] - INFO:测试编号4,测试用例标题:密码错误,执行成功！
2021-09-29 17:46:48,290 - [test_login.py - line:46] - INFO:测试编号5,测试用例标题:密码为空,执行成功！
2021-09-29 17:46:48,337 - [test_regist.py - line:43] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2021-09-29 17:46:48,368 - [test_regist.py - line:43] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2021-09-29 17:46:48,415 - [test_regist.py - line:43] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2021-09-29 17:46:48,446 - [test_regist.py - line:38] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2021-09-29 17:46:48,446 - [test_regist.py - line:39] - ERROR:{'code': 1003, 'msg': '确认密码不能为空'} != {'code': 1004, 'msg': '两次密码输入不一致'}
- {'code': 1003, 'msg': '确认密码不能为空'}
?             ^          ^^   ^^^

+ {'code': 1004, 'msg': '两次密码输入不一致'}
?             ^          ^^  ++ ^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest02\testcases\test_regist.py", line 35, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1003, 'msg': '确认密码不能为空'} != {'code': 1004, 'msg': '两次密码输入不一致'}
- {'code': 1003, 'msg': '确认密码不能为空'}
?             ^          ^^   ^^^

+ {'code': 1004, 'msg': '两次密码输入不一致'}
?             ^          ^^  ++ ^^

2021-09-29 17:46:48,478 - [test_regist.py - line:43] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2021-09-29 17:46:48,524 - [test_regist.py - line:43] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2021-09-29 17:46:48,556 - [test_regist.py - line:43] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2021-09-29 17:46:48,587 - [test_regist.py - line:38] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2021-09-29 17:46:48,587 - [test_regist.py - line:39] - ERROR:{'code': 1007, 'msg': '手机号码格式不正确'} != {'code': 1009, 'msg': '用户名已存在'}
- {'code': 1007, 'msg': '手机号码格式不正确'}
+ {'code': 1009, 'msg': '用户名已存在'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest02\testcases\test_regist.py", line 35, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '手机号码格式不正确'} != {'code': 1009, 'msg': '用户名已存在'}
- {'code': 1007, 'msg': '手机号码格式不正确'}
+ {'code': 1009, 'msg': '用户名已存在'}
2021-09-29 17:46:48,618 - [test_regist.py - line:43] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2021-09-29 17:46:48,665 - [test_regist.py - line:43] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2021-09-29 17:46:48,696 - [test_regist.py - line:38] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2021-09-29 17:46:48,696 - [test_regist.py - line:39] - ERROR:{'code': 1009, 'msg': '邮箱格式不正确'} != {'code': 1009, 'msg': '用户名已存在'}
- {'code': 1009, 'msg': '邮箱格式不正确'}
?                        ^^^^^^^

+ {'code': 1009, 'msg': '用户名已存在'}
?                        ^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest02\testcases\test_regist.py", line 35, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1009, 'msg': '邮箱格式不正确'} != {'code': 1009, 'msg': '用户名已存在'}
- {'code': 1009, 'msg': '邮箱格式不正确'}
?                        ^^^^^^^

+ {'code': 1009, 'msg': '用户名已存在'}
?                        ^^^^^^

2021-09-29 17:46:48,743 - [test_regist.py - line:43] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2021-09-30 10:34:30,217 - [test_Login_teacher.py - line:34] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-09-30 10:34:53,878 - [test_Login_teacher.py - line:29] - ERROR:测试编号1,测试用例标题:正常登录流程,执行失败！实际结果:{'code': 1007, 'msg': '用户名或者密码错误'}
2021-09-30 10:34:53,878 - [test_Login_teacher.py - line:30] - ERROR:'登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest02\testcases\test_Login_teacher.py", line 26, in test_login
    self.assertIn(case.expect, str(res_body))
  File "D:\tools\python\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1007, 'msg': '用户名或者密码错误'}"
2021-09-30 10:41:26,125 - [test_Login_teacher.py - line:51] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-09-30 10:41:29,167 - [test_Login_teacher.py - line:51] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-09-30 10:44:43,715 - [test_Login_teacher.py - line:50] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-09-30 10:44:43,765 - [test_Login_teacher.py - line:50] - INFO:测试编号2,测试用例标题:用户名为空,执行成功！
2021-09-30 10:47:42,957 - [test_Login_teacher.py - line:50] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-09-30 10:47:43,002 - [test_Login_teacher.py - line:50] - INFO:测试编号2,测试用例标题:用户名为空,执行成功！
2021-09-30 10:48:35,322 - [test_Login_teacher.py - line:50] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-09-30 10:48:35,366 - [test_Login_teacher.py - line:50] - INFO:测试编号2,测试用例标题:用户名为空,执行成功！
2021-09-30 10:48:35,408 - [test_login.py - line:46] - INFO:测试编号1,测试用例标题:登录成功,执行成功！
2021-09-30 10:48:35,445 - [test_login.py - line:46] - INFO:测试编号2,测试用例标题:用户名错误,执行成功！
2021-09-30 10:48:35,479 - [test_login.py - line:46] - INFO:测试编号3,测试用例标题:用户名为空,执行成功！
2021-09-30 10:48:35,515 - [test_login.py - line:46] - INFO:测试编号4,测试用例标题:密码错误,执行成功！
2021-09-30 10:48:35,552 - [test_login.py - line:46] - INFO:测试编号5,测试用例标题:密码为空,执行成功！
2021-09-30 10:48:35,593 - [test_regist.py - line:43] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2021-09-30 10:48:35,630 - [test_regist.py - line:43] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2021-09-30 10:48:35,665 - [test_regist.py - line:43] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2021-09-30 10:48:35,703 - [test_regist.py - line:38] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2021-09-30 10:48:35,703 - [test_regist.py - line:39] - ERROR:{'code': 1003, 'msg': '确认密码不能为空'} != {'code': 1004, 'msg': '两次密码输入不一致'}
- {'code': 1003, 'msg': '确认密码不能为空'}
?             ^          ^^   ^^^

+ {'code': 1004, 'msg': '两次密码输入不一致'}
?             ^          ^^  ++ ^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_regist.py", line 35, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1003, 'msg': '确认密码不能为空'} != {'code': 1004, 'msg': '两次密码输入不一致'}
- {'code': 1003, 'msg': '确认密码不能为空'}
?             ^          ^^   ^^^

+ {'code': 1004, 'msg': '两次密码输入不一致'}
?             ^          ^^  ++ ^^

2021-09-30 10:48:35,742 - [test_regist.py - line:43] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2021-09-30 10:48:35,780 - [test_regist.py - line:43] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2021-09-30 10:48:35,822 - [test_regist.py - line:43] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2021-09-30 10:48:35,866 - [test_regist.py - line:38] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2021-09-30 10:48:35,866 - [test_regist.py - line:39] - ERROR:{'code': 1007, 'msg': '手机号码格式不正确'} != {'code': 1009, 'msg': '用户名已存在'}
- {'code': 1007, 'msg': '手机号码格式不正确'}
+ {'code': 1009, 'msg': '用户名已存在'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_regist.py", line 35, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '手机号码格式不正确'} != {'code': 1009, 'msg': '用户名已存在'}
- {'code': 1007, 'msg': '手机号码格式不正确'}
+ {'code': 1009, 'msg': '用户名已存在'}
2021-09-30 10:48:35,905 - [test_regist.py - line:43] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2021-09-30 10:48:35,945 - [test_regist.py - line:43] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2021-09-30 10:48:35,987 - [test_regist.py - line:38] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2021-09-30 10:48:35,988 - [test_regist.py - line:39] - ERROR:{'code': 1009, 'msg': '邮箱格式不正确'} != {'code': 1009, 'msg': '用户名已存在'}
- {'code': 1009, 'msg': '邮箱格式不正确'}
?                        ^^^^^^^

+ {'code': 1009, 'msg': '用户名已存在'}
?                        ^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_regist.py", line 35, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1009, 'msg': '邮箱格式不正确'} != {'code': 1009, 'msg': '用户名已存在'}
- {'code': 1009, 'msg': '邮箱格式不正确'}
?                        ^^^^^^^

+ {'code': 1009, 'msg': '用户名已存在'}
?                        ^^^^^^

2021-09-30 10:48:36,029 - [test_regist.py - line:43] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2021-09-30 10:50:23,407 - [test_Login_teacher.py - line:50] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-09-30 10:50:23,452 - [test_Login_teacher.py - line:50] - INFO:测试编号2,测试用例标题:用户名为空,执行成功！
2021-09-30 10:50:23,494 - [test_login.py - line:46] - INFO:测试编号1,测试用例标题:登录成功,执行成功！
2021-09-30 10:50:23,532 - [test_login.py - line:46] - INFO:测试编号2,测试用例标题:用户名错误,执行成功！
2021-09-30 10:50:23,567 - [test_login.py - line:46] - INFO:测试编号3,测试用例标题:用户名为空,执行成功！
2021-09-30 10:50:23,605 - [test_login.py - line:46] - INFO:测试编号4,测试用例标题:密码错误,执行成功！
2021-09-30 10:50:23,641 - [test_login.py - line:46] - INFO:测试编号5,测试用例标题:密码为空,执行成功！
2021-09-30 10:50:23,684 - [test_regist.py - line:43] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2021-09-30 10:50:23,722 - [test_regist.py - line:43] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2021-09-30 10:50:23,762 - [test_regist.py - line:43] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2021-09-30 10:50:23,801 - [test_regist.py - line:38] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2021-09-30 10:50:23,801 - [test_regist.py - line:39] - ERROR:{'code': 1003, 'msg': '确认密码不能为空'} != {'code': 1004, 'msg': '两次密码输入不一致'}
- {'code': 1003, 'msg': '确认密码不能为空'}
?             ^          ^^   ^^^

+ {'code': 1004, 'msg': '两次密码输入不一致'}
?             ^          ^^  ++ ^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_regist.py", line 35, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1003, 'msg': '确认密码不能为空'} != {'code': 1004, 'msg': '两次密码输入不一致'}
- {'code': 1003, 'msg': '确认密码不能为空'}
?             ^          ^^   ^^^

+ {'code': 1004, 'msg': '两次密码输入不一致'}
?             ^          ^^  ++ ^^

2021-09-30 10:50:23,838 - [test_regist.py - line:43] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2021-09-30 10:50:23,876 - [test_regist.py - line:43] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2021-09-30 10:50:23,916 - [test_regist.py - line:43] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2021-09-30 10:50:23,959 - [test_regist.py - line:38] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2021-09-30 10:50:23,960 - [test_regist.py - line:39] - ERROR:{'code': 1007, 'msg': '手机号码格式不正确'} != {'code': 1009, 'msg': '用户名已存在'}
- {'code': 1007, 'msg': '手机号码格式不正确'}
+ {'code': 1009, 'msg': '用户名已存在'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_regist.py", line 35, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '手机号码格式不正确'} != {'code': 1009, 'msg': '用户名已存在'}
- {'code': 1007, 'msg': '手机号码格式不正确'}
+ {'code': 1009, 'msg': '用户名已存在'}
2021-09-30 10:50:23,998 - [test_regist.py - line:43] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2021-09-30 10:50:24,037 - [test_regist.py - line:43] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2021-09-30 10:50:24,081 - [test_regist.py - line:38] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2021-09-30 10:50:24,081 - [test_regist.py - line:39] - ERROR:{'code': 1009, 'msg': '邮箱格式不正确'} != {'code': 1009, 'msg': '用户名已存在'}
- {'code': 1009, 'msg': '邮箱格式不正确'}
?                        ^^^^^^^

+ {'code': 1009, 'msg': '用户名已存在'}
?                        ^^^^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_regist.py", line 35, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1009, 'msg': '邮箱格式不正确'} != {'code': 1009, 'msg': '用户名已存在'}
- {'code': 1009, 'msg': '邮箱格式不正确'}
?                        ^^^^^^^

+ {'code': 1009, 'msg': '用户名已存在'}
?                        ^^^^^^

2021-09-30 10:50:24,124 - [test_regist.py - line:43] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2021-10-04 09:58:10,956 - [test_login01.py - line:41] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 14:45:45,648 - [test_login02.py - line:56] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 14:45:48,013 - [test_login02.py - line:56] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 14:45:49,793 - [test_login02.py - line:56] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 14:45:51,615 - [test_login02.py - line:56] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 14:53:03,238 - [test_login03.py - line:59] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 14:53:03,274 - [test_login03.py - line:59] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 14:53:03,309 - [test_login03.py - line:59] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 14:53:03,344 - [test_login03.py - line:54] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MDM4My4zMTU2NDkzOmRkZGQ2ZGEzMWU0MWEyYjMxNzk1ZWJhMTU2NmJlMTQzZjY0MDg4YjA='}
2021-10-04 14:53:03,344 - [test_login03.py - line:55] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MDM4My4zMTU2NDkzOmRkZGQ2ZGEzMWU0MWEyYjMxNzk1ZWJhMTU2NmJlMTQzZjY0MDg4YjA='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MDM4M[64 chars]jA='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MDM4My4zMTU2NDkzOmRkZGQ2ZGEzMWU0MWEyYjMxNzk1ZWJhMTU2NmJlMTQzZjY0MDg4YjA='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 51, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MDM4My4zMTU2NDkzOmRkZGQ2ZGEzMWU0MWEyYjMxNzk1ZWJhMTU2NmJlMTQzZjY0MDg4YjA='}
2021-10-04 14:53:03,380 - [test_login03.py - line:59] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 14:53:03,414 - [test_login03.py - line:54] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MDM4My4zODY0NTk4OmJlZGVkOGYyZWZkYzdjN2Q5ZjM5NDVjNjQ2YWU4NWFkYWQ4MWRmZDY='}
2021-10-04 14:53:03,414 - [test_login03.py - line:55] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MDM4My4zODY0NTk4OmJlZGVkOGYyZWZkYzdjN2Q5ZjM5NDVjNjQ2YWU4NWFkYWQ4MWRmZDY='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MDM4M[64 chars]DY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MDM4My4zODY0NTk4OmJlZGVkOGYyZWZkYzdjN2Q5ZjM5NDVjNjQ2YWU4NWFkYWQ4MWRmZDY='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 51, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MDM4My4zODY0NTk4OmJlZGVkOGYyZWZkYzdjN2Q5ZjM5NDVjNjQ2YWU4NWFkYWQ4MWRmZDY='}
2021-10-04 14:53:03,450 - [test_login03.py - line:59] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 14:53:03,484 - [test_login03.py - line:59] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 14:53:03,521 - [test_login03.py - line:59] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 14:53:03,558 - [test_login03.py - line:59] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 14:53:03,600 - [test_login03.py - line:59] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 14:58:39,276 - [test_login03.py - line:59] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 14:58:39,310 - [test_login03.py - line:59] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 14:58:39,345 - [test_login03.py - line:59] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 14:58:39,378 - [test_login03.py - line:54] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MDcxOS4zNTA4OTA0OjUwYmFjNzM4NTJlY2U5ODkxODFiNDIxOWI3Mjg4NjA1YTk4M2RjODc='}
2021-10-04 14:58:39,379 - [test_login03.py - line:55] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MDcxO[64 chars]Dc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MDcxOS4zNTA4OTA0OjUwYmFjNzM4NTJlY2U5ODkxODFiNDIxOWI3Mjg4NjA1YTk4M2RjODc='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 51, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MDcxO[64 chars]Dc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MDcxOS4zNTA4OTA0OjUwYmFjNzM4NTJlY2U5ODkxODFiNDIxOWI3Mjg4NjA1YTk4M2RjODc='}
2021-10-04 14:58:39,413 - [test_login03.py - line:59] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 14:58:39,448 - [test_login03.py - line:54] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MDcxOS40MjA3MDQ2OmZmN2U3MmQ3OGZhNDNhNTk4YjlmNWE4YmVhNzZlMTk3YjlhYTlkNWY='}
2021-10-04 14:58:39,448 - [test_login03.py - line:55] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MDcxO[64 chars]WY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MDcxOS40MjA3MDQ2OmZmN2U3MmQ3OGZhNDNhNTk4YjlmNWE4YmVhNzZlMTk3YjlhYTlkNWY='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 51, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MDcxO[64 chars]WY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MDcxOS40MjA3MDQ2OmZmN2U3MmQ3OGZhNDNhNTk4YjlmNWE4YmVhNzZlMTk3YjlhYTlkNWY='}
2021-10-04 14:58:39,483 - [test_login03.py - line:59] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 14:58:39,518 - [test_login03.py - line:59] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 14:58:39,554 - [test_login03.py - line:59] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 14:58:39,590 - [test_login03.py - line:59] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 14:58:39,625 - [test_login03.py - line:59] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 15:39:51,094 - [test_login04.py - line:65] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 15:39:51,135 - [test_login04.py - line:65] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 15:39:51,178 - [test_login04.py - line:65] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 15:39:51,217 - [test_login04.py - line:60] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5MS4xODQ4ODU1OmMxZDY4MjhjMDZjNzczZjg4NGY1ZDQwZjM0MmEwNzM3ZjU4NTAzYmQ='}
2021-10-04 15:39:51,217 - [test_login04.py - line:61] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5MS4xODQ4ODU1OmMxZDY4MjhjMDZjNzczZjg4NGY1ZDQwZjM0MmEwNzM3ZjU4NTAzYmQ='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5M[64 chars]mQ='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MzE5MS4xODQ4ODU1OmMxZDY4MjhjMDZjNzczZjg4NGY1ZDQwZjM0MmEwNzM3ZjU4NTAzYmQ='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5MS4xODQ4ODU1OmMxZDY4MjhjMDZjNzczZjg4NGY1ZDQwZjM0MmEwNzM3ZjU4NTAzYmQ='}
2021-10-04 15:39:51,261 - [test_login04.py - line:65] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 15:39:51,302 - [test_login04.py - line:60] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5MS4yNjg2NjEzOjkyNDdiN2NmYWYzMGI4YjA4MGE2YWI0OTRmZDQzZjIzYTAyMTcwNWI='}
2021-10-04 15:39:51,302 - [test_login04.py - line:61] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5MS4yNjg2NjEzOjkyNDdiN2NmYWYzMGI4YjA4MGE2YWI0OTRmZDQzZjIzYTAyMTcwNWI='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5M[64 chars]WI='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MzE5MS4yNjg2NjEzOjkyNDdiN2NmYWYzMGI4YjA4MGE2YWI0OTRmZDQzZjIzYTAyMTcwNWI='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5MS4yNjg2NjEzOjkyNDdiN2NmYWYzMGI4YjA4MGE2YWI0OTRmZDQzZjIzYTAyMTcwNWI='}
2021-10-04 15:39:51,350 - [test_login04.py - line:65] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 15:39:51,395 - [test_login04.py - line:65] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 15:39:51,437 - [test_login04.py - line:65] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 15:39:51,480 - [test_login04.py - line:65] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 15:39:51,519 - [test_login04.py - line:65] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 15:39:54,160 - [test_login04.py - line:65] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 15:39:54,202 - [test_login04.py - line:65] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 15:39:54,253 - [test_login04.py - line:65] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 15:39:54,308 - [test_login04.py - line:60] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5NC4yNjc2NDM6MTAyZmM3YzUwZTE1Y2I2NWQxNzE1ZGQyNDQ0MjAxMzMxYTMxNTY3MQ=='}
2021-10-04 15:39:54,308 - [test_login04.py - line:61] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5NC4yNjc2NDM6MTAyZmM3YzUwZTE1Y2I2NWQxNzE1ZGQyNDQ0MjAxMzMxYTMxNTY3MQ=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5N[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MzE5NC4yNjc2NDM6MTAyZmM3YzUwZTE1Y2I2NWQxNzE1ZGQyNDQ0MjAxMzMxYTMxNTY3MQ=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5NC4yNjc2NDM6MTAyZmM3YzUwZTE1Y2I2NWQxNzE1ZGQyNDQ0MjAxMzMxYTMxNTY3MQ=='}
2021-10-04 15:39:54,350 - [test_login04.py - line:65] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 15:39:54,391 - [test_login04.py - line:60] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5NC4zNTY0MDI5OmFiNTNjMGI2NDMzZGNjZTFiMTg0YjAyZmNiNmQ2MzliNGYyZDRiY2E='}
2021-10-04 15:39:54,391 - [test_login04.py - line:61] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5NC4zNTY0MDI5OmFiNTNjMGI2NDMzZGNjZTFiMTg0YjAyZmNiNmQ2MzliNGYyZDRiY2E='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5N[64 chars]2E='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MzE5NC4zNTY0MDI5OmFiNTNjMGI2NDMzZGNjZTFiMTg0YjAyZmNiNmQ2MzliNGYyZDRiY2E='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5NC4zNTY0MDI5OmFiNTNjMGI2NDMzZGNjZTFiMTg0YjAyZmNiNmQ2MzliNGYyZDRiY2E='}
2021-10-04 15:39:54,438 - [test_login04.py - line:65] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 15:39:54,478 - [test_login04.py - line:65] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 15:39:54,520 - [test_login04.py - line:65] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 15:39:54,560 - [test_login04.py - line:65] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 15:39:54,602 - [test_login04.py - line:65] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 15:39:56,525 - [test_login04.py - line:65] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 15:39:56,565 - [test_login04.py - line:65] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 15:39:56,606 - [test_login04.py - line:65] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 15:39:56,648 - [test_login04.py - line:60] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5Ni42MTIzNjk4OmUzYzc1MDMxZWQwODg5ODU1MmUwOThlMDk2NmE3ZjkxZDljOGRmMmI='}
2021-10-04 15:39:56,648 - [test_login04.py - line:61] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5Ni42MTIzNjk4OmUzYzc1MDMxZWQwODg5ODU1MmUwOThlMDk2NmE3ZjkxZDljOGRmMmI='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5N[64 chars]mI='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MzE5Ni42MTIzNjk4OmUzYzc1MDMxZWQwODg5ODU1MmUwOThlMDk2NmE3ZjkxZDljOGRmMmI='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5Ni42MTIzNjk4OmUzYzc1MDMxZWQwODg5ODU1MmUwOThlMDk2NmE3ZjkxZDljOGRmMmI='}
2021-10-04 15:39:56,689 - [test_login04.py - line:65] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 15:39:56,730 - [test_login04.py - line:60] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5Ni42OTYxNDU6MDU4OGZhOGY5ODZhNTI2NjFjODQ5NmUyZjk1Y2M3NDcyMjIxODUwNg=='}
2021-10-04 15:39:56,730 - [test_login04.py - line:61] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5Ni42OTYxNDU6MDU4OGZhOGY5ODZhNTI2NjFjODQ5NmUyZjk1Y2M3NDcyMjIxODUwNg=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5N[64 chars]g=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MzE5Ni42OTYxNDU6MDU4OGZhOGY5ODZhNTI2NjFjODQ5NmUyZjk1Y2M3NDcyMjIxODUwNg=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5Ni42OTYxNDU6MDU4OGZhOGY5ODZhNTI2NjFjODQ5NmUyZjk1Y2M3NDcyMjIxODUwNg=='}
2021-10-04 15:39:56,775 - [test_login04.py - line:65] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 15:39:56,817 - [test_login04.py - line:65] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 15:39:56,862 - [test_login04.py - line:65] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 15:39:56,903 - [test_login04.py - line:65] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 15:39:56,944 - [test_login04.py - line:65] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 15:39:58,993 - [test_login04.py - line:65] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 15:39:59,034 - [test_login04.py - line:65] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 15:39:59,076 - [test_login04.py - line:65] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 15:39:59,117 - [test_login04.py - line:60] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5OS4wODM3NTg4OmFhNGUyMGJkOGIzM2U1OGFjYjQ0YTVlNzVlNWY3NjI3ZDhjNzc5ZTY='}
2021-10-04 15:39:59,117 - [test_login04.py - line:61] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5OS4wODM3NTg4OmFhNGUyMGJkOGIzM2U1OGFjYjQ0YTVlNzVlNWY3NjI3ZDhjNzc5ZTY='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5O[64 chars]TY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MzE5OS4wODM3NTg4OmFhNGUyMGJkOGIzM2U1OGFjYjQ0YTVlNzVlNWY3NjI3ZDhjNzc5ZTY='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5OS4wODM3NTg4OmFhNGUyMGJkOGIzM2U1OGFjYjQ0YTVlNzVlNWY3NjI3ZDhjNzc5ZTY='}
2021-10-04 15:39:59,159 - [test_login04.py - line:65] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 15:39:59,199 - [test_login04.py - line:60] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5OS4xNjY1Mzg6ZDVlYWM2MzMwY2Q0ZjlkMTA1ZDUzOTJkZjlhZDkwOWM5Njg3YWNlZA=='}
2021-10-04 15:39:59,200 - [test_login04.py - line:61] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5OS4xNjY1Mzg6ZDVlYWM2MzMwY2Q0ZjlkMTA1ZDUzOTJkZjlhZDkwOWM5Njg3YWNlZA=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2MzE5O[64 chars]A=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2MzE5OS4xNjY1Mzg6ZDVlYWM2MzMwY2Q0ZjlkMTA1ZDUzOTJkZjlhZDkwOWM5Njg3YWNlZA=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2MzE5OS4xNjY1Mzg6ZDVlYWM2MzMwY2Q0ZjlkMTA1ZDUzOTJkZjlhZDkwOWM5Njg3YWNlZA=='}
2021-10-04 15:39:59,247 - [test_login04.py - line:65] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 15:39:59,289 - [test_login04.py - line:65] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 15:39:59,330 - [test_login04.py - line:65] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 15:39:59,371 - [test_login04.py - line:65] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 15:39:59,412 - [test_login04.py - line:65] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:20:03,755 - [test_login05.py - line:58] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:20:03,798 - [test_login05.py - line:58] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:20:03,843 - [test_login05.py - line:58] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:20:03,885 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTYwMy44NDk1MjE2OmYwMjYzYzczNGU5NTg5YTMwYWNjOTU0MDgyMzVmY2E4MzY5YTk0NTc='}
2021-10-04 16:20:03,886 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTYwMy44NDk1MjE2OmYwMjYzYzczNGU5NTg5YTMwYWNjOTU0MDgyMzVmY2E4MzY5YTk0NTc='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTYwM[64 chars]Tc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NTYwMy44NDk1MjE2OmYwMjYzYzczNGU5NTg5YTMwYWNjOTU0MDgyMzVmY2E4MzY5YTk0NTc='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTYwMy44NDk1MjE2OmYwMjYzYzczNGU5NTg5YTMwYWNjOTU0MDgyMzVmY2E4MzY5YTk0NTc='}
2021-10-04 16:20:03,930 - [test_login05.py - line:58] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:20:03,978 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:20:03,978 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:20:04,022 - [test_login05.py - line:58] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:20:04,063 - [test_login05.py - line:58] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:20:04,103 - [test_login05.py - line:58] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:20:04,146 - [test_login05.py - line:58] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:20:04,187 - [test_login05.py - line:58] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:20:09,887 - [test_login05.py - line:58] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:20:09,928 - [test_login05.py - line:58] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:20:09,970 - [test_login05.py - line:58] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:20:10,012 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTYwOS45NzcxMzI4OjBmOGJjMTRkOThiZmVkYWQ0MGFlOTBiOGExNTU2NzI5ZTFjODQ0OTg='}
2021-10-04 16:20:10,012 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTYwOS45NzcxMzI4OjBmOGJjMTRkOThiZmVkYWQ0MGFlOTBiOGExNTU2NzI5ZTFjODQ0OTg='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTYwO[64 chars]Tg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NTYwOS45NzcxMzI4OjBmOGJjMTRkOThiZmVkYWQ0MGFlOTBiOGExNTU2NzI5ZTFjODQ0OTg='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTYwOS45NzcxMzI4OjBmOGJjMTRkOThiZmVkYWQ0MGFlOTBiOGExNTU2NzI5ZTFjODQ0OTg='}
2021-10-04 16:20:10,085 - [test_login05.py - line:58] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:20:10,131 - [test_login05.py - line:58] - INFO:测试编号6,测试用例标题:测试密码是否区分大小写,执行成功！
2021-10-04 16:20:10,173 - [test_login05.py - line:58] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:20:10,220 - [test_login05.py - line:58] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:20:10,269 - [test_login05.py - line:58] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:20:10,319 - [test_login05.py - line:58] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:20:10,366 - [test_login05.py - line:53] - ERROR:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:20:10,366 - [test_login05.py - line:54] - ERROR: :: {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:20:45,025 - [test_login05.py - line:59] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:20:45,068 - [test_login05.py - line:59] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:20:45,108 - [test_login05.py - line:59] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:20:45,152 - [test_login05.py - line:54] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTY0NS4xMTcxNDc0OjMwMzMzYjcwNjczM2RlMmYxYzU3ZWYzM2UyMzYwNTg2OGQ1M2NjMzg='}
2021-10-04 16:20:45,152 - [test_login05.py - line:55] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTY0NS4xMTcxNDc0OjMwMzMzYjcwNjczM2RlMmYxYzU3ZWYzM2UyMzYwNTg2OGQ1M2NjMzg='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTY0N[64 chars]zg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NTY0NS4xMTcxNDc0OjMwMzMzYjcwNjczM2RlMmYxYzU3ZWYzM2UyMzYwNTg2OGQ1M2NjMzg='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 51, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTY0NS4xMTcxNDc0OjMwMzMzYjcwNjczM2RlMmYxYzU3ZWYzM2UyMzYwNTg2OGQ1M2NjMzg='}
2021-10-04 16:20:45,197 - [test_login05.py - line:59] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:20:45,243 - [test_login05.py - line:54] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:20:45,244 - [test_login05.py - line:55] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 51, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:20:45,292 - [test_login05.py - line:59] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:20:45,335 - [test_login05.py - line:59] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:20:45,377 - [test_login05.py - line:59] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:20:45,422 - [test_login05.py - line:59] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:20:45,466 - [test_login05.py - line:59] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:20:54,076 - [test_login05.py - line:59] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:20:54,121 - [test_login05.py - line:59] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:20:54,160 - [test_login05.py - line:59] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:20:54,203 - [test_login05.py - line:54] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTY1NC4xNjc5NDA0OjFkNDQ0YTVjYzExYWU4MmZkZjM4ZTMwNDc4NTYwMDU2OWU5NTE0YzA='}
2021-10-04 16:20:54,203 - [test_login05.py - line:55] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTY1NC4xNjc5NDA0OjFkNDQ0YTVjYzExYWU4MmZkZjM4ZTMwNDc4NTYwMDU2OWU5NTE0YzA='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTY1N[64 chars]zA='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NTY1NC4xNjc5NDA0OjFkNDQ0YTVjYzExYWU4MmZkZjM4ZTMwNDc4NTYwMDU2OWU5NTE0YzA='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 51, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTY1NC4xNjc5NDA0OjFkNDQ0YTVjYzExYWU4MmZkZjM4ZTMwNDc4NTYwMDU2OWU5NTE0YzA='}
2021-10-04 16:20:54,248 - [test_login05.py - line:59] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:20:54,295 - [test_login05.py - line:54] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTY1NC4yNTU3MDY6MWYwMWQwNjMxNjVjYWI3NjU3ODI4YzNhMTVjYjU4OGQ2NTg2OTgyMw=='}
2021-10-04 16:20:54,295 - [test_login05.py - line:55] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTY1NC4yNTU3MDY6MWYwMWQwNjMxNjVjYWI3NjU3ODI4YzNhMTVjYjU4OGQ2NTg2OTgyMw=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTY1N[64 chars]w=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NTY1NC4yNTU3MDY6MWYwMWQwNjMxNjVjYWI3NjU3ODI4YzNhMTVjYjU4OGQ2NTg2OTgyMw=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 51, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTY1NC4yNTU3MDY6MWYwMWQwNjMxNjVjYWI3NjU3ODI4YzNhMTVjYjU4OGQ2NTg2OTgyMw=='}
2021-10-04 16:20:54,339 - [test_login05.py - line:59] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:20:54,383 - [test_login05.py - line:59] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:20:54,425 - [test_login05.py - line:59] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:20:54,467 - [test_login05.py - line:59] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:20:54,511 - [test_login05.py - line:59] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:20:56,805 - [test_login05.py - line:59] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:20:56,846 - [test_login05.py - line:59] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:20:56,888 - [test_login05.py - line:59] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:20:56,930 - [test_login05.py - line:59] - INFO:测试编号4,测试用例标题:测试用户名是否区分大小写,执行成功！
2021-10-04 16:20:56,972 - [test_login05.py - line:59] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:20:57,015 - [test_login05.py - line:54] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTY1Ni45Nzg0MjM2OmE3NGUxZGFmZjE5NjFlMWQ3ODZmMDlmZjc0YzU5ZjYyZTRmMzk5ODA='}
2021-10-04 16:20:57,015 - [test_login05.py - line:55] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTY1Ni45Nzg0MjM2OmE3NGUxZGFmZjE5NjFlMWQ3ODZmMDlmZjc0YzU5ZjYyZTRmMzk5ODA='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTY1N[64 chars]DA='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NTY1Ni45Nzg0MjM2OmE3NGUxZGFmZjE5NjFlMWQ3ODZmMDlmZjc0YzU5ZjYyZTRmMzk5ODA='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 51, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTY1Ni45Nzg0MjM2OmE3NGUxZGFmZjE5NjFlMWQ3ODZmMDlmZjc0YzU5ZjYyZTRmMzk5ODA='}
2021-10-04 16:20:57,063 - [test_login05.py - line:59] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:20:57,104 - [test_login05.py - line:59] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:20:57,149 - [test_login05.py - line:59] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:20:57,190 - [test_login05.py - line:59] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:20:57,232 - [test_login05.py - line:59] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:23:04,058 - [test_login05.py - line:60] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:24:14,825 - [test_login05.py - line:60] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:26:03,664 - [test_login05.py - line:58] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:26:03,706 - [test_login05.py - line:58] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:26:03,747 - [test_login05.py - line:58] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:26:03,789 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTk2My43NTM5MjI1OjVjNWU2NThiYTRmNzJlZWQ3ZmMxOWVkNjhhMGY5NTUyMWZmNmVmNTk='}
2021-10-04 16:26:03,789 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTk2My43NTM5MjI1OjVjNWU2NThiYTRmNzJlZWQ3ZmMxOWVkNjhhMGY5NTUyMWZmNmVmNTk='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTk2M[64 chars]Tk='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NTk2My43NTM5MjI1OjVjNWU2NThiYTRmNzJlZWQ3ZmMxOWVkNjhhMGY5NTUyMWZmNmVmNTk='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTk2My43NTM5MjI1OjVjNWU2NThiYTRmNzJlZWQ3ZmMxOWVkNjhhMGY5NTUyMWZmNmVmNTk='}
2021-10-04 16:26:03,833 - [test_login05.py - line:58] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:26:03,879 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTk2My44Mzk2OTM4OmM2ZDM4NGI0NzA2ZDdiZWFmNDE4MDM4OGIzMmQ1OTBhOWY3NWY5MmU='}
2021-10-04 16:26:03,879 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTk2My44Mzk2OTM4OmM2ZDM4NGI0NzA2ZDdiZWFmNDE4MDM4OGIzMmQ1OTBhOWY3NWY5MmU='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTk2M[64 chars]mU='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NTk2My44Mzk2OTM4OmM2ZDM4NGI0NzA2ZDdiZWFmNDE4MDM4OGIzMmQ1OTBhOWY3NWY5MmU='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTk2My44Mzk2OTM4OmM2ZDM4NGI0NzA2ZDdiZWFmNDE4MDM4OGIzMmQ1OTBhOWY3NWY5MmU='}
2021-10-04 16:26:03,925 - [test_login05.py - line:58] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:26:03,969 - [test_login05.py - line:58] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:26:04,014 - [test_login05.py - line:58] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:26:04,053 - [test_login05.py - line:58] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:26:04,098 - [test_login05.py - line:58] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:26:35,033 - [test_login05.py - line:58] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:26:35,074 - [test_login05.py - line:58] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:26:35,118 - [test_login05.py - line:58] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:26:35,159 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTk5NS4xMjUwMTg0Ojc0MmVhZWI0MDE0NzQyZWJhZGEzMTkyNWMyNGY5MThkYjlmOWI3MWM='}
2021-10-04 16:26:35,159 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTk5NS4xMjUwMTg0Ojc0MmVhZWI0MDE0NzQyZWJhZGEzMTkyNWMyNGY5MThkYjlmOWI3MWM='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTk5N[64 chars]WM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NTk5NS4xMjUwMTg0Ojc0MmVhZWI0MDE0NzQyZWJhZGEzMTkyNWMyNGY5MThkYjlmOWI3MWM='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTk5NS4xMjUwMTg0Ojc0MmVhZWI0MDE0NzQyZWJhZGEzMTkyNWMyNGY5MThkYjlmOWI3MWM='}
2021-10-04 16:26:35,202 - [test_login05.py - line:58] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:26:35,247 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTk5NS4yMDg3OTQ6NmIzYWEwMDZjZTU1YjE0YmZjYmE2ZTI0NzJjNjYzZjhmZDVkMTk2Mw=='}
2021-10-04 16:26:35,247 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTk5NS4yMDg3OTQ6NmIzYWEwMDZjZTU1YjE0YmZjYmE2ZTI0NzJjNjYzZjhmZDVkMTk2Mw=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NTk5N[64 chars]w=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NTk5NS4yMDg3OTQ6NmIzYWEwMDZjZTU1YjE0YmZjYmE2ZTI0NzJjNjYzZjhmZDVkMTk2Mw=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NTk5NS4yMDg3OTQ6NmIzYWEwMDZjZTU1YjE0YmZjYmE2ZTI0NzJjNjYzZjhmZDVkMTk2Mw=='}
2021-10-04 16:26:35,291 - [test_login05.py - line:58] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:26:35,334 - [test_login05.py - line:58] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:26:35,375 - [test_login05.py - line:58] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:26:35,417 - [test_login05.py - line:58] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:26:35,466 - [test_login05.py - line:58] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:26:43,054 - [test_login05.py - line:58] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:26:43,093 - [test_login05.py - line:58] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:26:43,134 - [test_login05.py - line:58] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:26:43,176 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAwMy4xNDE1NzYzOjA3ZmM5YWQ2NDhkODY4NTcxYjlmMjdlMzZmNDNlYWEzZmJhNDdkZTg='}
2021-10-04 16:26:43,177 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAwMy4xNDE1NzYzOjA3ZmM5YWQ2NDhkODY4NTcxYjlmMjdlMzZmNDNlYWEzZmJhNDdkZTg='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAwM[64 chars]Tg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAwMy4xNDE1NzYzOjA3ZmM5YWQ2NDhkODY4NTcxYjlmMjdlMzZmNDNlYWEzZmJhNDdkZTg='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAwMy4xNDE1NzYzOjA3ZmM5YWQ2NDhkODY4NTcxYjlmMjdlMzZmNDNlYWEzZmJhNDdkZTg='}
2021-10-04 16:26:43,219 - [test_login05.py - line:58] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:26:43,264 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAwMy4yMjYzNTpmNzE0NjEzOWZiYTc2ZDJhNzgyYmRmNDhjOTE5YThiNTg3Nzg1ZDdl'}
2021-10-04 16:26:43,265 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAwMy4yMjYzNTpmNzE0NjEzOWZiYTc2ZDJhNzgyYmRmNDhjOTE5YThiNTg3Nzg1ZDdl'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAwM[60 chars]Ddl'}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAwMy4yMjYzNTpmNzE0NjEzOWZiYTc2ZDJhNzgyYmRmNDhjOTE5YThiNTg3Nzg1ZDdl'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAwMy4yMjYzNTpmNzE0NjEzOWZiYTc2ZDJhNzgyYmRmNDhjOTE5YThiNTg3Nzg1ZDdl'}
2021-10-04 16:26:43,309 - [test_login05.py - line:58] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:26:43,350 - [test_login05.py - line:58] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:26:43,409 - [test_login05.py - line:58] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:26:43,458 - [test_login05.py - line:58] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:26:43,502 - [test_login05.py - line:58] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:26:46,623 - [test_login05.py - line:58] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:26:46,688 - [test_login05.py - line:58] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:26:46,727 - [test_login05.py - line:58] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:26:46,769 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAwNi43MzQ5NjU2OjMxMjNiYjY5Zjg0MGE3MzUzYTljMjg1N2U5ZWY0NTk1YjgzYTUyNzI='}
2021-10-04 16:26:46,770 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAwNi43MzQ5NjU2OjMxMjNiYjY5Zjg0MGE3MzUzYTljMjg1N2U5ZWY0NTk1YjgzYTUyNzI='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAwN[64 chars]zI='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAwNi43MzQ5NjU2OjMxMjNiYjY5Zjg0MGE3MzUzYTljMjg1N2U5ZWY0NTk1YjgzYTUyNzI='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAwNi43MzQ5NjU2OjMxMjNiYjY5Zjg0MGE3MzUzYTljMjg1N2U5ZWY0NTk1YjgzYTUyNzI='}
2021-10-04 16:26:46,813 - [test_login05.py - line:58] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:26:46,859 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAwNi44MTk3Mzk2OjRmYjU2MzVlYThlZjU1OTdiYTkzZDZkNzRhODAyNDllZTNhZWJhNDA='}
2021-10-04 16:26:46,859 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAwNi44MTk3Mzk2OjRmYjU2MzVlYThlZjU1OTdiYTkzZDZkNzRhODAyNDllZTNhZWJhNDA='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAwN[64 chars]DA='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAwNi44MTk3Mzk2OjRmYjU2MzVlYThlZjU1OTdiYTkzZDZkNzRhODAyNDllZTNhZWJhNDA='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAwNi44MTk3Mzk2OjRmYjU2MzVlYThlZjU1OTdiYTkzZDZkNzRhODAyNDllZTNhZWJhNDA='}
2021-10-04 16:26:46,904 - [test_login05.py - line:58] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:26:46,945 - [test_login05.py - line:58] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:26:46,985 - [test_login05.py - line:58] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:26:47,027 - [test_login05.py - line:58] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:26:47,072 - [test_login05.py - line:58] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:26:49,487 - [test_login05.py - line:58] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:26:49,529 - [test_login05.py - line:58] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:26:49,570 - [test_login05.py - line:58] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:26:49,611 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAwOS41NzYzNjU3OmM2ZDgwYThhZWYxMGViMGFjOTI3NjFlNThhZjU3MjVhYWZiNGE3MTM='}
2021-10-04 16:26:49,611 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAwOS41NzYzNjU3OmM2ZDgwYThhZWYxMGViMGFjOTI3NjFlNThhZjU3MjVhYWZiNGE3MTM='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAwO[64 chars]TM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAwOS41NzYzNjU3OmM2ZDgwYThhZWYxMGViMGFjOTI3NjFlNThhZjU3MjVhYWZiNGE3MTM='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAwOS41NzYzNjU3OmM2ZDgwYThhZWYxMGViMGFjOTI3NjFlNThhZjU3MjVhYWZiNGE3MTM='}
2021-10-04 16:26:49,655 - [test_login05.py - line:58] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:26:49,698 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAwOS42NjIxMzczOjRhNTg1NDAzNDZmYzZhYzc2MzFlOTFmMDU2MzlhNDkzNTU1ZDg2M2I='}
2021-10-04 16:26:49,699 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAwOS42NjIxMzczOjRhNTg1NDAzNDZmYzZhYzc2MzFlOTFmMDU2MzlhNDkzNTU1ZDg2M2I='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAwO[64 chars]2I='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAwOS42NjIxMzczOjRhNTg1NDAzNDZmYzZhYzc2MzFlOTFmMDU2MzlhNDkzNTU1ZDg2M2I='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAwOS42NjIxMzczOjRhNTg1NDAzNDZmYzZhYzc2MzFlOTFmMDU2MzlhNDkzNTU1ZDg2M2I='}
2021-10-04 16:26:49,744 - [test_login05.py - line:58] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:26:49,784 - [test_login05.py - line:58] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:26:49,827 - [test_login05.py - line:58] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:26:49,866 - [test_login05.py - line:58] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:26:49,908 - [test_login05.py - line:58] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:26:51,691 - [test_login05.py - line:58] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:26:51,732 - [test_login05.py - line:58] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:26:51,773 - [test_login05.py - line:58] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:26:51,814 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxMS43Nzg0NzY3OjM4MTE3MzQ4NTcxNzM2NTJhNDA1ZGFhOWEwODM1ZjQyYzZhMDkzYmE='}
2021-10-04 16:26:51,814 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxMS43Nzg0NzY3OjM4MTE3MzQ4NTcxNzM2NTJhNDA1ZGFhOWEwODM1ZjQyYzZhMDkzYmE='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxM[64 chars]mE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAxMS43Nzg0NzY3OjM4MTE3MzQ4NTcxNzM2NTJhNDA1ZGFhOWEwODM1ZjQyYzZhMDkzYmE='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxMS43Nzg0NzY3OjM4MTE3MzQ4NTcxNzM2NTJhNDA1ZGFhOWEwODM1ZjQyYzZhMDkzYmE='}
2021-10-04 16:26:51,857 - [test_login05.py - line:58] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:26:51,899 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxMS44NjMyNDkzOmJmNGMzZjViZmNlMmRiZmM5NmNhZmEwZWU2YmMzZWFmODdkZGZlYTM='}
2021-10-04 16:26:51,899 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxMS44NjMyNDkzOmJmNGMzZjViZmNlMmRiZmM5NmNhZmEwZWU2YmMzZWFmODdkZGZlYTM='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxM[64 chars]TM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAxMS44NjMyNDkzOmJmNGMzZjViZmNlMmRiZmM5NmNhZmEwZWU2YmMzZWFmODdkZGZlYTM='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxMS44NjMyNDkzOmJmNGMzZjViZmNlMmRiZmM5NmNhZmEwZWU2YmMzZWFmODdkZGZlYTM='}
2021-10-04 16:26:51,945 - [test_login05.py - line:58] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:26:51,986 - [test_login05.py - line:58] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:26:52,028 - [test_login05.py - line:58] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:26:52,070 - [test_login05.py - line:58] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:26:52,111 - [test_login05.py - line:58] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:26:54,094 - [test_login05.py - line:58] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:26:54,134 - [test_login05.py - line:58] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:26:54,176 - [test_login05.py - line:58] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:26:54,216 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxNC4xODIwNDc2OmVlZjU4MDNhMWRiNDVhODRmMTkwZmM2NDc2YTlhNTMwOGE1ZTY0YzA='}
2021-10-04 16:26:54,216 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxNC4xODIwNDc2OmVlZjU4MDNhMWRiNDVhODRmMTkwZmM2NDc2YTlhNTMwOGE1ZTY0YzA='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxN[64 chars]zA='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAxNC4xODIwNDc2OmVlZjU4MDNhMWRiNDVhODRmMTkwZmM2NDc2YTlhNTMwOGE1ZTY0YzA='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxNC4xODIwNDc2OmVlZjU4MDNhMWRiNDVhODRmMTkwZmM2NDc2YTlhNTMwOGE1ZTY0YzA='}
2021-10-04 16:26:54,258 - [test_login05.py - line:58] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:26:54,302 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxNC4yNjQ4MjY6ZDI3YjUwMDAyZjI2ZTg3MzM2MDdkZDRkNDM0YTFlNDI2NTY4YjU1OQ=='}
2021-10-04 16:26:54,302 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxNC4yNjQ4MjY6ZDI3YjUwMDAyZjI2ZTg3MzM2MDdkZDRkNDM0YTFlNDI2NTY4YjU1OQ=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxN[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAxNC4yNjQ4MjY6ZDI3YjUwMDAyZjI2ZTg3MzM2MDdkZDRkNDM0YTFlNDI2NTY4YjU1OQ=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxNC4yNjQ4MjY6ZDI3YjUwMDAyZjI2ZTg3MzM2MDdkZDRkNDM0YTFlNDI2NTY4YjU1OQ=='}
2021-10-04 16:26:54,345 - [test_login05.py - line:58] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:26:54,389 - [test_login05.py - line:58] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:26:54,430 - [test_login05.py - line:58] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:26:54,471 - [test_login05.py - line:58] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:26:54,511 - [test_login05.py - line:58] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:26:56,696 - [test_login05.py - line:58] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:26:56,740 - [test_login05.py - line:58] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:26:56,782 - [test_login05.py - line:58] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:26:56,823 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxNi43ODgwNzc6Mjc0YzcxNGMzZTRjYTY5MDUyYmE1ZTcyYzNmM2FlNmU1NmRlNDY3MQ=='}
2021-10-04 16:26:56,823 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxNi43ODgwNzc6Mjc0YzcxNGMzZTRjYTY5MDUyYmE1ZTcyYzNmM2FlNmU1NmRlNDY3MQ=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxN[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAxNi43ODgwNzc6Mjc0YzcxNGMzZTRjYTY5MDUyYmE1ZTcyYzNmM2FlNmU1NmRlNDY3MQ=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxNi43ODgwNzc6Mjc0YzcxNGMzZTRjYTY5MDUyYmE1ZTcyYzNmM2FlNmU1NmRlNDY3MQ=='}
2021-10-04 16:26:56,869 - [test_login05.py - line:58] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:26:56,915 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxNi44NzU4NDI4OjMxYjVkNWIzY2RmMmM3NzZjMWE2MjJjNWIwYjAxNTdiODc2MzI0Mzk='}
2021-10-04 16:26:56,915 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxNi44NzU4NDI4OjMxYjVkNWIzY2RmMmM3NzZjMWE2MjJjNWIwYjAxNTdiODc2MzI0Mzk='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxN[64 chars]zk='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAxNi44NzU4NDI4OjMxYjVkNWIzY2RmMmM3NzZjMWE2MjJjNWIwYjAxNTdiODc2MzI0Mzk='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxNi44NzU4NDI4OjMxYjVkNWIzY2RmMmM3NzZjMWE2MjJjNWIwYjAxNTdiODc2MzI0Mzk='}
2021-10-04 16:26:56,959 - [test_login05.py - line:58] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:26:57,004 - [test_login05.py - line:58] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:26:57,044 - [test_login05.py - line:58] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:26:57,088 - [test_login05.py - line:58] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:26:57,131 - [test_login05.py - line:58] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:26:59,265 - [test_login05.py - line:58] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:26:59,305 - [test_login05.py - line:58] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:26:59,347 - [test_login05.py - line:58] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:26:59,389 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxOS4zNTQyMTQ6MWRhNWE1YTg2NWIwMTFiYTg4ZjNlN2VlY2ExZDVhYjc4YWJkMDg0Yg=='}
2021-10-04 16:26:59,389 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxOS4zNTQyMTQ6MWRhNWE1YTg2NWIwMTFiYTg4ZjNlN2VlY2ExZDVhYjc4YWJkMDg0Yg=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxO[64 chars]g=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAxOS4zNTQyMTQ6MWRhNWE1YTg2NWIwMTFiYTg4ZjNlN2VlY2ExZDVhYjc4YWJkMDg0Yg=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxOS4zNTQyMTQ6MWRhNWE1YTg2NWIwMTFiYTg4ZjNlN2VlY2ExZDVhYjc4YWJkMDg0Yg=='}
2021-10-04 16:26:59,432 - [test_login05.py - line:58] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:26:59,477 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxOS40Mzg5ODg6MThlZTEyYjg3ZTlmYzczODQzMDAyMWY3YjJhMTYxYjY0OGExOWNiNQ=='}
2021-10-04 16:26:59,477 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxOS40Mzg5ODg6MThlZTEyYjg3ZTlmYzczODQzMDAyMWY3YjJhMTYxYjY0OGExOWNiNQ=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjAxO[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjAxOS40Mzg5ODg6MThlZTEyYjg3ZTlmYzczODQzMDAyMWY3YjJhMTYxYjY0OGExOWNiNQ=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjAxOS40Mzg5ODg6MThlZTEyYjg3ZTlmYzczODQzMDAyMWY3YjJhMTYxYjY0OGExOWNiNQ=='}
2021-10-04 16:26:59,521 - [test_login05.py - line:58] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:26:59,566 - [test_login05.py - line:58] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:26:59,607 - [test_login05.py - line:58] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:26:59,651 - [test_login05.py - line:58] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:26:59,694 - [test_login05.py - line:58] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:28:06,195 - [test_login05.py - line:57] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:28:06,236 - [test_login05.py - line:57] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:28:06,276 - [test_login05.py - line:57] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:28:06,318 - [test_login05.py - line:57] - INFO:测试编号4,测试用例标题:测试用户名是否区分大小写,执行成功！
2021-10-04 16:28:06,358 - [test_login05.py - line:57] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:28:06,397 - [test_login05.py - line:57] - INFO:测试编号6,测试用例标题:测试密码是否区分大小写,执行成功！
2021-10-04 16:28:06,441 - [test_login05.py - line:57] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:28:06,482 - [test_login05.py - line:57] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:28:06,523 - [test_login05.py - line:57] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:28:06,562 - [test_login05.py - line:57] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:28:06,602 - [test_login05.py - line:57] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:29:29,223 - [test_login05.py - line:57] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:29:29,263 - [test_login05.py - line:57] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:29:29,304 - [test_login05.py - line:57] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:29:29,347 - [test_login05.py - line:52] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE2OS4zMTE2ODk6YWM4OTY2MTk5ZDEwNGY4NTYwMzZjODc5MTM5ZGU3MWQ1ZmNiMzRkZQ=='}
2021-10-04 16:29:29,348 - [test_login05.py - line:53] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE2OS4zMTE2ODk6YWM4OTY2MTk5ZDEwNGY4NTYwMzZjODc5MTM5ZGU3MWQ1ZmNiMzRkZQ=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE2O[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjE2OS4zMTE2ODk6YWM4OTY2MTk5ZDEwNGY4NTYwMzZjODc5MTM5ZGU3MWQ1ZmNiMzRkZQ=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE2OS4zMTE2ODk6YWM4OTY2MTk5ZDEwNGY4NTYwMzZjODc5MTM5ZGU3MWQ1ZmNiMzRkZQ=='}
2021-10-04 16:29:29,401 - [test_login05.py - line:57] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:29:29,444 - [test_login05.py - line:52] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE2OS40MDc0MzI2OmZjMmZkMGNiZDMxMTVhZWYzMTNlM2YxNDJjNDllODM5YTg3NGVlMDY='}
2021-10-04 16:29:29,444 - [test_login05.py - line:53] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE2OS40MDc0MzI2OmZjMmZkMGNiZDMxMTVhZWYzMTNlM2YxNDJjNDllODM5YTg3NGVlMDY='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE2O[64 chars]DY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjE2OS40MDc0MzI2OmZjMmZkMGNiZDMxMTVhZWYzMTNlM2YxNDJjNDllODM5YTg3NGVlMDY='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE2OS40MDc0MzI2OmZjMmZkMGNiZDMxMTVhZWYzMTNlM2YxNDJjNDllODM5YTg3NGVlMDY='}
2021-10-04 16:29:29,501 - [test_login05.py - line:57] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:29:29,547 - [test_login05.py - line:57] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:29:29,588 - [test_login05.py - line:57] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:29:29,628 - [test_login05.py - line:57] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:29:29,672 - [test_login05.py - line:57] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:29:31,704 - [test_login05.py - line:57] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:29:31,746 - [test_login05.py - line:57] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:29:31,802 - [test_login05.py - line:57] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:29:31,844 - [test_login05.py - line:52] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE3MS44MTAwMDg6ZmE4ZjA5YmVjOTU1Njg3MzhiNDNiNGRlNzRjODIwM2JkMWNjZWM4OQ=='}
2021-10-04 16:29:31,844 - [test_login05.py - line:53] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE3MS44MTAwMDg6ZmE4ZjA5YmVjOTU1Njg3MzhiNDNiNGRlNzRjODIwM2JkMWNjZWM4OQ=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE3M[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjE3MS44MTAwMDg6ZmE4ZjA5YmVjOTU1Njg3MzhiNDNiNGRlNzRjODIwM2JkMWNjZWM4OQ=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE3MS44MTAwMDg6ZmE4ZjA5YmVjOTU1Njg3MzhiNDNiNGRlNzRjODIwM2JkMWNjZWM4OQ=='}
2021-10-04 16:29:31,889 - [test_login05.py - line:57] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:29:31,933 - [test_login05.py - line:52] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE3MS44OTY3NzQzOjI2MzI0YjYwY2VhZDgxMWY3NTdjMTg5ZWRmMmVhOWQwOWUyMzAzNDE='}
2021-10-04 16:29:31,933 - [test_login05.py - line:53] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE3MS44OTY3NzQzOjI2MzI0YjYwY2VhZDgxMWY3NTdjMTg5ZWRmMmVhOWQwOWUyMzAzNDE='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE3M[64 chars]DE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjE3MS44OTY3NzQzOjI2MzI0YjYwY2VhZDgxMWY3NTdjMTg5ZWRmMmVhOWQwOWUyMzAzNDE='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE3MS44OTY3NzQzOjI2MzI0YjYwY2VhZDgxMWY3NTdjMTg5ZWRmMmVhOWQwOWUyMzAzNDE='}
2021-10-04 16:29:31,983 - [test_login05.py - line:57] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:29:32,026 - [test_login05.py - line:57] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:29:32,068 - [test_login05.py - line:57] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:29:32,110 - [test_login05.py - line:57] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:29:32,150 - [test_login05.py - line:57] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:29:40,552 - [test_login05.py - line:57] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:29:40,592 - [test_login05.py - line:57] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:29:40,633 - [test_login05.py - line:57] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:29:40,677 - [test_login05.py - line:52] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE4MC42NDAzODkyOjNmMTg0MjA2NDNlMjYwYzFkNDg0YjI5ZDg0NTg5MWY3YmE1ZTA1ZDM='}
2021-10-04 16:29:40,677 - [test_login05.py - line:53] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE4MC42NDAzODkyOjNmMTg0MjA2NDNlMjYwYzFkNDg0YjI5ZDg0NTg5MWY3YmE1ZTA1ZDM='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE4M[64 chars]DM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjE4MC42NDAzODkyOjNmMTg0MjA2NDNlMjYwYzFkNDg0YjI5ZDg0NTg5MWY3YmE1ZTA1ZDM='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE4MC42NDAzODkyOjNmMTg0MjA2NDNlMjYwYzFkNDg0YjI5ZDg0NTg5MWY3YmE1ZTA1ZDM='}
2021-10-04 16:29:40,720 - [test_login05.py - line:57] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:29:40,764 - [test_login05.py - line:52] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE4MC43MjYxNTk2Ojk1NjdjNTllMjU4NDQwOGM1Nzg5N2VkMDM4ZDhkZmE0ZGEwMzY2Nzk='}
2021-10-04 16:29:40,764 - [test_login05.py - line:53] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE4MC43MjYxNTk2Ojk1NjdjNTllMjU4NDQwOGM1Nzg5N2VkMDM4ZDhkZmE0ZGEwMzY2Nzk='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE4M[64 chars]zk='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjE4MC43MjYxNTk2Ojk1NjdjNTllMjU4NDQwOGM1Nzg5N2VkMDM4ZDhkZmE0ZGEwMzY2Nzk='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE4MC43MjYxNTk2Ojk1NjdjNTllMjU4NDQwOGM1Nzg5N2VkMDM4ZDhkZmE0ZGEwMzY2Nzk='}
2021-10-04 16:29:40,807 - [test_login05.py - line:57] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:29:40,856 - [test_login05.py - line:57] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:29:40,907 - [test_login05.py - line:57] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:29:40,950 - [test_login05.py - line:57] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:29:40,993 - [test_login05.py - line:57] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:29:43,672 - [test_login05.py - line:57] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:29:43,713 - [test_login05.py - line:57] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:29:43,757 - [test_login05.py - line:57] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:29:43,797 - [test_login05.py - line:52] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE4My43NjMwMzcyOmI0MWMzMmM3NTY4YTY0NmUyYThjODBkZGNhNmY5Zjc1ZDAyNTBjYjU='}
2021-10-04 16:29:43,797 - [test_login05.py - line:53] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE4My43NjMwMzcyOmI0MWMzMmM3NTY4YTY0NmUyYThjODBkZGNhNmY5Zjc1ZDAyNTBjYjU='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE4M[64 chars]jU='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjE4My43NjMwMzcyOmI0MWMzMmM3NTY4YTY0NmUyYThjODBkZGNhNmY5Zjc1ZDAyNTBjYjU='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE4My43NjMwMzcyOmI0MWMzMmM3NTY4YTY0NmUyYThjODBkZGNhNmY5Zjc1ZDAyNTBjYjU='}
2021-10-04 16:29:43,840 - [test_login05.py - line:57] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:29:43,883 - [test_login05.py - line:52] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE4My44NDc4MTAzOmMxZGNmNTUzYWMzMmEzNmRjMDBmNThlOTBiNGQwMmI5MjZhNGE4Zjk='}
2021-10-04 16:29:43,884 - [test_login05.py - line:53] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE4My44NDc4MTAzOmMxZGNmNTUzYWMzMmEzNmRjMDBmNThlOTBiNGQwMmI5MjZhNGE4Zjk='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE4M[64 chars]jk='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjE4My44NDc4MTAzOmMxZGNmNTUzYWMzMmEzNmRjMDBmNThlOTBiNGQwMmI5MjZhNGE4Zjk='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE4My44NDc4MTAzOmMxZGNmNTUzYWMzMmEzNmRjMDBmNThlOTBiNGQwMmI5MjZhNGE4Zjk='}
2021-10-04 16:29:43,930 - [test_login05.py - line:57] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:29:43,976 - [test_login05.py - line:57] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:29:44,018 - [test_login05.py - line:57] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:29:44,059 - [test_login05.py - line:57] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:29:44,102 - [test_login05.py - line:57] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:29:57,038 - [test_login05.py - line:52] - ERROR:测试编号1,测试用例标题:正常登录流程,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:29:57,038 - [test_login05.py - line:53] - ERROR:'登录成功' not found in "{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 47, in test_login
    self.assertIn(case.expect, str(res_body))
  File "D:\tools\python\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}"
2021-10-04 16:29:57,082 - [test_login05.py - line:57] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:29:57,125 - [test_login05.py - line:57] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:29:57,168 - [test_login05.py - line:52] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE5Ny4xMzEyODI6NjFhNjJjMDM0MWE0NWJiOWM2ODVmNTM0ZTAwMWNlZTBmYzkyMDE1OQ=='}
2021-10-04 16:29:57,169 - [test_login05.py - line:53] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE5Ny4xMzEyODI6NjFhNjJjMDM0MWE0NWJiOWM2ODVmNTM0ZTAwMWNlZTBmYzkyMDE1OQ=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjE5N[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjE5Ny4xMzEyODI6NjFhNjJjMDM0MWE0NWJiOWM2ODVmNTM0ZTAwMWNlZTBmYzkyMDE1OQ=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjE5Ny4xMzEyODI6NjFhNjJjMDM0MWE0NWJiOWM2ODVmNTM0ZTAwMWNlZTBmYzkyMDE1OQ=='}
2021-10-04 16:29:57,213 - [test_login05.py - line:57] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:29:57,255 - [test_login05.py - line:52] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:29:57,255 - [test_login05.py - line:53] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:29:57,302 - [test_login05.py - line:52] - ERROR:测试编号7,测试用例标题:测试错误密码的场景,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:29:57,302 - [test_login05.py - line:53] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:29:57,346 - [test_login05.py - line:57] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:29:57,389 - [test_login05.py - line:57] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:29:57,431 - [test_login05.py - line:52] - ERROR:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:29:57,431 - [test_login05.py - line:53] - ERROR: :: {'code': 1005, 'msg': 'typeId类型格式不正确'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1005, 'msg': 'typeId类型格式不正确'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1005, 'msg': 'typeId类型格式不正确'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1005, 'msg': 'typeId类型格式不正确'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:29:57,474 - [test_login05.py - line:52] - ERROR:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:29:57,474 - [test_login05.py - line:53] - ERROR: :: {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:09,082 - [test_login05.py - line:53] - ERROR:测试编号1,测试用例标题:正常登录流程,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:09,082 - [test_login05.py - line:54] - ERROR:'登录成功' not found in "{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 48, in test_login
    self.assertIn(case.expect, str(res_body))
  File "D:\tools\python\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}"
2021-10-04 16:31:09,124 - [test_login05.py - line:58] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:31:09,168 - [test_login05.py - line:58] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:31:09,211 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI2OS4xNzQ1OTU2OmEwMTMwMzRlY2Y4ZmVhMTZkYWFjZTk0ZThjZDBjNDllNDczZDlkNzQ='}
2021-10-04 16:31:09,211 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI2OS4xNzQ1OTU2OmEwMTMwMzRlY2Y4ZmVhMTZkYWFjZTk0ZThjZDBjNDllNDczZDlkNzQ='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI2O[64 chars]zQ='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjI2OS4xNzQ1OTU2OmEwMTMwMzRlY2Y4ZmVhMTZkYWFjZTk0ZThjZDBjNDllNDczZDlkNzQ='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI2OS4xNzQ1OTU2OmEwMTMwMzRlY2Y4ZmVhMTZkYWFjZTk0ZThjZDBjNDllNDczZDlkNzQ='}
2021-10-04 16:31:09,255 - [test_login05.py - line:58] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:31:09,297 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:09,297 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:09,339 - [test_login05.py - line:53] - ERROR:测试编号7,测试用例标题:测试错误密码的场景,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:09,339 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:09,384 - [test_login05.py - line:58] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:31:09,424 - [test_login05.py - line:58] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:31:09,466 - [test_login05.py - line:53] - ERROR:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:09,466 - [test_login05.py - line:54] - ERROR: :: {'code': 1005, 'msg': 'typeId类型格式不正确'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1005, 'msg': 'typeId类型格式不正确'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1005, 'msg': 'typeId类型格式不正确'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1005, 'msg': 'typeId类型格式不正确'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:09,514 - [test_login05.py - line:53] - ERROR:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:09,514 - [test_login05.py - line:54] - ERROR: :: {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:29,415 - [test_login05.py - line:58] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:31:29,455 - [test_login05.py - line:58] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:31:29,496 - [test_login05.py - line:58] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:31:29,538 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI4OS41MDIyMjczOjk5OWU0Zjk0NWQxYzdiMDFjNmJkMmY4Yjk0OWViYjljYzNlMDgxYjM='}
2021-10-04 16:31:29,539 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI4OS41MDIyMjczOjk5OWU0Zjk0NWQxYzdiMDFjNmJkMmY4Yjk0OWViYjljYzNlMDgxYjM='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI4O[64 chars]jM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjI4OS41MDIyMjczOjk5OWU0Zjk0NWQxYzdiMDFjNmJkMmY4Yjk0OWViYjljYzNlMDgxYjM='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI4OS41MDIyMjczOjk5OWU0Zjk0NWQxYzdiMDFjNmJkMmY4Yjk0OWViYjljYzNlMDgxYjM='}
2021-10-04 16:31:29,583 - [test_login05.py - line:58] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:31:29,628 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI4OS41OTA5OTE1OjIzNDU4YjU4N2I2N2E1MDAxZTNhMTM4YTg4Y2Y2N2ZmMmRkZWNjZWI='}
2021-10-04 16:31:29,628 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI4OS41OTA5OTE1OjIzNDU4YjU4N2I2N2E1MDAxZTNhMTM4YTg4Y2Y2N2ZmMmRkZWNjZWI='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI4O[64 chars]WI='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjI4OS41OTA5OTE1OjIzNDU4YjU4N2I2N2E1MDAxZTNhMTM4YTg4Y2Y2N2ZmMmRkZWNjZWI='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI4OS41OTA5OTE1OjIzNDU4YjU4N2I2N2E1MDAxZTNhMTM4YTg4Y2Y2N2ZmMmRkZWNjZWI='}
2021-10-04 16:31:29,678 - [test_login05.py - line:58] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:31:29,718 - [test_login05.py - line:58] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:31:29,760 - [test_login05.py - line:58] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:31:29,802 - [test_login05.py - line:58] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:31:29,849 - [test_login05.py - line:58] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:31:36,338 - [test_login05.py - line:58] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:31:36,381 - [test_login05.py - line:58] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:31:36,422 - [test_login05.py - line:58] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:31:36,465 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI5Ni40Mjg3MDE5OjBlMWU0YjNjMTJiZTIzZWJhYmUxNWI1MTU4ZjYyMjdjZTU4MGM5ZTQ='}
2021-10-04 16:31:36,465 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI5Ni40Mjg3MDE5OjBlMWU0YjNjMTJiZTIzZWJhYmUxNWI1MTU4ZjYyMjdjZTU4MGM5ZTQ='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI5N[64 chars]TQ='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjI5Ni40Mjg3MDE5OjBlMWU0YjNjMTJiZTIzZWJhYmUxNWI1MTU4ZjYyMjdjZTU4MGM5ZTQ='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI5Ni40Mjg3MDE5OjBlMWU0YjNjMTJiZTIzZWJhYmUxNWI1MTU4ZjYyMjdjZTU4MGM5ZTQ='}
2021-10-04 16:31:36,507 - [test_login05.py - line:58] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:31:36,553 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI5Ni41MTY0Njc6ZTY4OGJiYzY5MWE0MjI2ODNiMDE4YjY2NGZlNjI2YmM5YzJkYjZhNA=='}
2021-10-04 16:31:36,553 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI5Ni41MTY0Njc6ZTY4OGJiYzY5MWE0MjI2ODNiMDE4YjY2NGZlNjI2YmM5YzJkYjZhNA=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI5N[64 chars]A=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjI5Ni41MTY0Njc6ZTY4OGJiYzY5MWE0MjI2ODNiMDE4YjY2NGZlNjI2YmM5YzJkYjZhNA=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI5Ni41MTY0Njc6ZTY4OGJiYzY5MWE0MjI2ODNiMDE4YjY2NGZlNjI2YmM5YzJkYjZhNA=='}
2021-10-04 16:31:36,601 - [test_login05.py - line:58] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:31:36,643 - [test_login05.py - line:58] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:31:36,686 - [test_login05.py - line:58] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:31:36,726 - [test_login05.py - line:58] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:31:36,774 - [test_login05.py - line:58] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:31:39,000 - [test_login05.py - line:58] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:31:39,041 - [test_login05.py - line:58] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:31:39,083 - [test_login05.py - line:58] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:31:39,125 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI5OS4wODk1ODU6YzEzYmUxNmM0MmNiMjRiNDQwNTRiNWQ2ZTg2ZWRiN2QyOGUxZjc2Mw=='}
2021-10-04 16:31:39,125 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI5OS4wODk1ODU6YzEzYmUxNmM0MmNiMjRiNDQwNTRiNWQ2ZTg2ZWRiN2QyOGUxZjc2Mw=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI5O[64 chars]w=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjI5OS4wODk1ODU6YzEzYmUxNmM0MmNiMjRiNDQwNTRiNWQ2ZTg2ZWRiN2QyOGUxZjc2Mw=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI5OS4wODk1ODU6YzEzYmUxNmM0MmNiMjRiNDQwNTRiNWQ2ZTg2ZWRiN2QyOGUxZjc2Mw=='}
2021-10-04 16:31:39,188 - [test_login05.py - line:58] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:31:39,236 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI5OS4xOTUzMDI3OjQ3NDdiOGQ2NTczNGY0YWUwZGUzN2VjNjUxZWFlOTIwNWZmZGE0MzA='}
2021-10-04 16:31:39,237 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI5OS4xOTUzMDI3OjQ3NDdiOGQ2NTczNGY0YWUwZGUzN2VjNjUxZWFlOTIwNWZmZGE0MzA='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjI5O[64 chars]zA='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjI5OS4xOTUzMDI3OjQ3NDdiOGQ2NTczNGY0YWUwZGUzN2VjNjUxZWFlOTIwNWZmZGE0MzA='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjI5OS4xOTUzMDI3OjQ3NDdiOGQ2NTczNGY0YWUwZGUzN2VjNjUxZWFlOTIwNWZmZGE0MzA='}
2021-10-04 16:31:39,283 - [test_login05.py - line:58] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:31:39,323 - [test_login05.py - line:58] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:31:39,364 - [test_login05.py - line:58] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:31:39,405 - [test_login05.py - line:58] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:31:39,451 - [test_login05.py - line:58] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:31:42,033 - [test_login05.py - line:58] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:31:42,075 - [test_login05.py - line:58] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:31:42,115 - [test_login05.py - line:58] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:31:42,156 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMwMi4xMjE0NzYyOjkzNmU4ZDM1MzhhMjJkYjk0OWMzOGI5MzkzOGM2MmM2MGQxMjdmMDc='}
2021-10-04 16:31:42,156 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMwMi4xMjE0NzYyOjkzNmU4ZDM1MzhhMjJkYjk0OWMzOGI5MzkzOGM2MmM2MGQxMjdmMDc='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMwM[64 chars]Dc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMwMi4xMjE0NzYyOjkzNmU4ZDM1MzhhMjJkYjk0OWMzOGI5MzkzOGM2MmM2MGQxMjdmMDc='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMwMi4xMjE0NzYyOjkzNmU4ZDM1MzhhMjJkYjk0OWMzOGI5MzkzOGM2MmM2MGQxMjdmMDc='}
2021-10-04 16:31:42,199 - [test_login05.py - line:58] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:31:42,246 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMwMi4yMDYyNDkyOmIwYTkxMGE5ZmYxYmE3ZjgxZGE3YmQ4YWM2OGFiMDY3YzI5ZmUzYTg='}
2021-10-04 16:31:42,246 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMwMi4yMDYyNDkyOmIwYTkxMGE5ZmYxYmE3ZjgxZGE3YmQ4YWM2OGFiMDY3YzI5ZmUzYTg='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMwM[64 chars]Tg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMwMi4yMDYyNDkyOmIwYTkxMGE5ZmYxYmE3ZjgxZGE3YmQ4YWM2OGFiMDY3YzI5ZmUzYTg='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMwMi4yMDYyNDkyOmIwYTkxMGE5ZmYxYmE3ZjgxZGE3YmQ4YWM2OGFiMDY3YzI5ZmUzYTg='}
2021-10-04 16:31:42,294 - [test_login05.py - line:58] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:31:42,340 - [test_login05.py - line:58] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:31:42,385 - [test_login05.py - line:58] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:31:42,425 - [test_login05.py - line:58] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:31:42,471 - [test_login05.py - line:58] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:31:45,031 - [test_login05.py - line:53] - ERROR:测试编号1,测试用例标题:正常登录流程,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:45,031 - [test_login05.py - line:54] - ERROR:'登录成功' not found in "{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}"
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 48, in test_login
    self.assertIn(case.expect, str(res_body))
  File "D:\tools\python\lib\unittest\case.py", line 1106, in assertIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: '登录成功' not found in "{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}"
2021-10-04 16:31:45,074 - [test_login05.py - line:58] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:31:45,116 - [test_login05.py - line:58] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:31:45,157 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMwNS4xMjI0NDk0OmQxMDA5Mjg3MDY0MjI5NzBkODM5ZGRjNTc3YTQ3NGJhNjlmZTU5NGQ='}
2021-10-04 16:31:45,157 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMwNS4xMjI0NDk0OmQxMDA5Mjg3MDY0MjI5NzBkODM5ZGRjNTc3YTQ3NGJhNjlmZTU5NGQ='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMwN[64 chars]GQ='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMwNS4xMjI0NDk0OmQxMDA5Mjg3MDY0MjI5NzBkODM5ZGRjNTc3YTQ3NGJhNjlmZTU5NGQ='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMwNS4xMjI0NDk0OmQxMDA5Mjg3MDY0MjI5NzBkODM5ZGRjNTc3YTQ3NGJhNjlmZTU5NGQ='}
2021-10-04 16:31:45,198 - [test_login05.py - line:58] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:31:45,243 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:45,244 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:45,289 - [test_login05.py - line:53] - ERROR:测试编号7,测试用例标题:测试错误密码的场景,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:45,289 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:45,333 - [test_login05.py - line:58] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:31:45,376 - [test_login05.py - line:58] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:31:45,421 - [test_login05.py - line:53] - ERROR:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:45,421 - [test_login05.py - line:54] - ERROR: :: {'code': 1005, 'msg': 'typeId类型格式不正确'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1005, 'msg': 'typeId类型格式不正确'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1005, 'msg': 'typeId类型格式不正确'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1005, 'msg': 'typeId类型格式不正确'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:45,466 - [test_login05.py - line:53] - ERROR:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行失败！实际结果:{'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:31:45,466 - [test_login05.py - line:54] - ERROR: :: {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
- {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'}
+ {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1006, 'msg': 'typeId类型不匹配，该入口只能为普通用户'} != {'code': 1004, 'msg': '用户名必须以字母开头，由字母和数字组成6到8位的字符串'}
2021-10-04 16:32:04,501 - [test_login05.py - line:58] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:32:04,542 - [test_login05.py - line:58] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:32:04,583 - [test_login05.py - line:58] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:32:04,624 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMyNC41ODgzODYzOjBjNzk3MDQzOTM5ZjM5NzkyNjkxOWI4OTRjZmRhZDI1NzkzMWFmNTM='}
2021-10-04 16:32:04,624 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMyNC41ODgzODYzOjBjNzk3MDQzOTM5ZjM5NzkyNjkxOWI4OTRjZmRhZDI1NzkzMWFmNTM='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMyN[64 chars]TM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMyNC41ODgzODYzOjBjNzk3MDQzOTM5ZjM5NzkyNjkxOWI4OTRjZmRhZDI1NzkzMWFmNTM='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMyNC41ODgzODYzOjBjNzk3MDQzOTM5ZjM5NzkyNjkxOWI4OTRjZmRhZDI1NzkzMWFmNTM='}
2021-10-04 16:32:04,666 - [test_login05.py - line:58] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:32:04,710 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMyNC42NzMxNTk0Ojk1ODc3NTM5OWVhZDhlMTZlYWM0ZWVmNGI0NTY4Yzk2YjkyNGNiMGQ='}
2021-10-04 16:32:04,710 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMyNC42NzMxNTk0Ojk1ODc3NTM5OWVhZDhlMTZlYWM0ZWVmNGI0NTY4Yzk2YjkyNGNiMGQ='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMyN[64 chars]GQ='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMyNC42NzMxNTk0Ojk1ODc3NTM5OWVhZDhlMTZlYWM0ZWVmNGI0NTY4Yzk2YjkyNGNiMGQ='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMyNC42NzMxNTk0Ojk1ODc3NTM5OWVhZDhlMTZlYWM0ZWVmNGI0NTY4Yzk2YjkyNGNiMGQ='}
2021-10-04 16:32:04,756 - [test_login05.py - line:58] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:32:04,797 - [test_login05.py - line:58] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:32:04,840 - [test_login05.py - line:58] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:32:04,880 - [test_login05.py - line:58] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:32:04,926 - [test_login05.py - line:58] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:32:06,580 - [test_login05.py - line:58] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:32:06,622 - [test_login05.py - line:58] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:32:06,663 - [test_login05.py - line:58] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:32:06,704 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMyNi42Njk4MTg5OmZmNzc5ZDRiMjRiODRlMTMwMzVhYzY5NTE2YjM3MzcyY2M2MTI3OTE='}
2021-10-04 16:32:06,704 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMyNi42Njk4MTg5OmZmNzc5ZDRiMjRiODRlMTMwMzVhYzY5NTE2YjM3MzcyY2M2MTI3OTE='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMyN[64 chars]TE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMyNi42Njk4MTg5OmZmNzc5ZDRiMjRiODRlMTMwMzVhYzY5NTE2YjM3MzcyY2M2MTI3OTE='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMyNi42Njk4MTg5OmZmNzc5ZDRiMjRiODRlMTMwMzVhYzY5NTE2YjM3MzcyY2M2MTI3OTE='}
2021-10-04 16:32:06,748 - [test_login05.py - line:58] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:32:06,794 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMyNi43NTQ1OTI0OmVhYTFkNWNhNjIxYmUzYWIzOGIzZjMzYjM5NGM5Y2U3NmQ3NWM0NmQ='}
2021-10-04 16:32:06,794 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMyNi43NTQ1OTI0OmVhYTFkNWNhNjIxYmUzYWIzOGIzZjMzYjM5NGM5Y2U3NmQ3NWM0NmQ='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMyN[64 chars]mQ='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMyNi43NTQ1OTI0OmVhYTFkNWNhNjIxYmUzYWIzOGIzZjMzYjM5NGM5Y2U3NmQ3NWM0NmQ='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMyNi43NTQ1OTI0OmVhYTFkNWNhNjIxYmUzYWIzOGIzZjMzYjM5NGM5Y2U3NmQ3NWM0NmQ='}
2021-10-04 16:32:06,842 - [test_login05.py - line:58] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:32:06,890 - [test_login05.py - line:58] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:32:06,930 - [test_login05.py - line:58] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:32:06,970 - [test_login05.py - line:58] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:32:07,012 - [test_login05.py - line:58] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:32:08,872 - [test_login05.py - line:58] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:32:08,912 - [test_login05.py - line:58] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:32:08,956 - [test_login05.py - line:58] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:32:08,997 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMyOC45NjM2OTE1OmYyZjUyMDc2YTJhYmJiNzA4ZWVmM2Q4OGUzODgwOTA0ODhhNzNlNTU='}
2021-10-04 16:32:08,998 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMyOC45NjM2OTE1OmYyZjUyMDc2YTJhYmJiNzA4ZWVmM2Q4OGUzODgwOTA0ODhhNzNlNTU='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMyO[64 chars]TU='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMyOC45NjM2OTE1OmYyZjUyMDc2YTJhYmJiNzA4ZWVmM2Q4OGUzODgwOTA0ODhhNzNlNTU='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMyOC45NjM2OTE1OmYyZjUyMDc2YTJhYmJiNzA4ZWVmM2Q4OGUzODgwOTA0ODhhNzNlNTU='}
2021-10-04 16:32:09,042 - [test_login05.py - line:58] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:32:09,086 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMyOS4wNDk0NTUyOjU5ZDdjZTVjNzVjMWEzN2UwMDBlNWI0ZWY2ZTdiMGVjNmMzZjgwMGM='}
2021-10-04 16:32:09,086 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMyOS4wNDk0NTUyOjU5ZDdjZTVjNzVjMWEzN2UwMDBlNWI0ZWY2ZTdiMGVjNmMzZjgwMGM='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMyO[64 chars]GM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMyOS4wNDk0NTUyOjU5ZDdjZTVjNzVjMWEzN2UwMDBlNWI0ZWY2ZTdiMGVjNmMzZjgwMGM='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMyOS4wNDk0NTUyOjU5ZDdjZTVjNzVjMWEzN2UwMDBlNWI0ZWY2ZTdiMGVjNmMzZjgwMGM='}
2021-10-04 16:32:09,136 - [test_login05.py - line:58] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:32:09,180 - [test_login05.py - line:58] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:32:09,221 - [test_login05.py - line:58] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:32:09,260 - [test_login05.py - line:58] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:32:09,302 - [test_login05.py - line:58] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:32:10,558 - [test_login05.py - line:58] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:32:10,601 - [test_login05.py - line:58] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:32:10,641 - [test_login05.py - line:58] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:32:10,686 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzMC42NDgxNzg6MDQzODA4YzNhYjEyMDkxMmM5YzcyNzdjZGZkMTAxYjg3ODY4ZDIxMA=='}
2021-10-04 16:32:10,686 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzMC42NDgxNzg6MDQzODA4YzNhYjEyMDkxMmM5YzcyNzdjZGZkMTAxYjg3ODY4ZDIxMA=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzM[64 chars]A=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMzMC42NDgxNzg6MDQzODA4YzNhYjEyMDkxMmM5YzcyNzdjZGZkMTAxYjg3ODY4ZDIxMA=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzMC42NDgxNzg6MDQzODA4YzNhYjEyMDkxMmM5YzcyNzdjZGZkMTAxYjg3ODY4ZDIxMA=='}
2021-10-04 16:32:10,727 - [test_login05.py - line:58] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:32:10,772 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzMC43MzQ5NDk0OmJlMjZkN2FmOTg4M2UyNDIxYzYwY2Y0YmM5NThmZGQ5ZmJiYmUwMWE='}
2021-10-04 16:32:10,772 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzMC43MzQ5NDk0OmJlMjZkN2FmOTg4M2UyNDIxYzYwY2Y0YmM5NThmZGQ5ZmJiYmUwMWE='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzM[64 chars]WE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMzMC43MzQ5NDk0OmJlMjZkN2FmOTg4M2UyNDIxYzYwY2Y0YmM5NThmZGQ5ZmJiYmUwMWE='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzMC43MzQ5NDk0OmJlMjZkN2FmOTg4M2UyNDIxYzYwY2Y0YmM5NThmZGQ5ZmJiYmUwMWE='}
2021-10-04 16:32:10,823 - [test_login05.py - line:58] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:32:10,869 - [test_login05.py - line:58] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:32:10,910 - [test_login05.py - line:58] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:32:10,951 - [test_login05.py - line:58] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:32:10,995 - [test_login05.py - line:58] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:32:12,578 - [test_login05.py - line:58] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:32:12,618 - [test_login05.py - line:58] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:32:12,660 - [test_login05.py - line:58] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:32:12,703 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzMi42Njg3NzQ2OjI0NGJiMTE3NGI0ZjIxZGVkY2Q5ODBkZjYzMjdjYTg3NTM0NmI3MDQ='}
2021-10-04 16:32:12,704 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzMi42Njg3NzQ2OjI0NGJiMTE3NGI0ZjIxZGVkY2Q5ODBkZjYzMjdjYTg3NTM0NmI3MDQ='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzM[64 chars]DQ='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMzMi42Njg3NzQ2OjI0NGJiMTE3NGI0ZjIxZGVkY2Q5ODBkZjYzMjdjYTg3NTM0NmI3MDQ='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzMi42Njg3NzQ2OjI0NGJiMTE3NGI0ZjIxZGVkY2Q5ODBkZjYzMjdjYTg3NTM0NmI3MDQ='}
2021-10-04 16:32:12,751 - [test_login05.py - line:58] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:32:12,799 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzMi43NTc1Mzg4OjgzNTZmN2MzM2ZkZjhmMDQ2MzE5MmMyN2Q0OGEwMzEzNmJkOWExZDY='}
2021-10-04 16:32:12,800 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzMi43NTc1Mzg4OjgzNTZmN2MzM2ZkZjhmMDQ2MzE5MmMyN2Q0OGEwMzEzNmJkOWExZDY='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzM[64 chars]DY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMzMi43NTc1Mzg4OjgzNTZmN2MzM2ZkZjhmMDQ2MzE5MmMyN2Q0OGEwMzEzNmJkOWExZDY='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzMi43NTc1Mzg4OjgzNTZmN2MzM2ZkZjhmMDQ2MzE5MmMyN2Q0OGEwMzEzNmJkOWExZDY='}
2021-10-04 16:32:12,844 - [test_login05.py - line:58] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:32:12,889 - [test_login05.py - line:58] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:32:12,931 - [test_login05.py - line:58] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:32:12,974 - [test_login05.py - line:58] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:32:13,015 - [test_login05.py - line:58] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:32:14,654 - [test_login05.py - line:58] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:32:14,694 - [test_login05.py - line:58] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:32:14,742 - [test_login05.py - line:58] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:32:14,805 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzNC43NTYxOTI0OjJhZThmYzgyNjExMTY1MzQ1NGM4Mjg4OWI5NGI4MmMxMjE5YzRjMzI='}
2021-10-04 16:32:14,805 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzNC43NTYxOTI0OjJhZThmYzgyNjExMTY1MzQ1NGM4Mjg4OWI5NGI4MmMxMjE5YzRjMzI='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzN[64 chars]zI='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMzNC43NTYxOTI0OjJhZThmYzgyNjExMTY1MzQ1NGM4Mjg4OWI5NGI4MmMxMjE5YzRjMzI='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzNC43NTYxOTI0OjJhZThmYzgyNjExMTY1MzQ1NGM4Mjg4OWI5NGI4MmMxMjE5YzRjMzI='}
2021-10-04 16:32:14,848 - [test_login05.py - line:58] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:32:14,909 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzNC44NTM5Mjk4OmQ0NGQ2ZmUwZWFmZWY2YjcyYjdkMzg3MjVmNWI3NjlmMTkyNDhiNGY='}
2021-10-04 16:32:14,909 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzNC44NTM5Mjk4OmQ0NGQ2ZmUwZWFmZWY2YjcyYjdkMzg3MjVmNWI3NjlmMTkyNDhiNGY='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzN[64 chars]GY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMzNC44NTM5Mjk4OmQ0NGQ2ZmUwZWFmZWY2YjcyYjdkMzg3MjVmNWI3NjlmMTkyNDhiNGY='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzNC44NTM5Mjk4OmQ0NGQ2ZmUwZWFmZWY2YjcyYjdkMzg3MjVmNWI3NjlmMTkyNDhiNGY='}
2021-10-04 16:32:14,952 - [test_login05.py - line:58] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:32:14,993 - [test_login05.py - line:58] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:32:15,036 - [test_login05.py - line:58] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:32:15,079 - [test_login05.py - line:58] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:32:15,122 - [test_login05.py - line:58] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-04 16:32:17,081 - [test_login05.py - line:58] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-04 16:32:17,123 - [test_login05.py - line:58] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-04 16:32:17,165 - [test_login05.py - line:58] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-04 16:32:17,208 - [test_login05.py - line:53] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzNy4xNzE3MzE6YmE0Nzk0ZmU5OGQxMGQ2YTk1YTQwM2EzZjQwZTNiZjQ0MDk5M2Y4OQ=='}
2021-10-04 16:32:17,208 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzNy4xNzE3MzE6YmE0Nzk0ZmU5OGQxMGQ2YTk1YTQwM2EzZjQwZTNiZjQ0MDk5M2Y4OQ=='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzN[64 chars]Q=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMzNy4xNzE3MzE6YmE0Nzk0ZmU5OGQxMGQ2YTk1YTQwM2EzZjQwZTNiZjQ0MDk5M2Y4OQ=='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzNy4xNzE3MzE6YmE0Nzk0ZmU5OGQxMGQ2YTk1YTQwM2EzZjQwZTNiZjQ0MDk5M2Y4OQ=='}
2021-10-04 16:32:17,250 - [test_login05.py - line:58] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-04 16:32:17,296 - [test_login05.py - line:53] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzNy4yNTc1MDE2OjlmZmI1NDBiMjY2N2VhZTg5OWJhY2M3OGRhYTgzYzM0NTBiODc1NmY='}
2021-10-04 16:32:17,296 - [test_login05.py - line:54] - ERROR: :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzNy4yNTc1MDE2OjlmZmI1NDBiMjY2N2VhZTg5OWJhY2M3OGRhYTgzYzM0NTBiODc1NmY='}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzM2NjMzN[64 chars]mY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzM2NjMzNy4yNTc1MDE2OjlmZmI1NDBiMjY2N2VhZTg5OWJhY2M3OGRhYTgzYzM0NTBiODc1NmY='}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 50, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000,
 'msg': '登录成功',
 'token': 'MTYzMzM2NjMzNy4yNTc1MDE2OjlmZmI1NDBiMjY2N2VhZTg5OWJhY2M3OGRhYTgzYzM0NTBiODc1NmY='}
2021-10-04 16:32:17,340 - [test_login05.py - line:58] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-04 16:32:17,384 - [test_login05.py - line:58] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-04 16:32:17,425 - [test_login05.py - line:58] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-04 16:32:17,466 - [test_login05.py - line:58] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-04 16:32:17,510 - [test_login05.py - line:58] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-05 09:38:08,482 - [test_business_register01.py - line:37] - INFO:测试编号1,测试用例标题:注册正常流程,执行成功!
2021-10-05 09:38:38,582 - [test_business_register01.py - line:32] - ERROR:测试编号1,测试用例标题:注册正常流程,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 09:38:38,583 - [test_business_register01.py - line:33] - ERROR: :: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1000, 'msg': '注册成功'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register01.py", line 29, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1000, 'msg': '注册成功'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 09:46:05,926 - [test_business_register02.py - line:50] - INFO:测试编号1,测试用例标题:注册正常流程,执行成功!
2021-10-05 09:46:10,122 - [test_business_register02.py - line:50] - INFO:测试编号1,测试用例标题:注册正常流程,执行成功!
2021-10-05 09:49:41,111 - [test_business_register02.py - line:54] - INFO:测试编号1,测试用例标题:注册正常流程,执行成功!
2021-10-05 09:49:45,605 - [test_business_register02.py - line:54] - INFO:测试编号1,测试用例标题:注册正常流程,执行成功!
2021-10-05 09:49:48,414 - [test_business_register02.py - line:54] - INFO:测试编号1,测试用例标题:注册正常流程,执行成功!
2021-10-05 09:49:51,199 - [test_business_register02.py - line:54] - INFO:测试编号1,测试用例标题:注册正常流程,执行成功!
2021-10-05 09:49:53,616 - [test_business_register02.py - line:54] - INFO:测试编号1,测试用例标题:注册正常流程,执行成功!
2021-10-05 16:47:29,451 - [test_business_register03.py - line:64] - INFO:测试编号1,测试用例标题:注册正常流程,执行成功!
2021-10-05 16:47:29,536 - [test_business_register03.py - line:64] - INFO:测试编号2,测试用例标题:测试性别、生日、qq、email不输入的场景,执行成功!
2021-10-05 16:47:29,621 - [test_business_register03.py - line:64] - INFO:测试编号3,测试用例标题:测试用户名有效边界值的场景,执行成功!
2021-10-05 16:47:29,709 - [test_business_register03.py - line:64] - INFO:测试编号4,测试用例标题:测试密码有效边界值的场景,执行成功!
2021-10-05 16:47:29,798 - [test_business_register03.py - line:64] - INFO:测试编号5,测试用例标题:测试qq号有效边界值的场景,执行成功!
2021-10-05 16:47:29,885 - [test_business_register03.py - line:59] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:47:29,885 - [test_business_register03.py - line:60] - ERROR: :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:47:29,971 - [test_business_register03.py - line:59] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1000, 'msg': '注册成功'}!
2021-10-05 16:47:29,971 - [test_business_register03.py - line:60] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1010, 'msg': '生日格式错误'}
?            ^           ^^^^^^

+ {'code': 1000, 'msg': '注册成功'}
?            ^           ^^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
2021-10-05 16:47:30,053 - [test_business_register03.py - line:59] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1000, 'msg': '注册成功'}!
2021-10-05 16:47:30,053 - [test_business_register03.py - line:60] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1010, 'msg': '生日格式错误'}
?            ^           ^^^^^^

+ {'code': 1000, 'msg': '注册成功'}
?            ^           ^^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
2021-10-05 16:47:30,145 - [test_business_register03.py - line:64] - INFO:测试编号9,测试用例标题:测试用户名无效边界值的场景,执行成功!
2021-10-05 16:47:30,223 - [test_business_register03.py - line:64] - INFO:测试编号10,测试用例标题:测试用户名为空的场景,执行成功!
2021-10-05 16:47:30,304 - [test_business_register03.py - line:64] - INFO:测试编号11,测试用例标题:测试用户名非字母开头的场景,执行成功!
2021-10-05 16:47:30,388 - [test_business_register03.py - line:64] - INFO:测试编号12,测试用例标题:测试用户名包含符号或者汉字的场景,执行成功!
2021-10-05 16:47:30,471 - [test_business_register03.py - line:64] - INFO:测试编号13,测试用例标题:测试用户名已存在的场景,执行成功!
2021-10-05 16:47:30,554 - [test_business_register03.py - line:64] - INFO:测试编号14,测试用例标题:测试密码无效边界值的场景,执行成功!
2021-10-05 16:47:30,634 - [test_business_register03.py - line:64] - INFO:测试编号15,测试用例标题:测试密码为空的场景,执行成功!
2021-10-05 16:47:30,715 - [test_business_register03.py - line:64] - INFO:测试编号16,测试用例标题:测试密码包含符号或者汉字的场景,执行成功!
2021-10-05 16:47:30,796 - [test_business_register03.py - line:64] - INFO:测试编号17,测试用例标题:测试确认密码大小写区分的场景,执行成功!
2021-10-05 16:47:30,878 - [test_business_register03.py - line:64] - INFO:测试编号18,测试用例标题:测试确认密码和密码不一致的场景,执行成功!
2021-10-05 16:47:30,957 - [test_business_register03.py - line:64] - INFO:测试编号19,测试用例标题:测试确认密码为空的场景,执行成功!
2021-10-05 16:47:31,040 - [test_business_register03.py - line:64] - INFO:测试编号20,测试用例标题:测试手机号为空的场景,执行成功!
2021-10-05 16:47:31,124 - [test_business_register03.py - line:64] - INFO:测试编号21,测试用例标题:测试手机号非11位的场景,执行成功!
2021-10-05 16:47:31,211 - [test_business_register03.py - line:59] - ERROR:测试编号22,测试用例标题:测试手机号已注册的场景,执行失败,实际结果为:{'code': 1000, 'msg': '注册成功'}!
2021-10-05 16:47:31,211 - [test_business_register03.py - line:60] - ERROR: :: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
2021-10-05 16:47:31,294 - [test_business_register03.py - line:64] - INFO:测试编号23,测试用例标题:测试手机号非数字的场景,执行成功!
2021-10-05 16:47:31,376 - [test_business_register03.py - line:64] - INFO:测试编号24,测试用例标题:测试性别非枚举的场景,执行成功!
2021-10-05 16:47:31,456 - [test_business_register03.py - line:64] - INFO:测试编号25,测试用例标题:测试性别男+女的场景,执行成功!
2021-10-05 16:47:31,537 - [test_business_register03.py - line:64] - INFO:测试编号26,测试用例标题:测试生日年月日不完整的场景,执行成功!
2021-10-05 16:47:31,618 - [test_business_register03.py - line:64] - INFO:测试编号27,测试用例标题:测试生日输入非数字的场景,执行成功!
2021-10-05 16:47:31,701 - [test_business_register03.py - line:64] - INFO:测试编号28,测试用例标题:测试生日输入不存在的日期的场景,执行成功!
2021-10-05 16:47:31,782 - [test_business_register03.py - line:64] - INFO:测试编号29,测试用例标题:测试QQ号码无效边界值的场景,执行成功!
2021-10-05 16:47:31,865 - [test_business_register03.py - line:64] - INFO:测试编号30,测试用例标题:测试QQ号码非数字的场景,执行成功!
2021-10-05 16:47:31,946 - [test_business_register03.py - line:64] - INFO:测试编号31,测试用例标题:测试邮箱格式错误的场景,执行成功!
2021-10-05 16:47:32,028 - [test_business_register03.py - line:64] - INFO:测试编号32,测试用例标题:测试邮箱为已注册邮箱的场景,执行成功!
2021-10-05 16:50:03,077 - [test_business_register03.py - line:64] - INFO:测试编号1,测试用例标题:注册正常流程,执行成功!
2021-10-05 16:50:03,160 - [test_business_register03.py - line:64] - INFO:测试编号2,测试用例标题:测试性别、生日、qq、email不输入的场景,执行成功!
2021-10-05 16:50:03,244 - [test_business_register03.py - line:64] - INFO:测试编号3,测试用例标题:测试用户名有效边界值的场景,执行成功!
2021-10-05 16:50:03,331 - [test_business_register03.py - line:64] - INFO:测试编号4,测试用例标题:测试密码有效边界值的场景,执行成功!
2021-10-05 16:50:03,415 - [test_business_register03.py - line:64] - INFO:测试编号5,测试用例标题:测试qq号有效边界值的场景,执行成功!
2021-10-05 16:50:03,498 - [test_business_register03.py - line:59] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:50:03,498 - [test_business_register03.py - line:60] - ERROR: :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:50:03,585 - [test_business_register03.py - line:59] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:50:03,585 - [test_business_register03.py - line:60] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:50:03,670 - [test_business_register03.py - line:59] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:50:03,670 - [test_business_register03.py - line:60] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:50:03,760 - [test_business_register03.py - line:64] - INFO:测试编号9,测试用例标题:测试用户名无效边界值的场景,执行成功!
2021-10-05 16:50:03,840 - [test_business_register03.py - line:64] - INFO:测试编号10,测试用例标题:测试用户名为空的场景,执行成功!
2021-10-05 16:50:03,946 - [test_business_register03.py - line:64] - INFO:测试编号11,测试用例标题:测试用户名非字母开头的场景,执行成功!
2021-10-05 16:50:04,065 - [test_business_register03.py - line:64] - INFO:测试编号12,测试用例标题:测试用户名包含符号或者汉字的场景,执行成功!
2021-10-05 16:50:04,162 - [test_business_register03.py - line:64] - INFO:测试编号13,测试用例标题:测试用户名已存在的场景,执行成功!
2021-10-05 16:50:04,249 - [test_business_register03.py - line:64] - INFO:测试编号14,测试用例标题:测试密码无效边界值的场景,执行成功!
2021-10-05 16:50:04,330 - [test_business_register03.py - line:64] - INFO:测试编号15,测试用例标题:测试密码为空的场景,执行成功!
2021-10-05 16:50:04,411 - [test_business_register03.py - line:64] - INFO:测试编号16,测试用例标题:测试密码包含符号或者汉字的场景,执行成功!
2021-10-05 16:50:04,494 - [test_business_register03.py - line:64] - INFO:测试编号17,测试用例标题:测试确认密码大小写区分的场景,执行成功!
2021-10-05 16:50:04,574 - [test_business_register03.py - line:64] - INFO:测试编号18,测试用例标题:测试确认密码和密码不一致的场景,执行成功!
2021-10-05 16:50:04,655 - [test_business_register03.py - line:64] - INFO:测试编号19,测试用例标题:测试确认密码为空的场景,执行成功!
2021-10-05 16:50:04,739 - [test_business_register03.py - line:64] - INFO:测试编号20,测试用例标题:测试手机号为空的场景,执行成功!
2021-10-05 16:50:04,819 - [test_business_register03.py - line:64] - INFO:测试编号21,测试用例标题:测试手机号非11位的场景,执行成功!
2021-10-05 16:50:04,904 - [test_business_register03.py - line:59] - ERROR:测试编号22,测试用例标题:测试手机号已注册的场景,执行失败,实际结果为:{'code': 1000, 'msg': '注册成功'}!
2021-10-05 16:50:04,904 - [test_business_register03.py - line:60] - ERROR: :: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
2021-10-05 16:50:04,994 - [test_business_register03.py - line:64] - INFO:测试编号23,测试用例标题:测试手机号非数字的场景,执行成功!
2021-10-05 16:50:05,076 - [test_business_register03.py - line:64] - INFO:测试编号24,测试用例标题:测试性别非枚举的场景,执行成功!
2021-10-05 16:50:05,158 - [test_business_register03.py - line:64] - INFO:测试编号25,测试用例标题:测试性别男+女的场景,执行成功!
2021-10-05 16:50:05,237 - [test_business_register03.py - line:64] - INFO:测试编号26,测试用例标题:测试生日年月日不完整的场景,执行成功!
2021-10-05 16:50:05,319 - [test_business_register03.py - line:64] - INFO:测试编号27,测试用例标题:测试生日输入非数字的场景,执行成功!
2021-10-05 16:50:05,399 - [test_business_register03.py - line:64] - INFO:测试编号28,测试用例标题:测试生日输入不存在的日期的场景,执行成功!
2021-10-05 16:50:05,479 - [test_business_register03.py - line:64] - INFO:测试编号29,测试用例标题:测试QQ号码无效边界值的场景,执行成功!
2021-10-05 16:50:05,562 - [test_business_register03.py - line:64] - INFO:测试编号30,测试用例标题:测试QQ号码非数字的场景,执行成功!
2021-10-05 16:50:05,644 - [test_business_register03.py - line:64] - INFO:测试编号31,测试用例标题:测试邮箱格式错误的场景,执行成功!
2021-10-05 16:50:05,726 - [test_business_register03.py - line:64] - INFO:测试编号32,测试用例标题:测试邮箱为已注册邮箱的场景,执行成功!
2021-10-05 16:51:57,724 - [test_business_register03.py - line:64] - INFO:测试编号1,测试用例标题:注册正常流程,执行成功!
2021-10-05 16:51:57,808 - [test_business_register03.py - line:64] - INFO:测试编号2,测试用例标题:测试性别、生日、qq、email不输入的场景,执行成功!
2021-10-05 16:51:57,894 - [test_business_register03.py - line:64] - INFO:测试编号3,测试用例标题:测试用户名有效边界值的场景,执行成功!
2021-10-05 16:51:57,979 - [test_business_register03.py - line:64] - INFO:测试编号4,测试用例标题:测试密码有效边界值的场景,执行成功!
2021-10-05 16:51:58,063 - [test_business_register03.py - line:64] - INFO:测试编号5,测试用例标题:测试qq号有效边界值的场景,执行成功!
2021-10-05 16:51:58,147 - [test_business_register03.py - line:59] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:51:58,147 - [test_business_register03.py - line:60] - ERROR: :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:51:58,232 - [test_business_register03.py - line:59] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:51:58,232 - [test_business_register03.py - line:60] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:51:58,315 - [test_business_register03.py - line:59] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:51:58,316 - [test_business_register03.py - line:60] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:51:58,406 - [test_business_register03.py - line:64] - INFO:测试编号9,测试用例标题:测试用户名无效边界值的场景,执行成功!
2021-10-05 16:51:58,486 - [test_business_register03.py - line:64] - INFO:测试编号10,测试用例标题:测试用户名为空的场景,执行成功!
2021-10-05 16:51:58,566 - [test_business_register03.py - line:64] - INFO:测试编号11,测试用例标题:测试用户名非字母开头的场景,执行成功!
2021-10-05 16:51:58,646 - [test_business_register03.py - line:64] - INFO:测试编号12,测试用例标题:测试用户名包含符号或者汉字的场景,执行成功!
2021-10-05 16:51:58,733 - [test_business_register03.py - line:64] - INFO:测试编号13,测试用例标题:测试用户名已存在的场景,执行成功!
2021-10-05 16:51:58,813 - [test_business_register03.py - line:64] - INFO:测试编号14,测试用例标题:测试密码无效边界值的场景,执行成功!
2021-10-05 16:51:58,892 - [test_business_register03.py - line:64] - INFO:测试编号15,测试用例标题:测试密码为空的场景,执行成功!
2021-10-05 16:51:58,972 - [test_business_register03.py - line:64] - INFO:测试编号16,测试用例标题:测试密码包含符号或者汉字的场景,执行成功!
2021-10-05 16:51:59,054 - [test_business_register03.py - line:64] - INFO:测试编号17,测试用例标题:测试确认密码大小写区分的场景,执行成功!
2021-10-05 16:51:59,137 - [test_business_register03.py - line:64] - INFO:测试编号18,测试用例标题:测试确认密码和密码不一致的场景,执行成功!
2021-10-05 16:51:59,219 - [test_business_register03.py - line:64] - INFO:测试编号19,测试用例标题:测试确认密码为空的场景,执行成功!
2021-10-05 16:51:59,299 - [test_business_register03.py - line:64] - INFO:测试编号20,测试用例标题:测试手机号为空的场景,执行成功!
2021-10-05 16:51:59,383 - [test_business_register03.py - line:64] - INFO:测试编号21,测试用例标题:测试手机号非11位的场景,执行成功!
2021-10-05 16:51:59,468 - [test_business_register03.py - line:59] - ERROR:测试编号22,测试用例标题:测试手机号已注册的场景,执行失败,实际结果为:{'code': 1000, 'msg': '注册成功'}!
2021-10-05 16:51:59,468 - [test_business_register03.py - line:60] - ERROR: :: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
2021-10-05 16:51:59,552 - [test_business_register03.py - line:64] - INFO:测试编号23,测试用例标题:测试手机号非数字的场景,执行成功!
2021-10-05 16:51:59,634 - [test_business_register03.py - line:64] - INFO:测试编号24,测试用例标题:测试性别非枚举的场景,执行成功!
2021-10-05 16:51:59,714 - [test_business_register03.py - line:64] - INFO:测试编号25,测试用例标题:测试性别男+女的场景,执行成功!
2021-10-05 16:51:59,797 - [test_business_register03.py - line:64] - INFO:测试编号26,测试用例标题:测试生日年月日不完整的场景,执行成功!
2021-10-05 16:51:59,879 - [test_business_register03.py - line:64] - INFO:测试编号27,测试用例标题:测试生日输入非数字的场景,执行成功!
2021-10-05 16:51:59,961 - [test_business_register03.py - line:64] - INFO:测试编号28,测试用例标题:测试生日输入不存在的日期的场景,执行成功!
2021-10-05 16:52:00,042 - [test_business_register03.py - line:64] - INFO:测试编号29,测试用例标题:测试QQ号码无效边界值的场景,执行成功!
2021-10-05 16:52:00,125 - [test_business_register03.py - line:64] - INFO:测试编号30,测试用例标题:测试QQ号码非数字的场景,执行成功!
2021-10-05 16:52:00,207 - [test_business_register03.py - line:64] - INFO:测试编号31,测试用例标题:测试邮箱格式错误的场景,执行成功!
2021-10-05 16:52:00,290 - [test_business_register03.py - line:64] - INFO:测试编号32,测试用例标题:测试邮箱为已注册邮箱的场景,执行成功!
2021-10-05 16:52:24,250 - [test_business_register03.py - line:65] - INFO:测试编号1,测试用例标题:注册正常流程,执行成功!
2021-10-05 16:52:24,337 - [test_business_register03.py - line:65] - INFO:测试编号2,测试用例标题:测试性别、生日、qq、email不输入的场景,执行成功!
2021-10-05 16:52:24,422 - [test_business_register03.py - line:65] - INFO:测试编号3,测试用例标题:测试用户名有效边界值的场景,执行成功!
2021-10-05 16:52:24,509 - [test_business_register03.py - line:65] - INFO:测试编号4,测试用例标题:测试密码有效边界值的场景,执行成功!
2021-10-05 16:52:24,593 - [test_business_register03.py - line:65] - INFO:测试编号5,测试用例标题:测试qq号有效边界值的场景,执行成功!
2021-10-05 16:52:24,679 - [test_business_register03.py - line:60] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:52:24,680 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:52:24,763 - [test_business_register03.py - line:60] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:52:24,764 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:52:24,847 - [test_business_register03.py - line:60] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:52:24,847 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:52:24,939 - [test_business_register03.py - line:65] - INFO:测试编号9,测试用例标题:测试用户名无效边界值的场景,执行成功!
2021-10-05 16:52:25,018 - [test_business_register03.py - line:65] - INFO:测试编号10,测试用例标题:测试用户名为空的场景,执行成功!
2021-10-05 16:52:25,098 - [test_business_register03.py - line:65] - INFO:测试编号11,测试用例标题:测试用户名非字母开头的场景,执行成功!
2021-10-05 16:52:25,176 - [test_business_register03.py - line:65] - INFO:测试编号12,测试用例标题:测试用户名包含符号或者汉字的场景,执行成功!
2021-10-05 16:52:25,260 - [test_business_register03.py - line:65] - INFO:测试编号13,测试用例标题:测试用户名已存在的场景,执行成功!
2021-10-05 16:52:25,342 - [test_business_register03.py - line:65] - INFO:测试编号14,测试用例标题:测试密码无效边界值的场景,执行成功!
2021-10-05 16:52:25,428 - [test_business_register03.py - line:65] - INFO:测试编号15,测试用例标题:测试密码为空的场景,执行成功!
2021-10-05 16:52:25,511 - [test_business_register03.py - line:65] - INFO:测试编号16,测试用例标题:测试密码包含符号或者汉字的场景,执行成功!
2021-10-05 16:52:25,593 - [test_business_register03.py - line:65] - INFO:测试编号17,测试用例标题:测试确认密码大小写区分的场景,执行成功!
2021-10-05 16:52:25,675 - [test_business_register03.py - line:65] - INFO:测试编号18,测试用例标题:测试确认密码和密码不一致的场景,执行成功!
2021-10-05 16:52:25,756 - [test_business_register03.py - line:65] - INFO:测试编号19,测试用例标题:测试确认密码为空的场景,执行成功!
2021-10-05 16:52:25,839 - [test_business_register03.py - line:65] - INFO:测试编号20,测试用例标题:测试手机号为空的场景,执行成功!
2021-10-05 16:52:25,923 - [test_business_register03.py - line:65] - INFO:测试编号21,测试用例标题:测试手机号非11位的场景,执行成功!
2021-10-05 16:52:26,011 - [test_business_register03.py - line:60] - ERROR:测试编号22,测试用例标题:测试手机号已注册的场景,执行失败,实际结果为:{'code': 1000, 'msg': '注册成功'}!
2021-10-05 16:52:26,011 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
+ {'code': 1000, 'msg': '注册成功'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'} != {'code': 1000, 'msg': '注册成功'}
2021-10-05 16:52:26,098 - [test_business_register03.py - line:65] - INFO:测试编号23,测试用例标题:测试手机号非数字的场景,执行成功!
2021-10-05 16:52:26,181 - [test_business_register03.py - line:65] - INFO:测试编号24,测试用例标题:测试性别非枚举的场景,执行成功!
2021-10-05 16:52:26,261 - [test_business_register03.py - line:65] - INFO:测试编号25,测试用例标题:测试性别男+女的场景,执行成功!
2021-10-05 16:52:26,343 - [test_business_register03.py - line:65] - INFO:测试编号26,测试用例标题:测试生日年月日不完整的场景,执行成功!
2021-10-05 16:52:26,425 - [test_business_register03.py - line:65] - INFO:测试编号27,测试用例标题:测试生日输入非数字的场景,执行成功!
2021-10-05 16:52:26,515 - [test_business_register03.py - line:65] - INFO:测试编号28,测试用例标题:测试生日输入不存在的日期的场景,执行成功!
2021-10-05 16:52:26,596 - [test_business_register03.py - line:65] - INFO:测试编号29,测试用例标题:测试QQ号码无效边界值的场景,执行成功!
2021-10-05 16:52:26,679 - [test_business_register03.py - line:65] - INFO:测试编号30,测试用例标题:测试QQ号码非数字的场景,执行成功!
2021-10-05 16:52:26,767 - [test_business_register03.py - line:65] - INFO:测试编号31,测试用例标题:测试邮箱格式错误的场景,执行成功!
2021-10-05 16:52:26,851 - [test_business_register03.py - line:65] - INFO:测试编号32,测试用例标题:测试邮箱为已注册邮箱的场景,执行成功!
2021-10-05 16:53:50,883 - [test_business_register03.py - line:65] - INFO:测试编号1,测试用例标题:注册正常流程,执行成功!
2021-10-05 16:53:50,968 - [test_business_register03.py - line:65] - INFO:测试编号2,测试用例标题:测试性别、生日、qq、email不输入的场景,执行成功!
2021-10-05 16:53:51,053 - [test_business_register03.py - line:65] - INFO:测试编号3,测试用例标题:测试用户名有效边界值的场景,执行成功!
2021-10-05 16:53:51,139 - [test_business_register03.py - line:65] - INFO:测试编号4,测试用例标题:测试密码有效边界值的场景,执行成功!
2021-10-05 16:53:51,220 - [test_business_register03.py - line:65] - INFO:测试编号5,测试用例标题:测试qq号有效边界值的场景,执行成功!
2021-10-05 16:53:51,304 - [test_business_register03.py - line:60] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:53:51,304 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:53:51,393 - [test_business_register03.py - line:60] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:53:51,394 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:53:51,478 - [test_business_register03.py - line:60] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:53:51,478 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:53:51,568 - [test_business_register03.py - line:65] - INFO:测试编号9,测试用例标题:测试用户名无效边界值的场景,执行成功!
2021-10-05 16:53:51,649 - [test_business_register03.py - line:65] - INFO:测试编号10,测试用例标题:测试用户名为空的场景,执行成功!
2021-10-05 16:53:51,732 - [test_business_register03.py - line:65] - INFO:测试编号11,测试用例标题:测试用户名非字母开头的场景,执行成功!
2021-10-05 16:53:51,817 - [test_business_register03.py - line:65] - INFO:测试编号12,测试用例标题:测试用户名包含符号或者汉字的场景,执行成功!
2021-10-05 16:53:51,901 - [test_business_register03.py - line:65] - INFO:测试编号13,测试用例标题:测试用户名已存在的场景,执行成功!
2021-10-05 16:53:51,980 - [test_business_register03.py - line:65] - INFO:测试编号14,测试用例标题:测试密码无效边界值的场景,执行成功!
2021-10-05 16:53:52,062 - [test_business_register03.py - line:65] - INFO:测试编号15,测试用例标题:测试密码为空的场景,执行成功!
2021-10-05 16:53:52,142 - [test_business_register03.py - line:65] - INFO:测试编号16,测试用例标题:测试密码包含符号或者汉字的场景,执行成功!
2021-10-05 16:53:52,222 - [test_business_register03.py - line:65] - INFO:测试编号17,测试用例标题:测试确认密码大小写区分的场景,执行成功!
2021-10-05 16:53:52,308 - [test_business_register03.py - line:65] - INFO:测试编号18,测试用例标题:测试确认密码和密码不一致的场景,执行成功!
2021-10-05 16:53:52,389 - [test_business_register03.py - line:65] - INFO:测试编号19,测试用例标题:测试确认密码为空的场景,执行成功!
2021-10-05 16:53:52,470 - [test_business_register03.py - line:65] - INFO:测试编号20,测试用例标题:测试手机号为空的场景,执行成功!
2021-10-05 16:53:52,552 - [test_business_register03.py - line:65] - INFO:测试编号21,测试用例标题:测试手机号非11位的场景,执行成功!
2021-10-05 16:53:52,636 - [test_business_register03.py - line:65] - INFO:测试编号22,测试用例标题:测试手机号已注册的场景,执行成功!
2021-10-05 16:53:52,719 - [test_business_register03.py - line:65] - INFO:测试编号23,测试用例标题:测试手机号非数字的场景,执行成功!
2021-10-05 16:53:52,803 - [test_business_register03.py - line:65] - INFO:测试编号24,测试用例标题:测试性别非枚举的场景,执行成功!
2021-10-05 16:53:52,889 - [test_business_register03.py - line:65] - INFO:测试编号25,测试用例标题:测试性别男+女的场景,执行成功!
2021-10-05 16:53:52,973 - [test_business_register03.py - line:65] - INFO:测试编号26,测试用例标题:测试生日年月日不完整的场景,执行成功!
2021-10-05 16:53:53,051 - [test_business_register03.py - line:65] - INFO:测试编号27,测试用例标题:测试生日输入非数字的场景,执行成功!
2021-10-05 16:53:53,132 - [test_business_register03.py - line:65] - INFO:测试编号28,测试用例标题:测试生日输入不存在的日期的场景,执行成功!
2021-10-05 16:53:53,213 - [test_business_register03.py - line:65] - INFO:测试编号29,测试用例标题:测试QQ号码无效边界值的场景,执行成功!
2021-10-05 16:53:53,296 - [test_business_register03.py - line:65] - INFO:测试编号30,测试用例标题:测试QQ号码非数字的场景,执行成功!
2021-10-05 16:53:53,379 - [test_business_register03.py - line:65] - INFO:测试编号31,测试用例标题:测试邮箱格式错误的场景,执行成功!
2021-10-05 16:53:53,461 - [test_business_register03.py - line:65] - INFO:测试编号32,测试用例标题:测试邮箱为已注册邮箱的场景,执行成功!
2021-10-05 16:54:10,545 - [test_business_register03.py - line:65] - INFO:测试编号1,测试用例标题:注册正常流程,执行成功!
2021-10-05 16:54:10,632 - [test_business_register03.py - line:65] - INFO:测试编号2,测试用例标题:测试性别、生日、qq、email不输入的场景,执行成功!
2021-10-05 16:54:10,719 - [test_business_register03.py - line:65] - INFO:测试编号3,测试用例标题:测试用户名有效边界值的场景,执行成功!
2021-10-05 16:54:10,806 - [test_business_register03.py - line:65] - INFO:测试编号4,测试用例标题:测试密码有效边界值的场景,执行成功!
2021-10-05 16:54:10,892 - [test_business_register03.py - line:65] - INFO:测试编号5,测试用例标题:测试qq号有效边界值的场景,执行成功!
2021-10-05 16:54:10,979 - [test_business_register03.py - line:60] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:54:10,980 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:54:11,065 - [test_business_register03.py - line:60] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:54:11,065 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:54:11,149 - [test_business_register03.py - line:60] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:54:11,149 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:54:11,238 - [test_business_register03.py - line:65] - INFO:测试编号9,测试用例标题:测试用户名无效边界值的场景,执行成功!
2021-10-05 16:54:11,331 - [test_business_register03.py - line:65] - INFO:测试编号10,测试用例标题:测试用户名为空的场景,执行成功!
2021-10-05 16:54:11,412 - [test_business_register03.py - line:65] - INFO:测试编号11,测试用例标题:测试用户名非字母开头的场景,执行成功!
2021-10-05 16:54:11,495 - [test_business_register03.py - line:65] - INFO:测试编号12,测试用例标题:测试用户名包含符号或者汉字的场景,执行成功!
2021-10-05 16:54:11,581 - [test_business_register03.py - line:65] - INFO:测试编号13,测试用例标题:测试用户名已存在的场景,执行成功!
2021-10-05 16:54:11,663 - [test_business_register03.py - line:65] - INFO:测试编号14,测试用例标题:测试密码无效边界值的场景,执行成功!
2021-10-05 16:54:11,742 - [test_business_register03.py - line:65] - INFO:测试编号15,测试用例标题:测试密码为空的场景,执行成功!
2021-10-05 16:54:11,823 - [test_business_register03.py - line:65] - INFO:测试编号16,测试用例标题:测试密码包含符号或者汉字的场景,执行成功!
2021-10-05 16:54:11,905 - [test_business_register03.py - line:65] - INFO:测试编号17,测试用例标题:测试确认密码大小写区分的场景,执行成功!
2021-10-05 16:54:11,987 - [test_business_register03.py - line:65] - INFO:测试编号18,测试用例标题:测试确认密码和密码不一致的场景,执行成功!
2021-10-05 16:54:12,070 - [test_business_register03.py - line:65] - INFO:测试编号19,测试用例标题:测试确认密码为空的场景,执行成功!
2021-10-05 16:54:12,151 - [test_business_register03.py - line:65] - INFO:测试编号20,测试用例标题:测试手机号为空的场景,执行成功!
2021-10-05 16:54:12,233 - [test_business_register03.py - line:65] - INFO:测试编号21,测试用例标题:测试手机号非11位的场景,执行成功!
2021-10-05 16:54:12,317 - [test_business_register03.py - line:65] - INFO:测试编号22,测试用例标题:测试手机号已注册的场景,执行成功!
2021-10-05 16:54:12,399 - [test_business_register03.py - line:65] - INFO:测试编号23,测试用例标题:测试手机号非数字的场景,执行成功!
2021-10-05 16:54:12,481 - [test_business_register03.py - line:65] - INFO:测试编号24,测试用例标题:测试性别非枚举的场景,执行成功!
2021-10-05 16:54:12,561 - [test_business_register03.py - line:65] - INFO:测试编号25,测试用例标题:测试性别男+女的场景,执行成功!
2021-10-05 16:54:12,644 - [test_business_register03.py - line:65] - INFO:测试编号26,测试用例标题:测试生日年月日不完整的场景,执行成功!
2021-10-05 16:54:12,726 - [test_business_register03.py - line:65] - INFO:测试编号27,测试用例标题:测试生日输入非数字的场景,执行成功!
2021-10-05 16:54:12,808 - [test_business_register03.py - line:65] - INFO:测试编号28,测试用例标题:测试生日输入不存在的日期的场景,执行成功!
2021-10-05 16:54:12,888 - [test_business_register03.py - line:65] - INFO:测试编号29,测试用例标题:测试QQ号码无效边界值的场景,执行成功!
2021-10-05 16:54:12,970 - [test_business_register03.py - line:65] - INFO:测试编号30,测试用例标题:测试QQ号码非数字的场景,执行成功!
2021-10-05 16:54:13,052 - [test_business_register03.py - line:65] - INFO:测试编号31,测试用例标题:测试邮箱格式错误的场景,执行成功!
2021-10-05 16:54:13,136 - [test_business_register03.py - line:65] - INFO:测试编号32,测试用例标题:测试邮箱为已注册邮箱的场景,执行成功!
2021-10-05 16:54:29,087 - [test_business_register03.py - line:65] - INFO:测试编号1,测试用例标题:注册正常流程,执行成功!
2021-10-05 16:54:29,173 - [test_business_register03.py - line:65] - INFO:测试编号2,测试用例标题:测试性别、生日、qq、email不输入的场景,执行成功!
2021-10-05 16:54:29,259 - [test_business_register03.py - line:65] - INFO:测试编号3,测试用例标题:测试用户名有效边界值的场景,执行成功!
2021-10-05 16:54:29,343 - [test_business_register03.py - line:65] - INFO:测试编号4,测试用例标题:测试密码有效边界值的场景,执行成功!
2021-10-05 16:54:29,441 - [test_business_register03.py - line:65] - INFO:测试编号5,测试用例标题:测试qq号有效边界值的场景,执行成功!
2021-10-05 16:54:29,528 - [test_business_register03.py - line:60] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:54:29,528 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:54:29,613 - [test_business_register03.py - line:60] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:54:29,613 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:54:29,698 - [test_business_register03.py - line:60] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:54:29,699 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:54:29,787 - [test_business_register03.py - line:65] - INFO:测试编号9,测试用例标题:测试用户名无效边界值的场景,执行成功!
2021-10-05 16:54:29,866 - [test_business_register03.py - line:65] - INFO:测试编号10,测试用例标题:测试用户名为空的场景,执行成功!
2021-10-05 16:54:29,951 - [test_business_register03.py - line:65] - INFO:测试编号11,测试用例标题:测试用户名非字母开头的场景,执行成功!
2021-10-05 16:54:30,035 - [test_business_register03.py - line:65] - INFO:测试编号12,测试用例标题:测试用户名包含符号或者汉字的场景,执行成功!
2021-10-05 16:54:30,117 - [test_business_register03.py - line:65] - INFO:测试编号13,测试用例标题:测试用户名已存在的场景,执行成功!
2021-10-05 16:54:30,198 - [test_business_register03.py - line:65] - INFO:测试编号14,测试用例标题:测试密码无效边界值的场景,执行成功!
2021-10-05 16:54:30,299 - [test_business_register03.py - line:65] - INFO:测试编号15,测试用例标题:测试密码为空的场景,执行成功!
2021-10-05 16:54:30,381 - [test_business_register03.py - line:65] - INFO:测试编号16,测试用例标题:测试密码包含符号或者汉字的场景,执行成功!
2021-10-05 16:54:30,462 - [test_business_register03.py - line:65] - INFO:测试编号17,测试用例标题:测试确认密码大小写区分的场景,执行成功!
2021-10-05 16:54:30,541 - [test_business_register03.py - line:65] - INFO:测试编号18,测试用例标题:测试确认密码和密码不一致的场景,执行成功!
2021-10-05 16:54:30,622 - [test_business_register03.py - line:65] - INFO:测试编号19,测试用例标题:测试确认密码为空的场景,执行成功!
2021-10-05 16:54:30,703 - [test_business_register03.py - line:65] - INFO:测试编号20,测试用例标题:测试手机号为空的场景,执行成功!
2021-10-05 16:54:30,784 - [test_business_register03.py - line:65] - INFO:测试编号21,测试用例标题:测试手机号非11位的场景,执行成功!
2021-10-05 16:54:30,866 - [test_business_register03.py - line:65] - INFO:测试编号22,测试用例标题:测试手机号已注册的场景,执行成功!
2021-10-05 16:54:30,946 - [test_business_register03.py - line:65] - INFO:测试编号23,测试用例标题:测试手机号非数字的场景,执行成功!
2021-10-05 16:54:31,029 - [test_business_register03.py - line:65] - INFO:测试编号24,测试用例标题:测试性别非枚举的场景,执行成功!
2021-10-05 16:54:31,110 - [test_business_register03.py - line:65] - INFO:测试编号25,测试用例标题:测试性别男+女的场景,执行成功!
2021-10-05 16:54:31,190 - [test_business_register03.py - line:65] - INFO:测试编号26,测试用例标题:测试生日年月日不完整的场景,执行成功!
2021-10-05 16:54:31,271 - [test_business_register03.py - line:65] - INFO:测试编号27,测试用例标题:测试生日输入非数字的场景,执行成功!
2021-10-05 16:54:31,351 - [test_business_register03.py - line:65] - INFO:测试编号28,测试用例标题:测试生日输入不存在的日期的场景,执行成功!
2021-10-05 16:54:31,434 - [test_business_register03.py - line:65] - INFO:测试编号29,测试用例标题:测试QQ号码无效边界值的场景,执行成功!
2021-10-05 16:54:31,517 - [test_business_register03.py - line:65] - INFO:测试编号30,测试用例标题:测试QQ号码非数字的场景,执行成功!
2021-10-05 16:54:31,598 - [test_business_register03.py - line:65] - INFO:测试编号31,测试用例标题:测试邮箱格式错误的场景,执行成功!
2021-10-05 16:54:31,681 - [test_business_register03.py - line:65] - INFO:测试编号32,测试用例标题:测试邮箱为已注册邮箱的场景,执行成功!
2021-10-05 16:55:06,788 - [test_business_register03.py - line:65] - INFO:测试编号1,测试用例标题:注册正常流程,执行成功!
2021-10-05 16:55:06,880 - [test_business_register03.py - line:65] - INFO:测试编号2,测试用例标题:测试性别、生日、qq、email不输入的场景,执行成功!
2021-10-05 16:55:06,966 - [test_business_register03.py - line:65] - INFO:测试编号3,测试用例标题:测试用户名有效边界值的场景,执行成功!
2021-10-05 16:55:07,052 - [test_business_register03.py - line:65] - INFO:测试编号4,测试用例标题:测试密码有效边界值的场景,执行成功!
2021-10-05 16:55:07,134 - [test_business_register03.py - line:65] - INFO:测试编号5,测试用例标题:测试qq号有效边界值的场景,执行成功!
2021-10-05 16:55:07,216 - [test_business_register03.py - line:60] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:55:07,216 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:55:07,303 - [test_business_register03.py - line:60] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1000, 'msg': '注册成功'}!
2021-10-05 16:55:07,303 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1010, 'msg': '生日格式错误'}
?            ^           ^^^^^^

+ {'code': 1000, 'msg': '注册成功'}
?            ^           ^^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
2021-10-05 16:55:07,388 - [test_business_register03.py - line:60] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1000, 'msg': '注册成功'}!
2021-10-05 16:55:07,388 - [test_business_register03.py - line:61] - ERROR: :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
- {'code': 1010, 'msg': '生日格式错误'}
?            ^           ^^^^^^

+ {'code': 1000, 'msg': '注册成功'}
?            ^           ^^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1000, 'msg': '注册成功'}
2021-10-05 16:55:07,479 - [test_business_register03.py - line:65] - INFO:测试编号9,测试用例标题:测试用户名无效边界值的场景,执行成功!
2021-10-05 16:55:07,559 - [test_business_register03.py - line:65] - INFO:测试编号10,测试用例标题:测试用户名为空的场景,执行成功!
2021-10-05 16:55:07,642 - [test_business_register03.py - line:65] - INFO:测试编号11,测试用例标题:测试用户名非字母开头的场景,执行成功!
2021-10-05 16:55:07,722 - [test_business_register03.py - line:65] - INFO:测试编号12,测试用例标题:测试用户名包含符号或者汉字的场景,执行成功!
2021-10-05 16:55:07,809 - [test_business_register03.py - line:65] - INFO:测试编号13,测试用例标题:测试用户名已存在的场景,执行成功!
2021-10-05 16:55:07,892 - [test_business_register03.py - line:65] - INFO:测试编号14,测试用例标题:测试密码无效边界值的场景,执行成功!
2021-10-05 16:55:07,972 - [test_business_register03.py - line:65] - INFO:测试编号15,测试用例标题:测试密码为空的场景,执行成功!
2021-10-05 16:55:08,051 - [test_business_register03.py - line:65] - INFO:测试编号16,测试用例标题:测试密码包含符号或者汉字的场景,执行成功!
2021-10-05 16:55:08,132 - [test_business_register03.py - line:65] - INFO:测试编号17,测试用例标题:测试确认密码大小写区分的场景,执行成功!
2021-10-05 16:55:08,212 - [test_business_register03.py - line:65] - INFO:测试编号18,测试用例标题:测试确认密码和密码不一致的场景,执行成功!
2021-10-05 16:55:08,295 - [test_business_register03.py - line:65] - INFO:测试编号19,测试用例标题:测试确认密码为空的场景,执行成功!
2021-10-05 16:55:08,376 - [test_business_register03.py - line:65] - INFO:测试编号20,测试用例标题:测试手机号为空的场景,执行成功!
2021-10-05 16:55:08,457 - [test_business_register03.py - line:65] - INFO:测试编号21,测试用例标题:测试手机号非11位的场景,执行成功!
2021-10-05 16:55:08,540 - [test_business_register03.py - line:65] - INFO:测试编号22,测试用例标题:测试手机号已注册的场景,执行成功!
2021-10-05 16:55:08,620 - [test_business_register03.py - line:65] - INFO:测试编号23,测试用例标题:测试手机号非数字的场景,执行成功!
2021-10-05 16:55:08,702 - [test_business_register03.py - line:65] - INFO:测试编号24,测试用例标题:测试性别非枚举的场景,执行成功!
2021-10-05 16:55:08,785 - [test_business_register03.py - line:65] - INFO:测试编号25,测试用例标题:测试性别男+女的场景,执行成功!
2021-10-05 16:55:08,864 - [test_business_register03.py - line:65] - INFO:测试编号26,测试用例标题:测试生日年月日不完整的场景,执行成功!
2021-10-05 16:55:08,944 - [test_business_register03.py - line:65] - INFO:测试编号27,测试用例标题:测试生日输入非数字的场景,执行成功!
2021-10-05 16:55:09,025 - [test_business_register03.py - line:65] - INFO:测试编号28,测试用例标题:测试生日输入不存在的日期的场景,执行成功!
2021-10-05 16:55:09,107 - [test_business_register03.py - line:65] - INFO:测试编号29,测试用例标题:测试QQ号码无效边界值的场景,执行成功!
2021-10-05 16:55:09,195 - [test_business_register03.py - line:65] - INFO:测试编号30,测试用例标题:测试QQ号码非数字的场景,执行成功!
2021-10-05 16:55:09,277 - [test_business_register03.py - line:65] - INFO:测试编号31,测试用例标题:测试邮箱格式错误的场景,执行成功!
2021-10-05 16:55:09,362 - [test_business_register03.py - line:65] - INFO:测试编号32,测试用例标题:测试邮箱为已注册邮箱的场景,执行成功!
2021-10-05 16:57:27,394 - [test_business_register03.py - line:65] - INFO:测试编号1,测试用例标题:注册正常流程,执行成功!
2021-10-05 16:57:27,477 - [test_business_register03.py - line:65] - INFO:测试编号2,测试用例标题:测试性别、生日、qq、email不输入的场景,执行成功!
2021-10-05 16:57:27,563 - [test_business_register03.py - line:65] - INFO:测试编号3,测试用例标题:测试用户名有效边界值的场景,执行成功!
2021-10-05 16:57:27,648 - [test_business_register03.py - line:65] - INFO:测试编号4,测试用例标题:测试密码有效边界值的场景,执行成功!
2021-10-05 16:57:27,732 - [test_business_register03.py - line:65] - INFO:测试编号5,测试用例标题:测试qq号有效边界值的场景,执行成功!
2021-10-05 16:57:27,812 - [test_business_register03.py - line:60] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:57:27,813 - [test_business_register03.py - line:61] - ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:57:27,897 - [test_business_register03.py - line:60] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:57:27,897 - [test_business_register03.py - line:61] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:57:27,997 - [test_business_register03.py - line:60] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-05 16:57:27,997 - [test_business_register03.py - line:61] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 52, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-05 16:57:28,079 - [test_business_register03.py - line:65] - INFO:测试编号9,测试用例标题:测试用户名无效边界值的场景,执行成功!
2021-10-05 16:57:28,161 - [test_business_register03.py - line:65] - INFO:测试编号10,测试用例标题:测试用户名为空的场景,执行成功!
2021-10-05 16:57:28,248 - [test_business_register03.py - line:65] - INFO:测试编号11,测试用例标题:测试用户名非字母开头的场景,执行成功!
2021-10-05 16:57:28,329 - [test_business_register03.py - line:65] - INFO:测试编号12,测试用例标题:测试用户名包含符号或者汉字的场景,执行成功!
2021-10-05 16:57:28,412 - [test_business_register03.py - line:65] - INFO:测试编号13,测试用例标题:测试用户名已存在的场景,执行成功!
2021-10-05 16:57:28,491 - [test_business_register03.py - line:65] - INFO:测试编号14,测试用例标题:测试密码无效边界值的场景,执行成功!
2021-10-05 16:57:28,568 - [test_business_register03.py - line:65] - INFO:测试编号15,测试用例标题:测试密码为空的场景,执行成功!
2021-10-05 16:57:28,646 - [test_business_register03.py - line:65] - INFO:测试编号16,测试用例标题:测试密码包含符号或者汉字的场景,执行成功!
2021-10-05 16:57:28,728 - [test_business_register03.py - line:65] - INFO:测试编号17,测试用例标题:测试确认密码大小写区分的场景,执行成功!
2021-10-05 16:57:28,805 - [test_business_register03.py - line:65] - INFO:测试编号18,测试用例标题:测试确认密码和密码不一致的场景,执行成功!
2021-10-05 16:57:28,884 - [test_business_register03.py - line:65] - INFO:测试编号19,测试用例标题:测试确认密码为空的场景,执行成功!
2021-10-05 16:57:28,965 - [test_business_register03.py - line:65] - INFO:测试编号20,测试用例标题:测试手机号为空的场景,执行成功!
2021-10-05 16:57:29,043 - [test_business_register03.py - line:65] - INFO:测试编号21,测试用例标题:测试手机号非11位的场景,执行成功!
2021-10-05 16:57:29,123 - [test_business_register03.py - line:65] - INFO:测试编号22,测试用例标题:测试手机号已注册的场景,执行成功!
2021-10-05 16:57:29,205 - [test_business_register03.py - line:65] - INFO:测试编号23,测试用例标题:测试手机号非数字的场景,执行成功!
2021-10-05 16:57:29,285 - [test_business_register03.py - line:65] - INFO:测试编号24,测试用例标题:测试性别非枚举的场景,执行成功!
2021-10-05 16:57:29,366 - [test_business_register03.py - line:65] - INFO:测试编号25,测试用例标题:测试性别男+女的场景,执行成功!
2021-10-05 16:57:29,446 - [test_business_register03.py - line:65] - INFO:测试编号26,测试用例标题:测试生日年月日不完整的场景,执行成功!
2021-10-05 16:57:29,529 - [test_business_register03.py - line:65] - INFO:测试编号27,测试用例标题:测试生日输入非数字的场景,执行成功!
2021-10-05 16:57:29,607 - [test_business_register03.py - line:65] - INFO:测试编号28,测试用例标题:测试生日输入不存在的日期的场景,执行成功!
2021-10-05 16:57:29,686 - [test_business_register03.py - line:65] - INFO:测试编号29,测试用例标题:测试QQ号码无效边界值的场景,执行成功!
2021-10-05 16:57:29,763 - [test_business_register03.py - line:65] - INFO:测试编号30,测试用例标题:测试QQ号码非数字的场景,执行成功!
2021-10-05 16:57:29,843 - [test_business_register03.py - line:65] - INFO:测试编号31,测试用例标题:测试邮箱格式错误的场景,执行成功!
2021-10-05 16:57:29,927 - [test_business_register03.py - line:65] - INFO:测试编号32,测试用例标题:测试邮箱为已注册邮箱的场景,执行成功!
2021-10-05 16:57:30,010 - [test_login05.py - line:57] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-05 16:57:30,090 - [test_login05.py - line:57] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-05 16:57:30,172 - [test_login05.py - line:57] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-05 16:57:30,251 - [test_login05.py - line:52] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzQ1NDI1MC4xNzg1NTM2OmZlMDFmNTc5NGYwYjQ0YzU1MzBlYTE0NzI4NjliMjEyMTUyMzFkZDg='}
2021-10-05 16:57:30,251 - [test_login05.py - line:53] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzQ1NDI1M[64 chars]Dg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzQ1NDI1MC4xNzg1NTM2OmZlMDFmNTc5NGYwYjQ0YzU1MzBlYTE0NzI4NjliMjEyMTUyMzFkZDg='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzQ1NDI1M[64 chars]Dg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzQ1NDI1MC4xNzg1NTM2OmZlMDFmNTc5NGYwYjQ0YzU1MzBlYTE0NzI4NjliMjEyMTUyMzFkZDg='}
2021-10-05 16:57:30,335 - [test_login05.py - line:57] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-05 16:57:30,434 - [test_login05.py - line:52] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzQ1NDI1MC4zNDExMTk4Ojk4Nzc0MGE0Y2QyYmZiZjY4MzIyZTRhYWEwYzI1MThhYzFiOWFmNmE='}
2021-10-05 16:57:30,435 - [test_login05.py - line:53] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzQ1NDI1M[64 chars]mE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzQ1NDI1MC4zNDExMTk4Ojk4Nzc0MGE0Y2QyYmZiZjY4MzIyZTRhYWEwYzI1MThhYzFiOWFmNmE='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzQ1NDI1M[64 chars]mE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzQ1NDI1MC4zNDExMTk4Ojk4Nzc0MGE0Y2QyYmZiZjY4MzIyZTRhYWEwYzI1MThhYzFiOWFmNmE='}
2021-10-05 16:57:30,517 - [test_login05.py - line:57] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-05 16:57:30,601 - [test_login05.py - line:57] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-05 16:57:30,687 - [test_login05.py - line:57] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-05 16:57:30,768 - [test_login05.py - line:57] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-05 16:57:30,847 - [test_login05.py - line:57] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-05 17:44:14,737 - [test_business_token_goodsInfo01.py - line:42] - INFO:测试编号1,测试用例标题:商品信息查询正常流程_无条件查询,执行成功!
2021-10-05 17:44:20,169 - [test_business_token_goodsInfo01.py - line:42] - INFO:测试编号1,测试用例标题:商品信息查询正常流程_无条件查询,执行成功!
2021-10-05 17:44:24,488 - [test_business_token_goodsInfo01.py - line:42] - INFO:测试编号1,测试用例标题:商品信息查询正常流程_无条件查询,执行成功!
2021-10-05 17:51:58,185 - [test_business_token_goodsInfo02.py - line:56] - INFO:测试编号1,测试用例标题:商品信息查询正常流程_无条件查询,执行成功!
2021-10-05 17:52:19,203 - [test_business_token_goodsInfo02.py - line:57] - INFO:测试编号1,测试用例标题:商品信息查询正常流程_无条件查询,执行成功!
2021-10-06 10:39:35,114 - [test_business_register03.py - line:64] - INFO:测试编号1,测试用例标题:注册正常流程,执行成功!
2021-10-06 10:39:35,192 - [test_business_register03.py - line:64] - INFO:测试编号2,测试用例标题:测试性别、生日、qq、email不输入的场景,执行成功!
2021-10-06 10:39:35,286 - [test_business_register03.py - line:64] - INFO:测试编号3,测试用例标题:测试用户名有效边界值的场景,执行成功!
2021-10-06 10:39:35,379 - [test_business_register03.py - line:64] - INFO:测试编号4,测试用例标题:测试密码有效边界值的场景,执行成功!
2021-10-06 10:39:35,457 - [test_business_register03.py - line:64] - INFO:测试编号5,测试用例标题:测试qq号有效边界值的场景,执行成功!
2021-10-06 10:39:35,551 - [test_business_register03.py - line:59] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-06 10:39:35,551 - [test_business_register03.py - line:60] - ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-06 10:39:35,676 - [test_business_register03.py - line:59] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-06 10:39:35,676 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-06 10:39:35,786 - [test_business_register03.py - line:59] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-06 10:39:35,786 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-06 10:39:35,879 - [test_business_register03.py - line:64] - INFO:测试编号9,测试用例标题:测试用户名无效边界值的场景,执行成功!
2021-10-06 10:39:35,973 - [test_business_register03.py - line:64] - INFO:测试编号10,测试用例标题:测试用户名为空的场景,执行成功!
2021-10-06 10:39:36,098 - [test_business_register03.py - line:64] - INFO:测试编号11,测试用例标题:测试用户名非字母开头的场景,执行成功!
2021-10-06 10:39:36,192 - [test_business_register03.py - line:64] - INFO:测试编号12,测试用例标题:测试用户名包含符号或者汉字的场景,执行成功!
2021-10-06 10:39:36,301 - [test_business_register03.py - line:64] - INFO:测试编号13,测试用例标题:测试用户名已存在的场景,执行成功!
2021-10-06 10:39:36,410 - [test_business_register03.py - line:64] - INFO:测试编号14,测试用例标题:测试密码无效边界值的场景,执行成功!
2021-10-06 10:39:36,488 - [test_business_register03.py - line:64] - INFO:测试编号15,测试用例标题:测试密码为空的场景,执行成功!
2021-10-06 10:39:36,567 - [test_business_register03.py - line:64] - INFO:测试编号16,测试用例标题:测试密码包含符号或者汉字的场景,执行成功!
2021-10-06 10:39:36,660 - [test_business_register03.py - line:64] - INFO:测试编号17,测试用例标题:测试确认密码大小写区分的场景,执行成功!
2021-10-06 10:39:36,754 - [test_business_register03.py - line:64] - INFO:测试编号18,测试用例标题:测试确认密码和密码不一致的场景,执行成功!
2021-10-06 10:40:07,450 - [test_business_register03.py - line:64] - INFO:测试编号1,测试用例标题:注册正常流程,执行成功!
2021-10-06 10:40:07,544 - [test_business_register03.py - line:64] - INFO:测试编号2,测试用例标题:测试性别、生日、qq、email不输入的场景,执行成功!
2021-10-06 10:40:07,637 - [test_business_register03.py - line:64] - INFO:测试编号3,测试用例标题:测试用户名有效边界值的场景,执行成功!
2021-10-06 10:40:07,716 - [test_business_register03.py - line:64] - INFO:测试编号4,测试用例标题:测试密码有效边界值的场景,执行成功!
2021-10-06 10:40:07,809 - [test_business_register03.py - line:64] - INFO:测试编号5,测试用例标题:测试qq号有效边界值的场景,执行成功!
2021-10-06 10:40:07,903 - [test_business_register03.py - line:59] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-06 10:40:07,903 - [test_business_register03.py - line:60] - ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-06 10:40:07,997 - [test_business_register03.py - line:59] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-06 10:40:07,997 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-06 10:40:08,106 - [test_business_register03.py - line:59] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-06 10:40:08,106 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-06 10:40:08,184 - [test_business_register03.py - line:64] - INFO:测试编号9,测试用例标题:测试用户名无效边界值的场景,执行成功!
2021-10-06 10:40:08,262 - [test_business_register03.py - line:64] - INFO:测试编号10,测试用例标题:测试用户名为空的场景,执行成功!
2021-10-06 10:40:08,356 - [test_business_register03.py - line:64] - INFO:测试编号11,测试用例标题:测试用户名非字母开头的场景,执行成功!
2021-10-06 10:40:08,450 - [test_business_register03.py - line:64] - INFO:测试编号12,测试用例标题:测试用户名包含符号或者汉字的场景,执行成功!
2021-10-06 10:40:08,543 - [test_business_register03.py - line:64] - INFO:测试编号13,测试用例标题:测试用户名已存在的场景,执行成功!
2021-10-06 10:40:08,637 - [test_business_register03.py - line:64] - INFO:测试编号14,测试用例标题:测试密码无效边界值的场景,执行成功!
2021-10-06 10:40:08,715 - [test_business_register03.py - line:64] - INFO:测试编号15,测试用例标题:测试密码为空的场景,执行成功!
2021-10-06 10:40:08,809 - [test_business_register03.py - line:64] - INFO:测试编号16,测试用例标题:测试密码包含符号或者汉字的场景,执行成功!
2021-10-06 10:40:08,887 - [test_business_register03.py - line:64] - INFO:测试编号17,测试用例标题:测试确认密码大小写区分的场景,执行成功!
2021-10-06 10:40:08,981 - [test_business_register03.py - line:64] - INFO:测试编号18,测试用例标题:测试确认密码和密码不一致的场景,执行成功!
2021-10-06 10:40:09,059 - [test_business_register03.py - line:64] - INFO:测试编号19,测试用例标题:测试确认密码为空的场景,执行成功!
2021-10-06 10:40:09,153 - [test_business_register03.py - line:64] - INFO:测试编号20,测试用例标题:测试手机号为空的场景,执行成功!
2021-10-06 10:40:09,246 - [test_business_register03.py - line:64] - INFO:测试编号21,测试用例标题:测试手机号非11位的场景,执行成功!
2021-10-06 10:40:09,325 - [test_business_register03.py - line:64] - INFO:测试编号22,测试用例标题:测试手机号已注册的场景,执行成功!
2021-10-06 10:40:09,434 - [test_business_register03.py - line:64] - INFO:测试编号23,测试用例标题:测试手机号非数字的场景,执行成功!
2021-10-06 10:40:09,512 - [test_business_register03.py - line:64] - INFO:测试编号24,测试用例标题:测试性别非枚举的场景,执行成功!
2021-10-06 10:40:09,606 - [test_business_register03.py - line:64] - INFO:测试编号25,测试用例标题:测试性别男+女的场景,执行成功!
2021-10-06 10:40:09,684 - [test_business_register03.py - line:64] - INFO:测试编号26,测试用例标题:测试生日年月日不完整的场景,执行成功!
2021-10-06 10:40:09,778 - [test_business_register03.py - line:64] - INFO:测试编号27,测试用例标题:测试生日输入非数字的场景,执行成功!
2021-10-06 10:40:09,856 - [test_business_register03.py - line:64] - INFO:测试编号28,测试用例标题:测试生日输入不存在的日期的场景,执行成功!
2021-10-06 10:40:09,949 - [test_business_register03.py - line:64] - INFO:测试编号29,测试用例标题:测试QQ号码无效边界值的场景,执行成功!
2021-10-06 10:40:10,027 - [test_business_register03.py - line:64] - INFO:测试编号30,测试用例标题:测试QQ号码非数字的场景,执行成功!
2021-10-06 10:59:30,881 - [test_business_token_goodsInfo02.py - line:57] - INFO:测试编号1,测试用例标题:商品信息查询正常流程_无条件查询,执行成功!
2021-10-06 14:55:12,138 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号1,测试用例标题:商品信息查询正常流程_无条件查询,执行成功!
2021-10-06 14:55:12,238 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号2,测试用例标题:测试token值为空的场景,执行成功!
2021-10-06 14:55:12,336 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号3,测试用例标题:测试错误的token场景,执行成功!
2021-10-06 14:55:12,447 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号4,测试用例标题:测试token值大小写区分的场景,执行成功!
2021-10-06 14:55:12,565 - [test_business_token_goodsInfo03.py - line:69] - ERROR:测试编号5,测试用例标题:测试上一次的token的场景,执行失败,实际结果为:{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone11', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '华为P40', 'shopPrice': 6000.0, 'promotePrice': 0.0, 'num': 666}, {'goodsName': '华为P50', 'shopPrice': 4500.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米11', 'shopPrice': 4000.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '三星s21', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}]}!
2021-10-06 14:55:12,565 - [test_business_token_goodsInfo03.py - line:70] - ERROR: :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000,
 'goods_tiems': [{'goodsName': '预留数据',
                  'num': 1000,
                  'promotePrice': 0.0,
                  'shopPrice': 100.0},
                 {'goodsName': 'iphone11',
                  'num': 100,
                  'promotePrice': 0.0,
                  'shopPrice': 9999.0},
                 {'goodsName': '华为P40',
                  'num': 666,
                  'promotePrice': 0.0,
                  'shopPrice': 6000.0},
                 {'goodsName': '华为P50',
                  'num': 999,
                  'promotePrice': 0.0,
                  'shopPrice': 4500.0},
                 {'goodsName': '小米11',
                  'num': 999,
                  'promotePrice': 0.0,
                  'shopPrice': 4000.0},
                 {'goodsName': '三星s21',
                  'num': 9999,
                  'promotePrice': 0.0,
                  'shopPrice': 7000.0}],
 'msg': '查询成功'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[458 chars]99}]}
Diff is 1025 characters long. Set self.maxDiff to None to see it.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 66, in test_token_goods_info
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000,
 'goods_tiems': [{'goodsName': '预留数据',
                  'num': 1000,
                  'promotePrice': 0.0,
                  'shopPrice': 100.0},
                 {'goodsName': 'iphone11',
                  'num': 100,
                  'promotePrice': 0.0,
                  'shopPrice': 9999.0},
                 {'goodsName': '华为P40',
                  'num': 666,
                  'promotePrice': 0.0,
                  'shopPrice': 6000.0},
                 {'goodsName': '华为P50',
                  'num': 999,
                  'promotePrice': 0.0,
                  'shopPrice': 4500.0},
                 {'goodsName': '小米11',
                  'num': 999,
                  'promotePrice': 0.0,
                  'shopPrice': 4000.0},
                 {'goodsName': '三星s21',
                  'num': 9999,
                  'promotePrice': 0.0,
                  'shopPrice': 7000.0}],
 'msg': '查询成功'}
2021-10-06 14:55:12,691 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号6,测试用例标题:测试goodsId格式错误的场景,执行成功!
2021-10-06 14:55:12,803 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号7,测试用例标题:测试goodsId不存在的场景,执行成功!
2021-10-06 14:55:12,906 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号8,测试用例标题:测试isOnSale为非枚举的场景,执行成功!
2021-10-06 14:55:13,014 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号9,测试用例标题:测试isOnSale状态不对应的场景,执行成功!
2021-10-06 14:55:13,127 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号10,测试用例标题:测试isPromote为非枚举的场景,执行成功!
2021-10-06 14:55:13,234 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号11,测试用例标题:测试isPromote状态不对应的场景,执行成功!
2021-10-06 14:55:13,340 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号12,测试用例标题:测试商品编号正确+isOnSale为0+isPromote为空的场景,执行成功!
2021-10-06 14:55:13,447 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号13,测试用例标题:测试商品编号正确+isOnSale为空+isPromote为0的场景,执行成功!
2021-10-06 14:55:13,555 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号14,测试用例标题:测试商品编号正确+isOnSale为1+isPromote为空的场景,执行成功!
2021-10-06 14:55:13,665 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号15,测试用例标题:测试商品编号正确+isOnSale为空+isPromote为1的场景,执行成功!
2021-10-06 14:55:13,795 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号16,测试用例标题:测试商品编号为空+isOnSale为0+isPromote为0的场景,执行成功!
2021-10-06 14:55:13,903 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号17,测试用例标题:测试商品编号为空+isOnSale为1+isPromote为1的场景,执行成功!
2021-10-06 14:55:14,013 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号18,测试用例标题:测试商品编号为空+isOnSale为1+isPromote为0的场景,执行成功!
2021-10-06 14:55:14,119 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号19,测试用例标题:测试商品编号为空+isOnSale为0+isPromote为1的场景,执行成功!
2021-10-06 14:55:14,227 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号20,测试用例标题:测试编号正确+isOnSale为0+isPromote为1的场景,执行成功!
2021-10-06 14:55:14,336 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号21,测试用例标题:测试编号正确+isOnSale为0+isPromote为0的场景,执行成功!
2021-10-06 14:55:14,445 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号22,测试用例标题:测试编号正确+isOnSale为1+isPromote为1的场景,执行成功!
2021-10-06 14:55:14,554 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号23,测试用例标题:测试编号正确+isOnSale为1+isPromote为0的场景,执行成功!
2021-10-06 14:55:57,182 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号1,测试用例标题:商品信息查询正常流程_无条件查询,执行成功!
2021-10-06 14:55:57,286 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号2,测试用例标题:测试token值为空的场景,执行成功!
2021-10-06 14:55:57,390 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号3,测试用例标题:测试错误的token场景,执行成功!
2021-10-06 14:55:57,499 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号4,测试用例标题:测试token值大小写区分的场景,执行成功!
2021-10-06 14:55:57,612 - [test_business_token_goodsInfo03.py - line:69] - ERROR:测试编号5,测试用例标题:测试上一次的token的场景,执行失败,实际结果为:{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone11', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '华为P40', 'shopPrice': 6000.0, 'promotePrice': 0.0, 'num': 666}, {'goodsName': '华为P50', 'shopPrice': 4500.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米11', 'shopPrice': 4000.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '三星s21', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}]}!
2021-10-06 14:55:57,612 - [test_business_token_goodsInfo03.py - line:70] - ERROR: :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000,
 'goods_tiems': [{'goodsName': '预留数据',
                  'num': 1000,
                  'promotePrice': 0.0,
                  'shopPrice': 100.0},
                 {'goodsName': 'iphone11',
                  'num': 100,
                  'promotePrice': 0.0,
                  'shopPrice': 9999.0},
                 {'goodsName': '华为P40',
                  'num': 666,
                  'promotePrice': 0.0,
                  'shopPrice': 6000.0},
                 {'goodsName': '华为P50',
                  'num': 999,
                  'promotePrice': 0.0,
                  'shopPrice': 4500.0},
                 {'goodsName': '小米11',
                  'num': 999,
                  'promotePrice': 0.0,
                  'shopPrice': 4000.0},
                 {'goodsName': '三星s21',
                  'num': 9999,
                  'promotePrice': 0.0,
                  'shopPrice': 7000.0}],
 'msg': '查询成功'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[458 chars]99}]}
Diff is 1025 characters long. Set self.maxDiff to None to see it.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 66, in test_token_goods_info
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000,
 'goods_tiems': [{'goodsName': '预留数据',
                  'num': 1000,
                  'promotePrice': 0.0,
                  'shopPrice': 100.0},
                 {'goodsName': 'iphone11',
                  'num': 100,
                  'promotePrice': 0.0,
                  'shopPrice': 9999.0},
                 {'goodsName': '华为P40',
                  'num': 666,
                  'promotePrice': 0.0,
                  'shopPrice': 6000.0},
                 {'goodsName': '华为P50',
                  'num': 999,
                  'promotePrice': 0.0,
                  'shopPrice': 4500.0},
                 {'goodsName': '小米11',
                  'num': 999,
                  'promotePrice': 0.0,
                  'shopPrice': 4000.0},
                 {'goodsName': '三星s21',
                  'num': 9999,
                  'promotePrice': 0.0,
                  'shopPrice': 7000.0}],
 'msg': '查询成功'}
2021-10-06 14:55:57,753 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号6,测试用例标题:测试goodsId格式错误的场景,执行成功!
2021-10-06 14:55:57,860 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号7,测试用例标题:测试goodsId不存在的场景,执行成功!
2021-10-06 14:55:57,967 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号8,测试用例标题:测试isOnSale为非枚举的场景,执行成功!
2021-10-06 14:55:58,074 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号9,测试用例标题:测试isOnSale状态不对应的场景,执行成功!
2021-10-06 14:55:58,179 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号10,测试用例标题:测试isPromote为非枚举的场景,执行成功!
2021-10-06 14:55:58,286 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号11,测试用例标题:测试isPromote状态不对应的场景,执行成功!
2021-10-06 14:55:58,394 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号12,测试用例标题:测试商品编号正确+isOnSale为0+isPromote为空的场景,执行成功!
2021-10-06 14:55:58,511 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号13,测试用例标题:测试商品编号正确+isOnSale为空+isPromote为0的场景,执行成功!
2021-10-06 14:55:58,621 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号14,测试用例标题:测试商品编号正确+isOnSale为1+isPromote为空的场景,执行成功!
2021-10-06 14:55:58,729 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号15,测试用例标题:测试商品编号正确+isOnSale为空+isPromote为1的场景,执行成功!
2021-10-06 14:55:58,838 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号16,测试用例标题:测试商品编号为空+isOnSale为0+isPromote为0的场景,执行成功!
2021-10-06 14:55:58,969 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号17,测试用例标题:测试商品编号为空+isOnSale为1+isPromote为1的场景,执行成功!
2021-10-06 14:55:59,077 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号18,测试用例标题:测试商品编号为空+isOnSale为1+isPromote为0的场景,执行成功!
2021-10-06 14:55:59,186 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号19,测试用例标题:测试商品编号为空+isOnSale为0+isPromote为1的场景,执行成功!
2021-10-06 14:55:59,293 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号20,测试用例标题:测试编号正确+isOnSale为0+isPromote为1的场景,执行成功!
2021-10-06 14:55:59,399 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号21,测试用例标题:测试编号正确+isOnSale为0+isPromote为0的场景,执行成功!
2021-10-06 14:55:59,507 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号22,测试用例标题:测试编号正确+isOnSale为1+isPromote为1的场景,执行成功!
2021-10-06 14:55:59,613 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号23,测试用例标题:测试编号正确+isOnSale为1+isPromote为0的场景,执行成功!
2021-10-06 14:56:01,407 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号1,测试用例标题:商品信息查询正常流程_无条件查询,执行成功!
2021-10-06 14:56:01,509 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号2,测试用例标题:测试token值为空的场景,执行成功!
2021-10-06 14:56:01,609 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号3,测试用例标题:测试错误的token场景,执行成功!
2021-10-06 14:56:01,714 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号4,测试用例标题:测试token值大小写区分的场景,执行成功!
2021-10-06 14:56:01,830 - [test_business_token_goodsInfo03.py - line:69] - ERROR:测试编号5,测试用例标题:测试上一次的token的场景,执行失败,实际结果为:{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone11', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '华为P40', 'shopPrice': 6000.0, 'promotePrice': 0.0, 'num': 666}, {'goodsName': '华为P50', 'shopPrice': 4500.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米11', 'shopPrice': 4000.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '三星s21', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}]}!
2021-10-06 14:56:01,831 - [test_business_token_goodsInfo03.py - line:70] - ERROR: :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000,
 'goods_tiems': [{'goodsName': '预留数据',
                  'num': 1000,
                  'promotePrice': 0.0,
                  'shopPrice': 100.0},
                 {'goodsName': 'iphone11',
                  'num': 100,
                  'promotePrice': 0.0,
                  'shopPrice': 9999.0},
                 {'goodsName': '华为P40',
                  'num': 666,
                  'promotePrice': 0.0,
                  'shopPrice': 6000.0},
                 {'goodsName': '华为P50',
                  'num': 999,
                  'promotePrice': 0.0,
                  'shopPrice': 4500.0},
                 {'goodsName': '小米11',
                  'num': 999,
                  'promotePrice': 0.0,
                  'shopPrice': 4000.0},
                 {'goodsName': '三星s21',
                  'num': 9999,
                  'promotePrice': 0.0,
                  'shopPrice': 7000.0}],
 'msg': '查询成功'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[458 chars]99}]}
Diff is 1025 characters long. Set self.maxDiff to None to see it.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 66, in test_token_goods_info
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000,
 'goods_tiems': [{'goodsName': '预留数据',
                  'num': 1000,
                  'promotePrice': 0.0,
                  'shopPrice': 100.0},
                 {'goodsName': 'iphone11',
                  'num': 100,
                  'promotePrice': 0.0,
                  'shopPrice': 9999.0},
                 {'goodsName': '华为P40',
                  'num': 666,
                  'promotePrice': 0.0,
                  'shopPrice': 6000.0},
                 {'goodsName': '华为P50',
                  'num': 999,
                  'promotePrice': 0.0,
                  'shopPrice': 4500.0},
                 {'goodsName': '小米11',
                  'num': 999,
                  'promotePrice': 0.0,
                  'shopPrice': 4000.0},
                 {'goodsName': '三星s21',
                  'num': 9999,
                  'promotePrice': 0.0,
                  'shopPrice': 7000.0}],
 'msg': '查询成功'}
2021-10-06 14:56:01,969 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号6,测试用例标题:测试goodsId格式错误的场景,执行成功!
2021-10-06 14:56:02,073 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号7,测试用例标题:测试goodsId不存在的场景,执行成功!
2021-10-06 14:56:02,178 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号8,测试用例标题:测试isOnSale为非枚举的场景,执行成功!
2021-10-06 14:56:02,287 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号9,测试用例标题:测试isOnSale状态不对应的场景,执行成功!
2021-10-06 14:56:02,391 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号10,测试用例标题:测试isPromote为非枚举的场景,执行成功!
2021-10-06 14:56:02,497 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号11,测试用例标题:测试isPromote状态不对应的场景,执行成功!
2021-10-06 14:56:02,604 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号12,测试用例标题:测试商品编号正确+isOnSale为0+isPromote为空的场景,执行成功!
2021-10-06 14:56:02,712 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号13,测试用例标题:测试商品编号正确+isOnSale为空+isPromote为0的场景,执行成功!
2021-10-06 14:56:02,816 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号14,测试用例标题:测试商品编号正确+isOnSale为1+isPromote为空的场景,执行成功!
2021-10-06 14:56:02,920 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号15,测试用例标题:测试商品编号正确+isOnSale为空+isPromote为1的场景,执行成功!
2021-10-06 14:56:03,028 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号16,测试用例标题:测试商品编号为空+isOnSale为0+isPromote为0的场景,执行成功!
2021-10-06 14:56:03,136 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号17,测试用例标题:测试商品编号为空+isOnSale为1+isPromote为1的场景,执行成功!
2021-10-06 14:56:03,243 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号18,测试用例标题:测试商品编号为空+isOnSale为1+isPromote为0的场景,执行成功!
2021-10-06 14:56:03,353 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号19,测试用例标题:测试商品编号为空+isOnSale为0+isPromote为1的场景,执行成功!
2021-10-06 14:56:03,461 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号20,测试用例标题:测试编号正确+isOnSale为0+isPromote为1的场景,执行成功!
2021-10-06 14:56:03,572 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号21,测试用例标题:测试编号正确+isOnSale为0+isPromote为0的场景,执行成功!
2021-10-06 14:56:03,678 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号22,测试用例标题:测试编号正确+isOnSale为1+isPromote为1的场景,执行成功!
2021-10-06 14:56:03,790 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号23,测试用例标题:测试编号正确+isOnSale为1+isPromote为0的场景,执行成功!
2021-10-06 14:57:05,930 - [test_business_register03.py - line:64] - INFO:测试编号1,测试用例标题:注册正常流程,执行成功!
2021-10-06 14:57:06,027 - [test_business_register03.py - line:64] - INFO:测试编号2,测试用例标题:测试性别、生日、qq、email不输入的场景,执行成功!
2021-10-06 14:57:06,126 - [test_business_register03.py - line:64] - INFO:测试编号3,测试用例标题:测试用户名有效边界值的场景,执行成功!
2021-10-06 14:57:06,226 - [test_business_register03.py - line:64] - INFO:测试编号4,测试用例标题:测试密码有效边界值的场景,执行成功!
2021-10-06 14:57:06,333 - [test_business_register03.py - line:64] - INFO:测试编号5,测试用例标题:测试qq号有效边界值的场景,执行成功!
2021-10-06 14:57:06,428 - [test_business_register03.py - line:59] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-06 14:57:06,428 - [test_business_register03.py - line:60] - ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-06 14:57:06,535 - [test_business_register03.py - line:59] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-06 14:57:06,535 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-06 14:57:06,633 - [test_business_register03.py - line:59] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-06 14:57:06,633 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-06 14:57:06,741 - [test_business_register03.py - line:64] - INFO:测试编号9,测试用例标题:测试用户名无效边界值的场景,执行成功!
2021-10-06 14:57:06,843 - [test_business_register03.py - line:64] - INFO:测试编号10,测试用例标题:测试用户名为空的场景,执行成功!
2021-10-06 14:57:06,941 - [test_business_register03.py - line:64] - INFO:测试编号11,测试用例标题:测试用户名非字母开头的场景,执行成功!
2021-10-06 14:57:07,041 - [test_business_register03.py - line:64] - INFO:测试编号12,测试用例标题:测试用户名包含符号或者汉字的场景,执行成功!
2021-10-06 14:57:07,140 - [test_business_register03.py - line:64] - INFO:测试编号13,测试用例标题:测试用户名已存在的场景,执行成功!
2021-10-06 14:57:07,235 - [test_business_register03.py - line:64] - INFO:测试编号14,测试用例标题:测试密码无效边界值的场景,执行成功!
2021-10-06 14:57:07,334 - [test_business_register03.py - line:64] - INFO:测试编号15,测试用例标题:测试密码为空的场景,执行成功!
2021-10-06 14:57:07,430 - [test_business_register03.py - line:64] - INFO:测试编号16,测试用例标题:测试密码包含符号或者汉字的场景,执行成功!
2021-10-06 14:57:07,528 - [test_business_register03.py - line:64] - INFO:测试编号17,测试用例标题:测试确认密码大小写区分的场景,执行成功!
2021-10-06 14:57:07,622 - [test_business_register03.py - line:64] - INFO:测试编号18,测试用例标题:测试确认密码和密码不一致的场景,执行成功!
2021-10-06 14:57:07,718 - [test_business_register03.py - line:64] - INFO:测试编号19,测试用例标题:测试确认密码为空的场景,执行成功!
2021-10-06 14:57:07,817 - [test_business_register03.py - line:64] - INFO:测试编号20,测试用例标题:测试手机号为空的场景,执行成功!
2021-10-06 14:57:07,911 - [test_business_register03.py - line:64] - INFO:测试编号21,测试用例标题:测试手机号非11位的场景,执行成功!
2021-10-06 14:57:08,006 - [test_business_register03.py - line:64] - INFO:测试编号22,测试用例标题:测试手机号已注册的场景,执行成功!
2021-10-06 14:57:08,105 - [test_business_register03.py - line:64] - INFO:测试编号23,测试用例标题:测试手机号非数字的场景,执行成功!
2021-10-06 14:57:08,199 - [test_business_register03.py - line:64] - INFO:测试编号24,测试用例标题:测试性别非枚举的场景,执行成功!
2021-10-06 14:57:08,306 - [test_business_register03.py - line:64] - INFO:测试编号25,测试用例标题:测试性别男+女的场景,执行成功!
2021-10-06 14:57:08,403 - [test_business_register03.py - line:64] - INFO:测试编号26,测试用例标题:测试生日年月日不完整的场景,执行成功!
2021-10-06 14:57:08,499 - [test_business_register03.py - line:64] - INFO:测试编号27,测试用例标题:测试生日输入非数字的场景,执行成功!
2021-10-06 14:57:08,592 - [test_business_register03.py - line:64] - INFO:测试编号28,测试用例标题:测试生日输入不存在的日期的场景,执行成功!
2021-10-06 14:57:08,688 - [test_business_register03.py - line:64] - INFO:测试编号29,测试用例标题:测试QQ号码无效边界值的场景,执行成功!
2021-10-06 14:57:08,786 - [test_business_register03.py - line:64] - INFO:测试编号30,测试用例标题:测试QQ号码非数字的场景,执行成功!
2021-10-06 14:57:08,887 - [test_business_register03.py - line:64] - INFO:测试编号31,测试用例标题:测试邮箱格式错误的场景,执行成功!
2021-10-06 14:57:08,989 - [test_business_register03.py - line:64] - INFO:测试编号32,测试用例标题:测试邮箱为已注册邮箱的场景,执行成功!
2021-10-06 14:57:09,098 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号1,测试用例标题:商品信息查询正常流程_无条件查询,执行成功!
2021-10-06 14:57:09,194 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号2,测试用例标题:测试token值为空的场景,执行成功!
2021-10-06 14:57:09,297 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号3,测试用例标题:测试错误的token场景,执行成功!
2021-10-06 14:57:09,401 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号4,测试用例标题:测试token值大小写区分的场景,执行成功!
2021-10-06 14:57:09,515 - [test_business_token_goodsInfo03.py - line:69] - ERROR:测试编号5,测试用例标题:测试上一次的token的场景,执行失败,实际结果为:{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone11', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '华为P40', 'shopPrice': 6000.0, 'promotePrice': 0.0, 'num': 666}, {'goodsName': '华为P50', 'shopPrice': 4500.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米11', 'shopPrice': 4000.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '三星s21', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}]}!
2021-10-06 14:57:09,515 - [test_business_token_goodsInfo03.py - line:70] - ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[458 chars]99}]}
Diff is 1025 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 66, in test_token_goods_info
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[458 chars]99}]}
Diff is 1025 characters long. Set self.maxDiff to None to see it.
2021-10-06 14:57:09,620 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号6,测试用例标题:测试goodsId格式错误的场景,执行成功!
2021-10-06 14:57:09,723 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号7,测试用例标题:测试goodsId不存在的场景,执行成功!
2021-10-06 14:57:09,835 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号8,测试用例标题:测试isOnSale为非枚举的场景,执行成功!
2021-10-06 14:57:09,942 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号9,测试用例标题:测试isOnSale状态不对应的场景,执行成功!
2021-10-06 14:57:10,045 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号10,测试用例标题:测试isPromote为非枚举的场景,执行成功!
2021-10-06 14:57:10,152 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号11,测试用例标题:测试isPromote状态不对应的场景,执行成功!
2021-10-06 14:57:10,273 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号12,测试用例标题:测试商品编号正确+isOnSale为0+isPromote为空的场景,执行成功!
2021-10-06 14:57:10,380 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号13,测试用例标题:测试商品编号正确+isOnSale为空+isPromote为0的场景,执行成功!
2021-10-06 14:57:10,485 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号14,测试用例标题:测试商品编号正确+isOnSale为1+isPromote为空的场景,执行成功!
2021-10-06 14:57:10,593 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号15,测试用例标题:测试商品编号正确+isOnSale为空+isPromote为1的场景,执行成功!
2021-10-06 14:57:10,699 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号16,测试用例标题:测试商品编号为空+isOnSale为0+isPromote为0的场景,执行成功!
2021-10-06 14:57:10,825 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号17,测试用例标题:测试商品编号为空+isOnSale为1+isPromote为1的场景,执行成功!
2021-10-06 14:57:10,932 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号18,测试用例标题:测试商品编号为空+isOnSale为1+isPromote为0的场景,执行成功!
2021-10-06 14:57:11,040 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号19,测试用例标题:测试商品编号为空+isOnSale为0+isPromote为1的场景,执行成功!
2021-10-06 14:57:11,142 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号20,测试用例标题:测试编号正确+isOnSale为0+isPromote为1的场景,执行成功!
2021-10-06 14:57:11,252 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号21,测试用例标题:测试编号正确+isOnSale为0+isPromote为0的场景,执行成功!
2021-10-06 14:57:11,357 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号22,测试用例标题:测试编号正确+isOnSale为1+isPromote为1的场景,执行成功!
2021-10-06 14:57:11,459 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号23,测试用例标题:测试编号正确+isOnSale为1+isPromote为0的场景,执行成功!
2021-10-06 14:57:11,561 - [test_login05.py - line:57] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-06 14:57:11,657 - [test_login05.py - line:57] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-06 14:57:11,752 - [test_login05.py - line:57] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-06 14:57:11,853 - [test_login05.py - line:52] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzUzMzQzMS43NTc0Njc1OjMwOWNmYTgzYjY4MjI0ZWQ2MTdiMTkzN2Y3NzdlY2Q2MmY0MGViZDg='}
2021-10-06 14:57:11,853 - [test_login05.py - line:53] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzUzMzQzM[64 chars]Dg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzUzMzQzMS43NTc0Njc1OjMwOWNmYTgzYjY4MjI0ZWQ2MTdiMTkzN2Y3NzdlY2Q2MmY0MGViZDg='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzUzMzQzM[64 chars]Dg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzUzMzQzMS43NTc0Njc1OjMwOWNmYTgzYjY4MjI0ZWQ2MTdiMTkzN2Y3NzdlY2Q2MmY0MGViZDg='}
2021-10-06 14:57:11,954 - [test_login05.py - line:57] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-06 14:57:12,049 - [test_login05.py - line:52] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzUzMzQzMS45NTk5MjY2OjZiNmUxNDEwZDczMGE3NjY0NjdiOTRhODQxMDhkMDkxYTcyMzZjNTM='}
2021-10-06 14:57:12,049 - [test_login05.py - line:53] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzUzMzQzM[64 chars]TM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzUzMzQzMS45NTk5MjY2OjZiNmUxNDEwZDczMGE3NjY0NjdiOTRhODQxMDhkMDkxYTcyMzZjNTM='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzUzMzQzM[64 chars]TM='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzUzMzQzMS45NTk5MjY2OjZiNmUxNDEwZDczMGE3NjY0NjdiOTRhODQxMDhkMDkxYTcyMzZjNTM='}
2021-10-06 14:57:12,157 - [test_login05.py - line:57] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-06 14:57:12,259 - [test_login05.py - line:57] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-06 14:57:12,372 - [test_login05.py - line:57] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-06 14:57:12,476 - [test_login05.py - line:57] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-06 14:57:12,570 - [test_login05.py - line:57] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-06 15:58:00,934 - [test_business_token_order_items01.py - line:61] - INFO:测试编号1,测试用例标题:订单信息查询正常流程,执行成功!
2021-10-06 15:58:20,844 - [test_business_token_order_items01.py - line:61] - INFO:测试编号1,测试用例标题:订单信息查询正常流程,执行成功!
2021-10-06 15:58:27,990 - [test_business_token_order_items01.py - line:61] - INFO:测试编号1,测试用例标题:订单信息查询正常流程,执行成功!
2021-10-06 15:58:29,854 - [test_business_token_order_items01.py - line:61] - INFO:测试编号1,测试用例标题:订单信息查询正常流程,执行成功!
2021-10-06 16:02:32,899 - [test_business_token_order_items01.py - line:62] - INFO:测试编号1,测试用例标题:订单信息查询正常流程,执行成功!
2021-10-07 09:39:13,134 - [test_business_token_order_items02.py - line:66] - INFO:测试编号1,测试用例标题:订单信息查询正常流程,执行成功!
2021-10-07 09:39:13,259 - [test_business_token_order_items02.py - line:66] - INFO:测试编号2,测试用例标题:orderId为空,执行成功!
2021-10-07 09:39:13,384 - [test_business_token_order_items02.py - line:66] - INFO:测试编号3,测试用例标题:订单编号输入非5位的数字,执行成功!
2021-10-07 09:39:13,540 - [test_business_token_order_items02.py - line:66] - INFO:测试编号4,测试用例标题:订单编号输入非数字,执行成功!
2021-10-07 09:39:13,665 - [test_business_token_order_items02.py - line:66] - INFO:测试编号5,测试用例标题:订单编号输入不存在的编号,执行成功!
2021-10-07 09:39:16,367 - [test_business_token_order_items02.py - line:66] - INFO:测试编号1,测试用例标题:订单信息查询正常流程,执行成功!
2021-10-07 09:39:16,492 - [test_business_token_order_items02.py - line:66] - INFO:测试编号2,测试用例标题:orderId为空,执行成功!
2021-10-07 09:39:16,602 - [test_business_token_order_items02.py - line:66] - INFO:测试编号3,测试用例标题:订单编号输入非5位的数字,执行成功!
2021-10-07 09:39:16,711 - [test_business_token_order_items02.py - line:66] - INFO:测试编号4,测试用例标题:订单编号输入非数字,执行成功!
2021-10-07 09:39:16,836 - [test_business_token_order_items02.py - line:66] - INFO:测试编号5,测试用例标题:订单编号输入不存在的编号,执行成功!
2021-10-07 09:39:19,179 - [test_business_token_order_items02.py - line:66] - INFO:测试编号1,测试用例标题:订单信息查询正常流程,执行成功!
2021-10-07 09:39:19,304 - [test_business_token_order_items02.py - line:66] - INFO:测试编号2,测试用例标题:orderId为空,执行成功!
2021-10-07 09:39:19,413 - [test_business_token_order_items02.py - line:66] - INFO:测试编号3,测试用例标题:订单编号输入非5位的数字,执行成功!
2021-10-07 09:39:19,538 - [test_business_token_order_items02.py - line:66] - INFO:测试编号4,测试用例标题:订单编号输入非数字,执行成功!
2021-10-07 09:39:19,648 - [test_business_token_order_items02.py - line:66] - INFO:测试编号5,测试用例标题:订单编号输入不存在的编号,执行成功!
2021-10-07 09:39:32,691 - [test_business_register03.py - line:64] - INFO:测试编号1,测试用例标题:注册正常流程,执行成功!
2021-10-07 09:39:32,801 - [test_business_register03.py - line:64] - INFO:测试编号2,测试用例标题:测试性别、生日、qq、email不输入的场景,执行成功!
2021-10-07 09:39:32,910 - [test_business_register03.py - line:64] - INFO:测试编号3,测试用例标题:测试用户名有效边界值的场景,执行成功!
2021-10-07 09:39:33,035 - [test_business_register03.py - line:64] - INFO:测试编号4,测试用例标题:测试密码有效边界值的场景,执行成功!
2021-10-07 09:39:33,144 - [test_business_register03.py - line:64] - INFO:测试编号5,测试用例标题:测试qq号有效边界值的场景,执行成功!
2021-10-07 09:39:33,238 - [test_business_register03.py - line:59] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-07 09:39:33,238 - [test_business_register03.py - line:60] - ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-07 09:39:33,348 - [test_business_register03.py - line:59] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-07 09:39:33,348 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-07 09:39:33,473 - [test_business_register03.py - line:59] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-07 09:39:33,473 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-07 09:39:33,582 - [test_business_register03.py - line:64] - INFO:测试编号9,测试用例标题:测试用户名无效边界值的场景,执行成功!
2021-10-07 09:39:33,691 - [test_business_register03.py - line:64] - INFO:测试编号10,测试用例标题:测试用户名为空的场景,执行成功!
2021-10-07 09:39:33,801 - [test_business_register03.py - line:64] - INFO:测试编号11,测试用例标题:测试用户名非字母开头的场景,执行成功!
2021-10-07 09:39:33,894 - [test_business_register03.py - line:64] - INFO:测试编号12,测试用例标题:测试用户名包含符号或者汉字的场景,执行成功!
2021-10-07 09:39:34,004 - [test_business_register03.py - line:64] - INFO:测试编号13,测试用例标题:测试用户名已存在的场景,执行成功!
2021-10-07 09:39:34,113 - [test_business_register03.py - line:64] - INFO:测试编号14,测试用例标题:测试密码无效边界值的场景,执行成功!
2021-10-07 09:39:34,207 - [test_business_register03.py - line:64] - INFO:测试编号15,测试用例标题:测试密码为空的场景,执行成功!
2021-10-07 09:39:34,316 - [test_business_register03.py - line:64] - INFO:测试编号16,测试用例标题:测试密码包含符号或者汉字的场景,执行成功!
2021-10-07 09:39:34,410 - [test_business_register03.py - line:64] - INFO:测试编号17,测试用例标题:测试确认密码大小写区分的场景,执行成功!
2021-10-07 09:39:34,519 - [test_business_register03.py - line:64] - INFO:测试编号18,测试用例标题:测试确认密码和密码不一致的场景,执行成功!
2021-10-07 09:39:34,629 - [test_business_register03.py - line:64] - INFO:测试编号19,测试用例标题:测试确认密码为空的场景,执行成功!
2021-10-07 09:39:34,722 - [test_business_register03.py - line:64] - INFO:测试编号20,测试用例标题:测试手机号为空的场景,执行成功!
2021-10-07 09:39:34,832 - [test_business_register03.py - line:64] - INFO:测试编号21,测试用例标题:测试手机号非11位的场景,执行成功!
2021-10-07 09:39:34,925 - [test_business_register03.py - line:64] - INFO:测试编号22,测试用例标题:测试手机号已注册的场景,执行成功!
2021-10-07 09:39:35,035 - [test_business_register03.py - line:64] - INFO:测试编号23,测试用例标题:测试手机号非数字的场景,执行成功!
2021-10-07 09:39:35,160 - [test_business_register03.py - line:64] - INFO:测试编号24,测试用例标题:测试性别非枚举的场景,执行成功!
2021-10-07 09:39:35,253 - [test_business_register03.py - line:64] - INFO:测试编号25,测试用例标题:测试性别男+女的场景,执行成功!
2021-10-07 09:39:35,363 - [test_business_register03.py - line:64] - INFO:测试编号26,测试用例标题:测试生日年月日不完整的场景,执行成功!
2021-10-07 09:39:35,472 - [test_business_register03.py - line:64] - INFO:测试编号27,测试用例标题:测试生日输入非数字的场景,执行成功!
2021-10-07 09:39:35,581 - [test_business_register03.py - line:64] - INFO:测试编号28,测试用例标题:测试生日输入不存在的日期的场景,执行成功!
2021-10-07 09:39:35,675 - [test_business_register03.py - line:64] - INFO:测试编号29,测试用例标题:测试QQ号码无效边界值的场景,执行成功!
2021-10-07 09:39:35,784 - [test_business_register03.py - line:64] - INFO:测试编号30,测试用例标题:测试QQ号码非数字的场景,执行成功!
2021-10-07 09:39:35,878 - [test_business_register03.py - line:64] - INFO:测试编号31,测试用例标题:测试邮箱格式错误的场景,执行成功!
2021-10-07 09:39:35,988 - [test_business_register03.py - line:64] - INFO:测试编号32,测试用例标题:测试邮箱为已注册邮箱的场景,执行成功!
2021-10-07 09:39:36,097 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号1,测试用例标题:商品信息查询正常流程_无条件查询,执行成功!
2021-10-07 09:39:36,206 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号2,测试用例标题:测试token值为空的场景,执行成功!
2021-10-07 09:39:36,300 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号3,测试用例标题:测试错误的token场景,执行成功!
2021-10-07 09:39:36,409 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号4,测试用例标题:测试token值大小写区分的场景,执行成功!
2021-10-07 09:39:36,534 - [test_business_token_goodsInfo03.py - line:69] - ERROR:测试编号5,测试用例标题:测试上一次的token的场景,执行失败,实际结果为:{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone11', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '三星note7', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '华为P40', 'shopPrice': 6000.0, 'promotePrice': 0.0, 'num': 666}, {'goodsName': '华为P50', 'shopPrice': 4500.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米11', 'shopPrice': 4000.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '三星s21', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}]}!
2021-10-07 09:39:36,534 - [test_business_token_goodsInfo03.py - line:70] - ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[539 chars]99}]}
Diff is 1185 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 66, in test_token_goods_info
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[539 chars]99}]}
Diff is 1185 characters long. Set self.maxDiff to None to see it.
2021-10-07 09:39:36,659 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号6,测试用例标题:测试goodsId格式错误的场景,执行成功!
2021-10-07 09:39:36,769 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号7,测试用例标题:测试goodsId不存在的场景,执行成功!
2021-10-07 09:39:36,878 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号8,测试用例标题:测试isOnSale为非枚举的场景,执行成功!
2021-10-07 09:39:36,987 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号9,测试用例标题:测试isOnSale状态不对应的场景,执行成功!
2021-10-07 09:39:37,097 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号10,测试用例标题:测试isPromote为非枚举的场景,执行成功!
2021-10-07 09:39:37,222 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号11,测试用例标题:测试isPromote状态不对应的场景,执行成功!
2021-10-07 09:39:37,347 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号12,测试用例标题:测试商品编号正确+isOnSale为0+isPromote为空的场景,执行成功!
2021-10-07 09:39:37,456 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号13,测试用例标题:测试商品编号正确+isOnSale为空+isPromote为0的场景,执行成功!
2021-10-07 09:39:37,565 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号14,测试用例标题:测试商品编号正确+isOnSale为1+isPromote为空的场景,执行成功!
2021-10-07 09:39:37,706 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号15,测试用例标题:测试商品编号正确+isOnSale为空+isPromote为1的场景,执行成功!
2021-10-07 09:39:37,815 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号16,测试用例标题:测试商品编号为空+isOnSale为0+isPromote为0的场景,执行成功!
2021-10-07 09:39:37,925 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号17,测试用例标题:测试商品编号为空+isOnSale为1+isPromote为1的场景,执行成功!
2021-10-07 09:39:38,034 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号18,测试用例标题:测试商品编号为空+isOnSale为1+isPromote为0的场景,执行成功!
2021-10-07 09:39:38,159 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号19,测试用例标题:测试商品编号为空+isOnSale为0+isPromote为1的场景,执行成功!
2021-10-07 09:39:38,284 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号20,测试用例标题:测试编号正确+isOnSale为0+isPromote为1的场景,执行成功!
2021-10-07 09:39:38,393 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号21,测试用例标题:测试编号正确+isOnSale为0+isPromote为0的场景,执行成功!
2021-10-07 09:39:38,487 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号22,测试用例标题:测试编号正确+isOnSale为1+isPromote为1的场景,执行成功!
2021-10-07 09:39:38,612 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号23,测试用例标题:测试编号正确+isOnSale为1+isPromote为0的场景,执行成功!
2021-10-07 09:39:38,737 - [test_login05.py - line:57] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-07 09:39:38,862 - [test_login05.py - line:57] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-07 09:39:38,956 - [test_login05.py - line:57] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-07 09:39:39,065 - [test_login05.py - line:52] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzYwMDc3OC45NzE3MzA1OmZiNDBiNzYyMmIzYzRkZGZmNjgyNWEwNWZlNWFhZThiOGY2YmY0NTg='}
2021-10-07 09:39:39,065 - [test_login05.py - line:53] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzYwMDc3O[64 chars]Tg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzYwMDc3OC45NzE3MzA1OmZiNDBiNzYyMmIzYzRkZGZmNjgyNWEwNWZlNWFhZThiOGY2YmY0NTg='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzYwMDc3O[64 chars]Tg='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzYwMDc3OC45NzE3MzA1OmZiNDBiNzYyMmIzYzRkZGZmNjgyNWEwNWZlNWFhZThiOGY2YmY0NTg='}
2021-10-07 09:39:39,174 - [test_login05.py - line:57] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-07 09:39:39,284 - [test_login05.py - line:52] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzYwMDc3OS4xNzQ4MDczOmE0YjBkNWNlNTM5MjY3MTI2NzE5MGNmNjNhZDQ5Y2Q1NzRkY2JhZDc='}
2021-10-07 09:39:39,284 - [test_login05.py - line:53] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzYwMDc3O[64 chars]Dc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzYwMDc3OS4xNzQ4MDczOmE0YjBkNWNlNTM5MjY3MTI2NzE5MGNmNjNhZDQ5Y2Q1NzRkY2JhZDc='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzYwMDc3O[64 chars]Dc='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzYwMDc3OS4xNzQ4MDczOmE0YjBkNWNlNTM5MjY3MTI2NzE5MGNmNjNhZDQ5Y2Q1NzRkY2JhZDc='}
2021-10-07 09:39:39,393 - [test_login05.py - line:57] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-07 09:39:39,502 - [test_login05.py - line:57] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-07 09:39:39,643 - [test_login05.py - line:57] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-07 09:39:39,752 - [test_login05.py - line:57] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-07 09:39:39,862 - [test_login05.py - line:57] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-07 09:39:39,987 - [test_business_token_order_items02.py - line:66] - INFO:测试编号1,测试用例标题:订单信息查询正常流程,执行成功!
2021-10-07 09:39:40,096 - [test_business_token_order_items02.py - line:66] - INFO:测试编号2,测试用例标题:orderId为空,执行成功!
2021-10-07 09:39:40,221 - [test_business_token_order_items02.py - line:66] - INFO:测试编号3,测试用例标题:订单编号输入非5位的数字,执行成功!
2021-10-07 09:39:40,330 - [test_business_token_order_items02.py - line:66] - INFO:测试编号4,测试用例标题:订单编号输入非数字,执行成功!
2021-10-07 09:39:40,440 - [test_business_token_order_items02.py - line:66] - INFO:测试编号5,测试用例标题:订单编号输入不存在的编号,执行成功!
2021-10-07 16:58:48,471 - [test_business_goods_input01.py - line:43] - INFO:测试编号1,测试用例标题:商品录入正常流程,执行成功!
2021-10-07 16:58:52,480 - [test_business_goods_input01.py - line:38] - ERROR:测试编号1,测试用例标题:商品录入正常流程,执行失败,实际结果为:{'code': 1013, 'msg': '产品名称不能重复'}!
2021-10-07 16:58:52,480 - [test_business_goods_input01.py - line:39] - ERROR: :: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1013, 'msg': '产品名称不能重复'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1000, 'msg': '商品录入成功'}
?            ^^          ^ ^^^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?            ^^          ^ ^^^^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input06\test_business_goods_input01.py", line 35, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1000, 'msg': '商品录入成功'} != {'code': 1013, 'msg': '产品名称不能重复'}
2021-10-07 17:03:28,746 - [test_business_goods_input02.py - line:56] - INFO:测试编号1,测试用例标题:商品录入正常流程,执行成功!
2021-10-07 17:03:35,240 - [test_business_goods_input02.py - line:56] - INFO:测试编号1,测试用例标题:商品录入正常流程,执行成功!
2021-10-07 17:03:38,063 - [test_business_goods_input02.py - line:56] - INFO:测试编号1,测试用例标题:商品录入正常流程,执行成功!
2021-10-07 17:19:09,648 - [test_business_goods_input03.py - line:58] - INFO:测试编号1,测试用例标题:商品录入正常流程,执行成功!
2021-10-07 17:19:09,788 - [test_business_goods_input03.py - line:58] - INFO:测试编号2,测试用例标题:测试商品名输入为空,执行成功!
2021-10-07 17:19:09,920 - [test_business_goods_input03.py - line:58] - INFO:测试编号3,测试用例标题:测试商品名输入有效边界值,执行成功!
2021-10-07 17:19:10,048 - [test_business_goods_input03.py - line:58] - INFO:测试编号4,测试用例标题:测试商品名输入无效边界值,执行成功!
2021-10-07 17:19:10,184 - [test_business_goods_input03.py - line:58] - INFO:测试编号5,测试用例标题:测试商品名输入重复商品名,执行成功!
2021-10-07 17:19:10,314 - [test_business_goods_input03.py - line:58] - INFO:测试编号6,测试用例标题:测试商品分类id输入为空,执行成功!
2021-10-07 17:19:10,444 - [test_business_goods_input03.py - line:58] - INFO:测试编号7,测试用例标题:测试商品分类id输入非数字,执行成功!
2021-10-07 17:19:10,575 - [test_business_goods_input03.py - line:58] - INFO:测试编号8,测试用例标题:测试商品分类id输入非5位数字,执行成功!
2021-10-07 17:19:10,705 - [test_business_goods_input03.py - line:58] - INFO:测试编号9,测试用例标题:测试商品分类id输入不存在的商品分类id,执行成功!
2021-10-07 17:19:10,839 - [test_business_goods_input03.py - line:58] - INFO:测试编号10,测试用例标题:测试商品描述输入为空,执行成功!
2021-10-07 17:19:10,973 - [test_business_goods_input03.py - line:58] - INFO:测试编号11,测试用例标题:测试商品描述输入有效边界值,执行成功!
2021-10-07 17:19:11,104 - [test_business_goods_input03.py - line:58] - INFO:测试编号12,测试用例标题:测试商品描述输入无效边界值,执行成功!
2021-10-07 17:19:11,234 - [test_business_goods_input03.py - line:58] - INFO:测试编号13,测试用例标题:测试商品库存输入为空,执行成功!
2021-10-07 17:19:11,369 - [test_business_goods_input03.py - line:58] - INFO:测试编号14,测试用例标题:测试商品库存输入0,执行成功!
2021-10-07 17:19:11,500 - [test_business_goods_input03.py - line:58] - INFO:测试编号15,测试用例标题:测试商品库存输入为负数,执行成功!
2021-10-07 17:19:11,631 - [test_business_goods_input03.py - line:58] - INFO:测试编号16,测试用例标题:测试商品库存输入为非数字,执行成功!
2021-10-07 17:19:11,759 - [test_business_goods_input03.py - line:58] - INFO:测试编号17,测试用例标题:测试商品库存输入非整数,执行成功!
2021-10-07 17:19:11,893 - [test_business_goods_input03.py - line:58] - INFO:测试编号18,测试用例标题:测试商品库存输入有效边界值,执行成功!
2021-10-07 17:19:12,023 - [test_business_goods_input03.py - line:58] - INFO:测试编号19,测试用例标题:测试商品库存输入无效边界值,执行成功!
2021-10-07 17:19:12,180 - [test_business_goods_input03.py - line:58] - INFO:测试编号20,测试用例标题:测试商品价格输入为空,执行成功!
2021-10-07 17:19:12,313 - [test_business_goods_input03.py - line:53] - ERROR:测试编号21,测试用例标题:测试商品价格输入0.00,执行失败,实际结果为:{'code': 1013, 'msg': '产品名称不能重复'}!
2021-10-07 17:19:12,313 - [test_business_goods_input03.py - line:54] - ERROR: :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input06\test_business_goods_input03.py", line 45, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
2021-10-07 17:19:12,443 - [test_business_goods_input03.py - line:58] - INFO:测试编号22,测试用例标题:测试商品价格输入负数,执行成功!
2021-10-07 17:19:12,572 - [test_business_goods_input03.py - line:58] - INFO:测试编号23,测试用例标题:测试商品价格输入为非数字,执行成功!
2021-10-07 17:19:12,702 - [test_business_goods_input03.py - line:58] - INFO:测试编号24,测试用例标题:测试商品价格输入非两位的小数点,执行成功!
2021-10-07 17:19:12,835 - [test_business_goods_input03.py - line:58] - INFO:测试编号25,测试用例标题:测试商品价格输入有效边界值,执行成功!
2021-10-07 17:19:12,964 - [test_business_goods_input03.py - line:58] - INFO:测试编号26,测试用例标题:测试商品价格输入无效边界值,执行成功!
2021-10-07 17:19:57,437 - [test_business_goods_input03.py - line:58] - INFO:测试编号1,测试用例标题:商品录入正常流程,执行成功!
2021-10-07 17:19:57,570 - [test_business_goods_input03.py - line:58] - INFO:测试编号2,测试用例标题:测试商品名输入为空,执行成功!
2021-10-07 17:19:57,701 - [test_business_goods_input03.py - line:58] - INFO:测试编号3,测试用例标题:测试商品名输入有效边界值,执行成功!
2021-10-07 17:19:57,831 - [test_business_goods_input03.py - line:58] - INFO:测试编号4,测试用例标题:测试商品名输入无效边界值,执行成功!
2021-10-07 17:19:57,968 - [test_business_goods_input03.py - line:58] - INFO:测试编号5,测试用例标题:测试商品名输入重复商品名,执行成功!
2021-10-07 17:19:58,095 - [test_business_goods_input03.py - line:58] - INFO:测试编号6,测试用例标题:测试商品分类id输入为空,执行成功!
2021-10-07 17:19:58,240 - [test_business_goods_input03.py - line:58] - INFO:测试编号7,测试用例标题:测试商品分类id输入非数字,执行成功!
2021-10-07 17:19:58,403 - [test_business_goods_input03.py - line:58] - INFO:测试编号8,测试用例标题:测试商品分类id输入非5位数字,执行成功!
2021-10-07 17:19:58,535 - [test_business_goods_input03.py - line:58] - INFO:测试编号9,测试用例标题:测试商品分类id输入不存在的商品分类id,执行成功!
2021-10-07 17:19:58,668 - [test_business_goods_input03.py - line:58] - INFO:测试编号10,测试用例标题:测试商品描述输入为空,执行成功!
2021-10-07 17:19:58,803 - [test_business_goods_input03.py - line:58] - INFO:测试编号11,测试用例标题:测试商品描述输入有效边界值,执行成功!
2021-10-07 17:19:58,937 - [test_business_goods_input03.py - line:58] - INFO:测试编号12,测试用例标题:测试商品描述输入无效边界值,执行成功!
2021-10-07 17:19:59,068 - [test_business_goods_input03.py - line:58] - INFO:测试编号13,测试用例标题:测试商品库存输入为空,执行成功!
2021-10-07 17:19:59,199 - [test_business_goods_input03.py - line:58] - INFO:测试编号14,测试用例标题:测试商品库存输入0,执行成功!
2021-10-07 17:19:59,328 - [test_business_goods_input03.py - line:58] - INFO:测试编号15,测试用例标题:测试商品库存输入为负数,执行成功!
2021-10-07 17:19:59,462 - [test_business_goods_input03.py - line:58] - INFO:测试编号16,测试用例标题:测试商品库存输入为非数字,执行成功!
2021-10-07 17:19:59,593 - [test_business_goods_input03.py - line:58] - INFO:测试编号17,测试用例标题:测试商品库存输入非整数,执行成功!
2021-10-07 17:19:59,727 - [test_business_goods_input03.py - line:58] - INFO:测试编号18,测试用例标题:测试商品库存输入有效边界值,执行成功!
2021-10-07 17:19:59,858 - [test_business_goods_input03.py - line:58] - INFO:测试编号19,测试用例标题:测试商品库存输入无效边界值,执行成功!
2021-10-07 17:20:00,001 - [test_business_goods_input03.py - line:58] - INFO:测试编号20,测试用例标题:测试商品价格输入为空,执行成功!
2021-10-07 17:20:00,138 - [test_business_goods_input03.py - line:53] - ERROR:测试编号21,测试用例标题:测试商品价格输入0.00,执行失败,实际结果为:{'code': 1000, 'msg': '商品录入成功'}!
2021-10-07 17:20:00,138 - [test_business_goods_input03.py - line:54] - ERROR: :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1000, 'msg': '商品录入成功'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1000, 'msg': '商品录入成功'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?            ^             ^^^^^^^

+ {'code': 1000, 'msg': '商品录入成功'}
?            ^             ^^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input06\test_business_goods_input03.py", line 45, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1000, 'msg': '商品录入成功'}
2021-10-07 17:20:00,269 - [test_business_goods_input03.py - line:58] - INFO:测试编号22,测试用例标题:测试商品价格输入负数,执行成功!
2021-10-07 17:20:00,398 - [test_business_goods_input03.py - line:58] - INFO:测试编号23,测试用例标题:测试商品价格输入为非数字,执行成功!
2021-10-07 17:20:00,531 - [test_business_goods_input03.py - line:58] - INFO:测试编号24,测试用例标题:测试商品价格输入非两位的小数点,执行成功!
2021-10-07 17:20:00,665 - [test_business_goods_input03.py - line:58] - INFO:测试编号25,测试用例标题:测试商品价格输入有效边界值,执行成功!
2021-10-07 17:20:00,795 - [test_business_goods_input03.py - line:58] - INFO:测试编号26,测试用例标题:测试商品价格输入无效边界值,执行成功!
2021-10-07 17:21:15,594 - [test_business_goods_input03.py - line:58] - INFO:测试编号1,测试用例标题:商品录入正常流程,执行成功!
2021-10-07 17:21:15,722 - [test_business_goods_input03.py - line:58] - INFO:测试编号2,测试用例标题:测试商品名输入为空,执行成功!
2021-10-07 17:21:15,859 - [test_business_goods_input03.py - line:58] - INFO:测试编号3,测试用例标题:测试商品名输入有效边界值,执行成功!
2021-10-07 17:21:15,991 - [test_business_goods_input03.py - line:58] - INFO:测试编号4,测试用例标题:测试商品名输入无效边界值,执行成功!
2021-10-07 17:21:16,133 - [test_business_goods_input03.py - line:58] - INFO:测试编号5,测试用例标题:测试商品名输入重复商品名,执行成功!
2021-10-07 17:21:16,265 - [test_business_goods_input03.py - line:58] - INFO:测试编号6,测试用例标题:测试商品分类id输入为空,执行成功!
2021-10-07 17:21:16,394 - [test_business_goods_input03.py - line:58] - INFO:测试编号7,测试用例标题:测试商品分类id输入非数字,执行成功!
2021-10-07 17:21:16,523 - [test_business_goods_input03.py - line:58] - INFO:测试编号8,测试用例标题:测试商品分类id输入非5位数字,执行成功!
2021-10-07 17:21:16,656 - [test_business_goods_input03.py - line:58] - INFO:测试编号9,测试用例标题:测试商品分类id输入不存在的商品分类id,执行成功!
2021-10-07 17:21:16,791 - [test_business_goods_input03.py - line:58] - INFO:测试编号10,测试用例标题:测试商品描述输入为空,执行成功!
2021-10-07 17:21:16,923 - [test_business_goods_input03.py - line:58] - INFO:测试编号11,测试用例标题:测试商品描述输入有效边界值,执行成功!
2021-10-07 17:21:17,052 - [test_business_goods_input03.py - line:58] - INFO:测试编号12,测试用例标题:测试商品描述输入无效边界值,执行成功!
2021-10-07 17:21:17,184 - [test_business_goods_input03.py - line:58] - INFO:测试编号13,测试用例标题:测试商品库存输入为空,执行成功!
2021-10-07 17:21:17,331 - [test_business_goods_input03.py - line:58] - INFO:测试编号14,测试用例标题:测试商品库存输入0,执行成功!
2021-10-07 17:21:17,462 - [test_business_goods_input03.py - line:58] - INFO:测试编号15,测试用例标题:测试商品库存输入为负数,执行成功!
2021-10-07 17:21:17,590 - [test_business_goods_input03.py - line:58] - INFO:测试编号16,测试用例标题:测试商品库存输入为非数字,执行成功!
2021-10-07 17:21:17,720 - [test_business_goods_input03.py - line:58] - INFO:测试编号17,测试用例标题:测试商品库存输入非整数,执行成功!
2021-10-07 17:21:17,857 - [test_business_goods_input03.py - line:58] - INFO:测试编号18,测试用例标题:测试商品库存输入有效边界值,执行成功!
2021-10-07 17:21:17,985 - [test_business_goods_input03.py - line:58] - INFO:测试编号19,测试用例标题:测试商品库存输入无效边界值,执行成功!
2021-10-07 17:21:18,126 - [test_business_goods_input03.py - line:58] - INFO:测试编号20,测试用例标题:测试商品价格输入为空,执行成功!
2021-10-07 17:21:18,260 - [test_business_goods_input03.py - line:53] - ERROR:测试编号21,测试用例标题:测试商品价格输入0.00,执行失败,实际结果为:{'code': 1013, 'msg': '产品名称不能重复'}!
2021-10-07 17:21:18,260 - [test_business_goods_input03.py - line:54] - ERROR: :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input06\test_business_goods_input03.py", line 45, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
2021-10-07 17:21:18,391 - [test_business_goods_input03.py - line:58] - INFO:测试编号22,测试用例标题:测试商品价格输入负数,执行成功!
2021-10-07 17:21:18,521 - [test_business_goods_input03.py - line:58] - INFO:测试编号23,测试用例标题:测试商品价格输入为非数字,执行成功!
2021-10-07 17:21:18,650 - [test_business_goods_input03.py - line:58] - INFO:测试编号24,测试用例标题:测试商品价格输入非两位的小数点,执行成功!
2021-10-07 17:21:18,781 - [test_business_goods_input03.py - line:58] - INFO:测试编号25,测试用例标题:测试商品价格输入有效边界值,执行成功!
2021-10-07 17:21:18,911 - [test_business_goods_input03.py - line:58] - INFO:测试编号26,测试用例标题:测试商品价格输入无效边界值,执行成功!
2021-10-07 17:22:45,247 - [test_business_goods_input03.py - line:58] - INFO:测试编号1,测试用例标题:商品录入正常流程,执行成功!
2021-10-07 17:22:45,378 - [test_business_goods_input03.py - line:58] - INFO:测试编号2,测试用例标题:测试商品名输入为空,执行成功!
2021-10-07 17:22:45,515 - [test_business_goods_input03.py - line:58] - INFO:测试编号3,测试用例标题:测试商品名输入有效边界值,执行成功!
2021-10-07 17:22:45,644 - [test_business_goods_input03.py - line:58] - INFO:测试编号4,测试用例标题:测试商品名输入无效边界值,执行成功!
2021-10-07 17:22:45,817 - [test_business_goods_input03.py - line:58] - INFO:测试编号5,测试用例标题:测试商品名输入重复商品名,执行成功!
2021-10-07 17:22:45,971 - [test_business_goods_input03.py - line:58] - INFO:测试编号6,测试用例标题:测试商品分类id输入为空,执行成功!
2021-10-07 17:22:46,100 - [test_business_goods_input03.py - line:58] - INFO:测试编号7,测试用例标题:测试商品分类id输入非数字,执行成功!
2021-10-07 17:22:46,235 - [test_business_goods_input03.py - line:58] - INFO:测试编号8,测试用例标题:测试商品分类id输入非5位数字,执行成功!
2021-10-07 17:22:46,365 - [test_business_goods_input03.py - line:58] - INFO:测试编号9,测试用例标题:测试商品分类id输入不存在的商品分类id,执行成功!
2021-10-07 17:22:46,502 - [test_business_goods_input03.py - line:58] - INFO:测试编号10,测试用例标题:测试商品描述输入为空,执行成功!
2021-10-07 17:22:46,636 - [test_business_goods_input03.py - line:58] - INFO:测试编号11,测试用例标题:测试商品描述输入有效边界值,执行成功!
2021-10-07 17:22:46,768 - [test_business_goods_input03.py - line:58] - INFO:测试编号12,测试用例标题:测试商品描述输入无效边界值,执行成功!
2021-10-07 17:22:46,899 - [test_business_goods_input03.py - line:58] - INFO:测试编号13,测试用例标题:测试商品库存输入为空,执行成功!
2021-10-07 17:22:47,037 - [test_business_goods_input03.py - line:58] - INFO:测试编号14,测试用例标题:测试商品库存输入0,执行成功!
2021-10-07 17:22:47,182 - [test_business_goods_input03.py - line:58] - INFO:测试编号15,测试用例标题:测试商品库存输入为负数,执行成功!
2021-10-07 17:22:47,317 - [test_business_goods_input03.py - line:58] - INFO:测试编号16,测试用例标题:测试商品库存输入为非数字,执行成功!
2021-10-07 17:22:47,448 - [test_business_goods_input03.py - line:58] - INFO:测试编号17,测试用例标题:测试商品库存输入非整数,执行成功!
2021-10-07 17:22:47,588 - [test_business_goods_input03.py - line:58] - INFO:测试编号18,测试用例标题:测试商品库存输入有效边界值,执行成功!
2021-10-07 17:22:47,720 - [test_business_goods_input03.py - line:58] - INFO:测试编号19,测试用例标题:测试商品库存输入无效边界值,执行成功!
2021-10-07 17:22:47,866 - [test_business_goods_input03.py - line:58] - INFO:测试编号20,测试用例标题:测试商品价格输入为空,执行成功!
2021-10-07 17:22:47,999 - [test_business_goods_input03.py - line:53] - ERROR:测试编号21,测试用例标题:测试商品价格输入0.00,执行失败,实际结果为:{'code': 1000, 'msg': '商品录入成功'}!
2021-10-07 17:22:48,000 - [test_business_goods_input03.py - line:54] - ERROR: :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1000, 'msg': '商品录入成功'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1000, 'msg': '商品录入成功'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?            ^             ^^^^^^^

+ {'code': 1000, 'msg': '商品录入成功'}
?            ^             ^^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input06\test_business_goods_input03.py", line 45, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1000, 'msg': '商品录入成功'}
2021-10-07 17:22:48,131 - [test_business_goods_input03.py - line:58] - INFO:测试编号22,测试用例标题:测试商品价格输入负数,执行成功!
2021-10-07 17:22:48,259 - [test_business_goods_input03.py - line:58] - INFO:测试编号23,测试用例标题:测试商品价格输入为非数字,执行成功!
2021-10-07 17:22:48,389 - [test_business_goods_input03.py - line:58] - INFO:测试编号24,测试用例标题:测试商品价格输入非两位的小数点,执行成功!
2021-10-07 17:22:48,525 - [test_business_goods_input03.py - line:58] - INFO:测试编号25,测试用例标题:测试商品价格输入有效边界值,执行成功!
2021-10-07 17:22:48,655 - [test_business_goods_input03.py - line:58] - INFO:测试编号26,测试用例标题:测试商品价格输入无效边界值,执行成功!
2021-10-07 17:22:54,911 - [test_business_goods_input03.py - line:58] - INFO:测试编号1,测试用例标题:商品录入正常流程,执行成功!
2021-10-07 17:22:55,040 - [test_business_goods_input03.py - line:58] - INFO:测试编号2,测试用例标题:测试商品名输入为空,执行成功!
2021-10-07 17:22:55,172 - [test_business_goods_input03.py - line:58] - INFO:测试编号3,测试用例标题:测试商品名输入有效边界值,执行成功!
2021-10-07 17:22:55,302 - [test_business_goods_input03.py - line:58] - INFO:测试编号4,测试用例标题:测试商品名输入无效边界值,执行成功!
2021-10-07 17:22:55,440 - [test_business_goods_input03.py - line:58] - INFO:测试编号5,测试用例标题:测试商品名输入重复商品名,执行成功!
2021-10-07 17:22:55,569 - [test_business_goods_input03.py - line:58] - INFO:测试编号6,测试用例标题:测试商品分类id输入为空,执行成功!
2021-10-07 17:22:55,698 - [test_business_goods_input03.py - line:58] - INFO:测试编号7,测试用例标题:测试商品分类id输入非数字,执行成功!
2021-10-07 17:22:55,827 - [test_business_goods_input03.py - line:58] - INFO:测试编号8,测试用例标题:测试商品分类id输入非5位数字,执行成功!
2021-10-07 17:22:55,956 - [test_business_goods_input03.py - line:58] - INFO:测试编号9,测试用例标题:测试商品分类id输入不存在的商品分类id,执行成功!
2021-10-07 17:22:56,089 - [test_business_goods_input03.py - line:58] - INFO:测试编号10,测试用例标题:测试商品描述输入为空,执行成功!
2021-10-07 17:22:56,221 - [test_business_goods_input03.py - line:58] - INFO:测试编号11,测试用例标题:测试商品描述输入有效边界值,执行成功!
2021-10-07 17:22:56,350 - [test_business_goods_input03.py - line:58] - INFO:测试编号12,测试用例标题:测试商品描述输入无效边界值,执行成功!
2021-10-07 17:22:56,479 - [test_business_goods_input03.py - line:58] - INFO:测试编号13,测试用例标题:测试商品库存输入为空,执行成功!
2021-10-07 17:22:56,613 - [test_business_goods_input03.py - line:58] - INFO:测试编号14,测试用例标题:测试商品库存输入0,执行成功!
2021-10-07 17:22:56,742 - [test_business_goods_input03.py - line:58] - INFO:测试编号15,测试用例标题:测试商品库存输入为负数,执行成功!
2021-10-07 17:22:56,868 - [test_business_goods_input03.py - line:58] - INFO:测试编号16,测试用例标题:测试商品库存输入为非数字,执行成功!
2021-10-07 17:22:56,996 - [test_business_goods_input03.py - line:58] - INFO:测试编号17,测试用例标题:测试商品库存输入非整数,执行成功!
2021-10-07 17:22:57,129 - [test_business_goods_input03.py - line:58] - INFO:测试编号18,测试用例标题:测试商品库存输入有效边界值,执行成功!
2021-10-07 17:22:57,259 - [test_business_goods_input03.py - line:58] - INFO:测试编号19,测试用例标题:测试商品库存输入无效边界值,执行成功!
2021-10-07 17:22:57,401 - [test_business_goods_input03.py - line:58] - INFO:测试编号20,测试用例标题:测试商品价格输入为空,执行成功!
2021-10-07 17:22:57,539 - [test_business_goods_input03.py - line:53] - ERROR:测试编号21,测试用例标题:测试商品价格输入0.00,执行失败,实际结果为:{'code': 1013, 'msg': '产品名称不能重复'}!
2021-10-07 17:22:57,539 - [test_business_goods_input03.py - line:54] - ERROR: :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input06\test_business_goods_input03.py", line 45, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
2021-10-07 17:22:57,675 - [test_business_goods_input03.py - line:58] - INFO:测试编号22,测试用例标题:测试商品价格输入负数,执行成功!
2021-10-07 17:22:57,803 - [test_business_goods_input03.py - line:58] - INFO:测试编号23,测试用例标题:测试商品价格输入为非数字,执行成功!
2021-10-07 17:22:57,929 - [test_business_goods_input03.py - line:58] - INFO:测试编号24,测试用例标题:测试商品价格输入非两位的小数点,执行成功!
2021-10-07 17:22:58,062 - [test_business_goods_input03.py - line:58] - INFO:测试编号25,测试用例标题:测试商品价格输入有效边界值,执行成功!
2021-10-07 17:22:58,191 - [test_business_goods_input03.py - line:58] - INFO:测试编号26,测试用例标题:测试商品价格输入无效边界值,执行成功!
2021-10-07 17:23:05,863 - [test_business_goods_input03.py - line:58] - INFO:测试编号1,测试用例标题:商品录入正常流程,执行成功!
2021-10-07 17:23:05,992 - [test_business_goods_input03.py - line:58] - INFO:测试编号2,测试用例标题:测试商品名输入为空,执行成功!
2021-10-07 17:23:06,127 - [test_business_goods_input03.py - line:58] - INFO:测试编号3,测试用例标题:测试商品名输入有效边界值,执行成功!
2021-10-07 17:23:06,260 - [test_business_goods_input03.py - line:58] - INFO:测试编号4,测试用例标题:测试商品名输入无效边界值,执行成功!
2021-10-07 17:23:06,402 - [test_business_goods_input03.py - line:58] - INFO:测试编号5,测试用例标题:测试商品名输入重复商品名,执行成功!
2021-10-07 17:23:06,530 - [test_business_goods_input03.py - line:58] - INFO:测试编号6,测试用例标题:测试商品分类id输入为空,执行成功!
2021-10-07 17:23:06,661 - [test_business_goods_input03.py - line:58] - INFO:测试编号7,测试用例标题:测试商品分类id输入非数字,执行成功!
2021-10-07 17:23:06,790 - [test_business_goods_input03.py - line:58] - INFO:测试编号8,测试用例标题:测试商品分类id输入非5位数字,执行成功!
2021-10-07 17:23:06,922 - [test_business_goods_input03.py - line:58] - INFO:测试编号9,测试用例标题:测试商品分类id输入不存在的商品分类id,执行成功!
2021-10-07 17:23:07,055 - [test_business_goods_input03.py - line:58] - INFO:测试编号10,测试用例标题:测试商品描述输入为空,执行成功!
2021-10-07 17:23:07,191 - [test_business_goods_input03.py - line:58] - INFO:测试编号11,测试用例标题:测试商品描述输入有效边界值,执行成功!
2021-10-07 17:23:07,320 - [test_business_goods_input03.py - line:58] - INFO:测试编号12,测试用例标题:测试商品描述输入无效边界值,执行成功!
2021-10-07 17:23:07,449 - [test_business_goods_input03.py - line:58] - INFO:测试编号13,测试用例标题:测试商品库存输入为空,执行成功!
2021-10-07 17:23:07,582 - [test_business_goods_input03.py - line:58] - INFO:测试编号14,测试用例标题:测试商品库存输入0,执行成功!
2021-10-07 17:23:07,713 - [test_business_goods_input03.py - line:58] - INFO:测试编号15,测试用例标题:测试商品库存输入为负数,执行成功!
2021-10-07 17:23:07,843 - [test_business_goods_input03.py - line:58] - INFO:测试编号16,测试用例标题:测试商品库存输入为非数字,执行成功!
2021-10-07 17:23:07,973 - [test_business_goods_input03.py - line:58] - INFO:测试编号17,测试用例标题:测试商品库存输入非整数,执行成功!
2021-10-07 17:23:08,106 - [test_business_goods_input03.py - line:58] - INFO:测试编号18,测试用例标题:测试商品库存输入有效边界值,执行成功!
2021-10-07 17:23:08,237 - [test_business_goods_input03.py - line:58] - INFO:测试编号19,测试用例标题:测试商品库存输入无效边界值,执行成功!
2021-10-07 17:23:08,381 - [test_business_goods_input03.py - line:58] - INFO:测试编号20,测试用例标题:测试商品价格输入为空,执行成功!
2021-10-07 17:23:08,511 - [test_business_goods_input03.py - line:53] - ERROR:测试编号21,测试用例标题:测试商品价格输入0.00,执行失败,实际结果为:{'code': 1013, 'msg': '产品名称不能重复'}!
2021-10-07 17:23:08,511 - [test_business_goods_input03.py - line:54] - ERROR: :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input06\test_business_goods_input03.py", line 45, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
2021-10-07 17:23:08,642 - [test_business_goods_input03.py - line:58] - INFO:测试编号22,测试用例标题:测试商品价格输入负数,执行成功!
2021-10-07 17:23:08,769 - [test_business_goods_input03.py - line:58] - INFO:测试编号23,测试用例标题:测试商品价格输入为非数字,执行成功!
2021-10-07 17:23:08,897 - [test_business_goods_input03.py - line:58] - INFO:测试编号24,测试用例标题:测试商品价格输入非两位的小数点,执行成功!
2021-10-07 17:23:09,031 - [test_business_goods_input03.py - line:58] - INFO:测试编号25,测试用例标题:测试商品价格输入有效边界值,执行成功!
2021-10-07 17:23:09,160 - [test_business_goods_input03.py - line:58] - INFO:测试编号26,测试用例标题:测试商品价格输入无效边界值,执行成功!
2021-10-07 17:23:45,295 - [test_business_goods_input03.py - line:58] - INFO:测试编号1,测试用例标题:商品录入正常流程,执行成功!
2021-10-07 17:23:45,427 - [test_business_goods_input03.py - line:58] - INFO:测试编号2,测试用例标题:测试商品名输入为空,执行成功!
2021-10-07 17:23:45,564 - [test_business_goods_input03.py - line:58] - INFO:测试编号3,测试用例标题:测试商品名输入有效边界值,执行成功!
2021-10-07 17:23:45,694 - [test_business_goods_input03.py - line:58] - INFO:测试编号4,测试用例标题:测试商品名输入无效边界值,执行成功!
2021-10-07 17:23:45,832 - [test_business_goods_input03.py - line:58] - INFO:测试编号5,测试用例标题:测试商品名输入重复商品名,执行成功!
2021-10-07 17:23:45,962 - [test_business_goods_input03.py - line:58] - INFO:测试编号6,测试用例标题:测试商品分类id输入为空,执行成功!
2021-10-07 17:23:46,091 - [test_business_goods_input03.py - line:58] - INFO:测试编号7,测试用例标题:测试商品分类id输入非数字,执行成功!
2021-10-07 17:23:46,220 - [test_business_goods_input03.py - line:58] - INFO:测试编号8,测试用例标题:测试商品分类id输入非5位数字,执行成功!
2021-10-07 17:23:46,351 - [test_business_goods_input03.py - line:58] - INFO:测试编号9,测试用例标题:测试商品分类id输入不存在的商品分类id,执行成功!
2021-10-07 17:23:46,486 - [test_business_goods_input03.py - line:58] - INFO:测试编号10,测试用例标题:测试商品描述输入为空,执行成功!
2021-10-07 17:23:46,619 - [test_business_goods_input03.py - line:58] - INFO:测试编号11,测试用例标题:测试商品描述输入有效边界值,执行成功!
2021-10-07 17:23:46,761 - [test_business_goods_input03.py - line:58] - INFO:测试编号12,测试用例标题:测试商品描述输入无效边界值,执行成功!
2021-10-07 17:23:46,890 - [test_business_goods_input03.py - line:58] - INFO:测试编号13,测试用例标题:测试商品库存输入为空,执行成功!
2021-10-07 17:23:47,022 - [test_business_goods_input03.py - line:58] - INFO:测试编号14,测试用例标题:测试商品库存输入0,执行成功!
2021-10-07 17:23:47,153 - [test_business_goods_input03.py - line:58] - INFO:测试编号15,测试用例标题:测试商品库存输入为负数,执行成功!
2021-10-07 17:23:47,282 - [test_business_goods_input03.py - line:58] - INFO:测试编号16,测试用例标题:测试商品库存输入为非数字,执行成功!
2021-10-07 17:23:47,412 - [test_business_goods_input03.py - line:58] - INFO:测试编号17,测试用例标题:测试商品库存输入非整数,执行成功!
2021-10-07 17:23:47,546 - [test_business_goods_input03.py - line:58] - INFO:测试编号18,测试用例标题:测试商品库存输入有效边界值,执行成功!
2021-10-07 17:23:47,678 - [test_business_goods_input03.py - line:58] - INFO:测试编号19,测试用例标题:测试商品库存输入无效边界值,执行成功!
2021-10-07 17:23:47,827 - [test_business_goods_input03.py - line:58] - INFO:测试编号20,测试用例标题:测试商品价格输入为空,执行成功!
2021-10-07 17:23:47,959 - [test_business_goods_input03.py - line:53] - ERROR:测试编号21,测试用例标题:测试商品价格输入0.00,执行失败,实际结果为:{'code': 1013, 'msg': '产品名称不能重复'}!
2021-10-07 17:23:47,959 - [test_business_goods_input03.py - line:54] - ERROR: :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input06\test_business_goods_input03.py", line 45, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
2021-10-07 17:23:48,090 - [test_business_goods_input03.py - line:58] - INFO:测试编号22,测试用例标题:测试商品价格输入负数,执行成功!
2021-10-07 17:23:48,219 - [test_business_goods_input03.py - line:58] - INFO:测试编号23,测试用例标题:测试商品价格输入为非数字,执行成功!
2021-10-07 17:23:48,347 - [test_business_goods_input03.py - line:58] - INFO:测试编号24,测试用例标题:测试商品价格输入非两位的小数点,执行成功!
2021-10-07 17:23:48,478 - [test_business_goods_input03.py - line:58] - INFO:测试编号25,测试用例标题:测试商品价格输入有效边界值,执行成功!
2021-10-07 17:23:48,611 - [test_business_goods_input03.py - line:58] - INFO:测试编号26,测试用例标题:测试商品价格输入无效边界值,执行成功!
2021-10-08 10:45:36,391 - [test_business_goods_promote01.py - line:52] - INFO:测试编号1,测试用例标题:商品促销设置正确流程,执行成功!
2021-10-08 10:51:02,751 - [test_business_goods_promote02.py - line:58] - INFO:测试编号1,测试用例标题:商品促销设置正确流程,执行成功!
2021-10-08 10:51:11,028 - [test_business_goods_promote02.py - line:58] - INFO:测试编号1,测试用例标题:商品促销设置正确流程,执行成功!
2021-10-08 10:51:13,404 - [test_business_goods_promote02.py - line:58] - INFO:测试编号1,测试用例标题:商品促销设置正确流程,执行成功!
2021-10-08 10:51:15,729 - [test_business_goods_promote02.py - line:58] - INFO:测试编号1,测试用例标题:商品促销设置正确流程,执行成功!
2021-10-08 11:05:39,721 - [test_business_goods_promote03.py - line:67] - INFO:测试编号1,测试用例标题:商品促销设置正确流程,执行成功!
2021-10-08 11:05:39,872 - [test_business_goods_promote03.py - line:67] - INFO:测试编号2,测试用例标题:测试促销开始时间为空,执行成功!
2021-10-08 11:05:40,027 - [test_business_goods_promote03.py - line:67] - INFO:测试编号3,测试用例标题:测试促销开始时间输入错误的格式:2021-9-01,执行成功!
2021-10-08 11:05:40,308 - [test_business_goods_promote03.py - line:67] - INFO:测试编号7,测试用例标题:测试促销开始时间小于当前时间,执行成功!
2021-10-08 11:05:40,458 - [test_business_goods_promote03.py - line:67] - INFO:测试编号8,测试用例标题:测试促销结束时间为空,执行成功!
2021-10-08 11:05:40,605 - [test_business_goods_promote03.py - line:67] - INFO:测试编号9,测试用例标题:测试促销结束时间格式错误的格式:2021-13-11,执行成功!
2021-10-08 11:05:40,825 - [test_business_goods_promote03.py - line:67] - INFO:测试编号13,测试用例标题:测试促销结束时间输入小于促销开始时间,执行成功!
2021-10-08 11:05:40,983 - [test_business_goods_promote03.py - line:67] - INFO:测试编号14,测试用例标题:测试促销结束时间输入等于促销开始时间,执行成功!
2021-10-08 11:05:41,133 - [test_business_goods_promote03.py - line:67] - INFO:测试编号15,测试用例标题:测试商品编号输入为空,执行成功!
2021-10-08 11:05:41,283 - [test_business_goods_promote03.py - line:67] - INFO:测试编号16,测试用例标题:测试商品编号输入非数字,执行成功!
2021-10-08 11:05:41,432 - [test_business_goods_promote03.py - line:67] - INFO:测试编号17,测试用例标题:测试商品编号输入非6位数字,执行成功!
2021-10-08 11:05:41,587 - [test_business_goods_promote03.py - line:67] - INFO:测试编号18,测试用例标题:测试商品编号输入已经在促销的,执行成功!
2021-10-08 11:05:41,737 - [test_business_goods_promote03.py - line:62] - ERROR:测试编号19,测试用例标题:测试商品编号输入不存在的,执行失败,实际结果为:{'code': 1011, 'msg': '该商品不存在'}!
2021-10-08 11:05:41,737 - [test_business_goods_promote03.py - line:63] - ERROR: :: {'code': 1007, 'msg': '商品编号格式不正确'} != {'code': 1011, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '商品编号格式不正确'} != {'code': 1011, 'msg': '该商品不存在'}
- {'code': 1007, 'msg': '商品编号格式不正确'}
?            ^^            ---- ^^

+ {'code': 1011, 'msg': '该商品不存在'}
?            ^^          +   ^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_goods_promote07\test_business_goods_promote03.py", line 53, in test_goods_promote
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1007, 'msg': '商品编号格式不正确'} != {'code': 1011, 'msg': '该商品不存在'}
2021-10-08 11:07:14,998 - [test_business_goods_promote03.py - line:67] - INFO:测试编号1,测试用例标题:商品促销设置正确流程,执行成功!
2021-10-08 11:07:15,154 - [test_business_goods_promote03.py - line:67] - INFO:测试编号2,测试用例标题:测试促销开始时间为空,执行成功!
2021-10-08 11:07:15,302 - [test_business_goods_promote03.py - line:67] - INFO:测试编号3,测试用例标题:测试促销开始时间输入错误的格式:2021-9-01,执行成功!
2021-10-08 11:07:15,528 - [test_business_goods_promote03.py - line:67] - INFO:测试编号7,测试用例标题:测试促销开始时间小于当前时间,执行成功!
2021-10-08 11:07:15,679 - [test_business_goods_promote03.py - line:67] - INFO:测试编号8,测试用例标题:测试促销结束时间为空,执行成功!
2021-10-08 11:07:15,826 - [test_business_goods_promote03.py - line:67] - INFO:测试编号9,测试用例标题:测试促销结束时间格式错误的格式:2021-13-11,执行成功!
2021-10-08 11:07:16,044 - [test_business_goods_promote03.py - line:67] - INFO:测试编号13,测试用例标题:测试促销结束时间输入小于促销开始时间,执行成功!
2021-10-08 11:07:16,204 - [test_business_goods_promote03.py - line:67] - INFO:测试编号14,测试用例标题:测试促销结束时间输入等于促销开始时间,执行成功!
2021-10-08 11:07:16,354 - [test_business_goods_promote03.py - line:67] - INFO:测试编号15,测试用例标题:测试商品编号输入为空,执行成功!
2021-10-08 11:07:16,506 - [test_business_goods_promote03.py - line:67] - INFO:测试编号16,测试用例标题:测试商品编号输入非数字,执行成功!
2021-10-08 11:07:16,661 - [test_business_goods_promote03.py - line:67] - INFO:测试编号17,测试用例标题:测试商品编号输入非6位数字,执行成功!
2021-10-08 11:07:16,815 - [test_business_goods_promote03.py - line:67] - INFO:测试编号18,测试用例标题:测试商品编号输入已经在促销的,执行成功!
2021-10-08 11:07:16,964 - [test_business_goods_promote03.py - line:67] - INFO:测试编号19,测试用例标题:测试商品编号输入不存在的,执行成功!
2021-10-08 11:07:19,840 - [test_business_goods_promote03.py - line:67] - INFO:测试编号1,测试用例标题:商品促销设置正确流程,执行成功!
2021-10-08 11:07:19,988 - [test_business_goods_promote03.py - line:67] - INFO:测试编号2,测试用例标题:测试促销开始时间为空,执行成功!
2021-10-08 11:07:20,142 - [test_business_goods_promote03.py - line:67] - INFO:测试编号3,测试用例标题:测试促销开始时间输入错误的格式:2021-9-01,执行成功!
2021-10-08 11:07:20,384 - [test_business_goods_promote03.py - line:67] - INFO:测试编号7,测试用例标题:测试促销开始时间小于当前时间,执行成功!
2021-10-08 11:07:20,533 - [test_business_goods_promote03.py - line:67] - INFO:测试编号8,测试用例标题:测试促销结束时间为空,执行成功!
2021-10-08 11:07:20,682 - [test_business_goods_promote03.py - line:67] - INFO:测试编号9,测试用例标题:测试促销结束时间格式错误的格式:2021-13-11,执行成功!
2021-10-08 11:07:20,900 - [test_business_goods_promote03.py - line:67] - INFO:测试编号13,测试用例标题:测试促销结束时间输入小于促销开始时间,执行成功!
2021-10-08 11:07:21,054 - [test_business_goods_promote03.py - line:67] - INFO:测试编号14,测试用例标题:测试促销结束时间输入等于促销开始时间,执行成功!
2021-10-08 11:07:21,207 - [test_business_goods_promote03.py - line:67] - INFO:测试编号15,测试用例标题:测试商品编号输入为空,执行成功!
2021-10-08 11:07:21,356 - [test_business_goods_promote03.py - line:67] - INFO:测试编号16,测试用例标题:测试商品编号输入非数字,执行成功!
2021-10-08 11:07:21,506 - [test_business_goods_promote03.py - line:67] - INFO:测试编号17,测试用例标题:测试商品编号输入非6位数字,执行成功!
2021-10-08 11:07:21,659 - [test_business_goods_promote03.py - line:67] - INFO:测试编号18,测试用例标题:测试商品编号输入已经在促销的,执行成功!
2021-10-08 11:07:21,816 - [test_business_goods_promote03.py - line:67] - INFO:测试编号19,测试用例标题:测试商品编号输入不存在的,执行成功!
2021-10-08 11:07:24,098 - [test_business_goods_promote03.py - line:67] - INFO:测试编号1,测试用例标题:商品促销设置正确流程,执行成功!
2021-10-08 11:07:24,248 - [test_business_goods_promote03.py - line:67] - INFO:测试编号2,测试用例标题:测试促销开始时间为空,执行成功!
2021-10-08 11:07:24,398 - [test_business_goods_promote03.py - line:67] - INFO:测试编号3,测试用例标题:测试促销开始时间输入错误的格式:2021-9-01,执行成功!
2021-10-08 11:07:24,620 - [test_business_goods_promote03.py - line:67] - INFO:测试编号7,测试用例标题:测试促销开始时间小于当前时间,执行成功!
2021-10-08 11:07:24,772 - [test_business_goods_promote03.py - line:67] - INFO:测试编号8,测试用例标题:测试促销结束时间为空,执行成功!
2021-10-08 11:07:24,921 - [test_business_goods_promote03.py - line:67] - INFO:测试编号9,测试用例标题:测试促销结束时间格式错误的格式:2021-13-11,执行成功!
2021-10-08 11:07:25,132 - [test_business_goods_promote03.py - line:67] - INFO:测试编号13,测试用例标题:测试促销结束时间输入小于促销开始时间,执行成功!
2021-10-08 11:07:25,283 - [test_business_goods_promote03.py - line:67] - INFO:测试编号14,测试用例标题:测试促销结束时间输入等于促销开始时间,执行成功!
2021-10-08 11:07:25,433 - [test_business_goods_promote03.py - line:67] - INFO:测试编号15,测试用例标题:测试商品编号输入为空,执行成功!
2021-10-08 11:07:25,583 - [test_business_goods_promote03.py - line:67] - INFO:测试编号16,测试用例标题:测试商品编号输入非数字,执行成功!
2021-10-08 11:07:25,734 - [test_business_goods_promote03.py - line:67] - INFO:测试编号17,测试用例标题:测试商品编号输入非6位数字,执行成功!
2021-10-08 11:07:25,888 - [test_business_goods_promote03.py - line:67] - INFO:测试编号18,测试用例标题:测试商品编号输入已经在促销的,执行成功!
2021-10-08 11:07:26,038 - [test_business_goods_promote03.py - line:67] - INFO:测试编号19,测试用例标题:测试商品编号输入不存在的,执行成功!
2021-10-08 15:55:03,066 - [test_business_goods_delete01.py - line:38] - ERROR:测试编号1,测试用例标题:商品删除正确流程,执行失败,实际结果为:{'code': 1005, 'msg': '当前商品没有下架，不允许删除'}!
2021-10-08 15:55:03,066 - [test_business_goods_delete01.py - line:39] - ERROR: :: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^              --

+ {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
?             ^          ++  ++++++++


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_delete08\test_business_goods_delete01.py", line 35, in test_goods_delete
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1005, 'msg': '当前商品没有下架，不允许删除'}
2021-10-08 15:55:21,918 - [test_business_goods_delete01.py - line:43] - INFO:测试编号1,测试用例标题:商品删除正确流程,执行成功!
2021-10-08 15:55:44,697 - [test_business_goods_delete01.py - line:43] - INFO:测试编号1,测试用例标题:商品删除正确流程,执行成功!
2021-10-08 15:55:47,779 - [test_business_goods_delete01.py - line:38] - ERROR:测试编号1,测试用例标题:商品删除正确流程,执行失败,实际结果为:{'code': 1004, 'msg': '该商品不存在'}!
2021-10-08 15:55:47,779 - [test_business_goods_delete01.py - line:39] - ERROR: :: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1004, 'msg': '该商品不存在'}
Traceback (most recent call last):
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1004, 'msg': '该商品不存在'}
- {'code': 1000, 'msg': '商品删除成功'}
?             ^            ^^^^

+ {'code': 1004, 'msg': '该商品不存在'}
?             ^          +  ^^^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_delete08\test_business_goods_delete01.py", line 35, in test_goods_delete
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\PyCharm Community Edition 2020.1.2\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 38, in _patched_equals
    raise error
teamcity.diff_tools.EqualsAssertionError:  :: {'code': 1000, 'msg': '商品删除成功'} != {'code': 1004, 'msg': '该商品不存在'}
2021-10-08 16:02:46,306 - [test_business_goods_delete02.py - line:61] - INFO:测试编号1,测试用例标题:商品删除正确流程,执行成功!
2021-10-08 16:02:48,346 - [test_business_goods_delete02.py - line:61] - INFO:测试编号1,测试用例标题:商品删除正确流程,执行成功!
2021-10-08 16:02:50,193 - [test_business_goods_delete02.py - line:61] - INFO:测试编号1,测试用例标题:商品删除正确流程,执行成功!
2021-10-08 16:02:52,050 - [test_business_goods_delete02.py - line:61] - INFO:测试编号1,测试用例标题:商品删除正确流程,执行成功!
2021-10-08 16:02:53,843 - [test_business_goods_delete02.py - line:61] - INFO:测试编号1,测试用例标题:商品删除正确流程,执行成功!
2021-10-08 16:02:55,527 - [test_business_goods_delete02.py - line:61] - INFO:测试编号1,测试用例标题:商品删除正确流程,执行成功!
2021-10-08 16:31:58,334 - [test_business_goods_delete03.py - line:65] - INFO:测试编号1,测试用例标题:商品删除正确流程,执行成功!
2021-10-08 16:31:58,661 - [test_business_goods_delete03.py - line:65] - INFO:测试编号2,测试用例标题:测试商品编号为空的场景,执行成功!
2021-10-08 16:31:58,990 - [test_business_goods_delete03.py - line:65] - INFO:测试编号3,测试用例标题:测试商品编号不存在的场景,执行成功!
2021-10-08 16:31:59,326 - [test_business_goods_delete03.py - line:65] - INFO:测试编号4,测试用例标题:测试商品编号输入非6位整数的场景,执行成功!
2021-10-08 16:31:59,656 - [test_business_goods_delete03.py - line:65] - INFO:测试编号5,测试用例标题:测试商品编号输入字母的场景,执行成功!
2021-10-08 16:31:59,985 - [test_business_goods_delete03.py - line:65] - INFO:测试编号6,测试用例标题:测试商品编号输入为汉字的场景,执行成功!
2021-10-08 16:32:00,313 - [test_business_goods_delete03.py - line:65] - INFO:测试编号7,测试用例标题:测试商品编号输入为商品未下架的场景,执行成功!
2021-10-08 16:32:05,258 - [test_business_goods_delete03.py - line:65] - INFO:测试编号1,测试用例标题:商品删除正确流程,执行成功!
2021-10-08 16:32:05,417 - [test_business_goods_delete03.py - line:65] - INFO:测试编号2,测试用例标题:测试商品编号为空的场景,执行成功!
2021-10-08 16:32:05,571 - [test_business_goods_delete03.py - line:65] - INFO:测试编号3,测试用例标题:测试商品编号不存在的场景,执行成功!
2021-10-08 16:32:05,732 - [test_business_goods_delete03.py - line:65] - INFO:测试编号4,测试用例标题:测试商品编号输入非6位整数的场景,执行成功!
2021-10-08 16:32:05,889 - [test_business_goods_delete03.py - line:65] - INFO:测试编号5,测试用例标题:测试商品编号输入字母的场景,执行成功!
2021-10-08 16:32:06,041 - [test_business_goods_delete03.py - line:65] - INFO:测试编号6,测试用例标题:测试商品编号输入为汉字的场景,执行成功!
2021-10-08 16:32:06,198 - [test_business_goods_delete03.py - line:65] - INFO:测试编号7,测试用例标题:测试商品编号输入为商品未下架的场景,执行成功!
2021-10-08 16:32:28,400 - [test_business_goods_promote03.py - line:67] - INFO:测试编号1,测试用例标题:商品促销设置正确流程,执行成功!
2021-10-08 16:32:28,557 - [test_business_goods_promote03.py - line:67] - INFO:测试编号2,测试用例标题:测试促销开始时间为空,执行成功!
2021-10-08 16:32:28,715 - [test_business_goods_promote03.py - line:67] - INFO:测试编号3,测试用例标题:测试促销开始时间输入错误的格式:2021-9-01,执行成功!
2021-10-08 16:32:28,934 - [test_business_goods_promote03.py - line:67] - INFO:测试编号7,测试用例标题:测试促销开始时间小于当前时间,执行成功!
2021-10-08 16:32:29,104 - [test_business_goods_promote03.py - line:67] - INFO:测试编号8,测试用例标题:测试促销结束时间为空,执行成功!
2021-10-08 16:32:29,273 - [test_business_goods_promote03.py - line:67] - INFO:测试编号9,测试用例标题:测试促销结束时间格式错误的格式:2021-13-11,执行成功!
2021-10-08 16:32:29,509 - [test_business_goods_promote03.py - line:67] - INFO:测试编号13,测试用例标题:测试促销结束时间输入小于促销开始时间,执行成功!
2021-10-08 16:32:29,685 - [test_business_goods_promote03.py - line:67] - INFO:测试编号14,测试用例标题:测试促销结束时间输入等于促销开始时间,执行成功!
2021-10-08 16:32:29,842 - [test_business_goods_promote03.py - line:67] - INFO:测试编号15,测试用例标题:测试商品编号输入为空,执行成功!
2021-10-08 16:32:29,996 - [test_business_goods_promote03.py - line:67] - INFO:测试编号16,测试用例标题:测试商品编号输入非数字,执行成功!
2021-10-08 16:32:30,154 - [test_business_goods_promote03.py - line:67] - INFO:测试编号17,测试用例标题:测试商品编号输入非6位数字,执行成功!
2021-10-08 16:32:30,328 - [test_business_goods_promote03.py - line:67] - INFO:测试编号18,测试用例标题:测试商品编号输入已经在促销的,执行成功!
2021-10-08 16:32:30,520 - [test_business_goods_promote03.py - line:67] - INFO:测试编号19,测试用例标题:测试商品编号输入不存在的,执行成功!
2021-10-08 16:32:30,702 - [test_business_register03.py - line:64] - INFO:测试编号1,测试用例标题:注册正常流程,执行成功!
2021-10-08 16:32:30,857 - [test_business_register03.py - line:64] - INFO:测试编号2,测试用例标题:测试性别、生日、qq、email不输入的场景,执行成功!
2021-10-08 16:32:31,006 - [test_business_register03.py - line:64] - INFO:测试编号3,测试用例标题:测试用户名有效边界值的场景,执行成功!
2021-10-08 16:32:31,158 - [test_business_register03.py - line:64] - INFO:测试编号4,测试用例标题:测试密码有效边界值的场景,执行成功!
2021-10-08 16:32:31,308 - [test_business_register03.py - line:64] - INFO:测试编号5,测试用例标题:测试qq号有效边界值的场景,执行成功!
2021-10-08 16:32:31,457 - [test_business_register03.py - line:59] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-08 16:32:31,457 - [test_business_register03.py - line:60] - ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-08 16:32:31,613 - [test_business_register03.py - line:59] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-08 16:32:31,613 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-08 16:32:31,767 - [test_business_register03.py - line:59] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-08 16:32:31,767 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-08 16:32:31,919 - [test_business_register03.py - line:64] - INFO:测试编号9,测试用例标题:测试用户名无效边界值的场景,执行成功!
2021-10-08 16:32:32,066 - [test_business_register03.py - line:64] - INFO:测试编号10,测试用例标题:测试用户名为空的场景,执行成功!
2021-10-08 16:32:32,206 - [test_business_register03.py - line:64] - INFO:测试编号11,测试用例标题:测试用户名非字母开头的场景,执行成功!
2021-10-08 16:32:32,348 - [test_business_register03.py - line:64] - INFO:测试编号12,测试用例标题:测试用户名包含符号或者汉字的场景,执行成功!
2021-10-08 16:32:32,507 - [test_business_register03.py - line:64] - INFO:测试编号13,测试用例标题:测试用户名已存在的场景,执行成功!
2021-10-08 16:32:32,654 - [test_business_register03.py - line:64] - INFO:测试编号14,测试用例标题:测试密码无效边界值的场景,执行成功!
2021-10-08 16:32:32,802 - [test_business_register03.py - line:64] - INFO:测试编号15,测试用例标题:测试密码为空的场景,执行成功!
2021-10-08 16:32:32,947 - [test_business_register03.py - line:64] - INFO:测试编号16,测试用例标题:测试密码包含符号或者汉字的场景,执行成功!
2021-10-08 16:32:33,101 - [test_business_register03.py - line:64] - INFO:测试编号17,测试用例标题:测试确认密码大小写区分的场景,执行成功!
2021-10-08 16:32:33,262 - [test_business_register03.py - line:64] - INFO:测试编号18,测试用例标题:测试确认密码和密码不一致的场景,执行成功!
2021-10-08 16:32:33,410 - [test_business_register03.py - line:64] - INFO:测试编号19,测试用例标题:测试确认密码为空的场景,执行成功!
2021-10-08 16:32:33,560 - [test_business_register03.py - line:64] - INFO:测试编号20,测试用例标题:测试手机号为空的场景,执行成功!
2021-10-08 16:32:33,708 - [test_business_register03.py - line:64] - INFO:测试编号21,测试用例标题:测试手机号非11位的场景,执行成功!
2021-10-08 16:32:33,855 - [test_business_register03.py - line:64] - INFO:测试编号22,测试用例标题:测试手机号已注册的场景,执行成功!
2021-10-08 16:32:34,001 - [test_business_register03.py - line:64] - INFO:测试编号23,测试用例标题:测试手机号非数字的场景,执行成功!
2021-10-08 16:32:34,148 - [test_business_register03.py - line:64] - INFO:测试编号24,测试用例标题:测试性别非枚举的场景,执行成功!
2021-10-08 16:32:34,294 - [test_business_register03.py - line:64] - INFO:测试编号25,测试用例标题:测试性别男+女的场景,执行成功!
2021-10-08 16:32:34,465 - [test_business_register03.py - line:64] - INFO:测试编号26,测试用例标题:测试生日年月日不完整的场景,执行成功!
2021-10-08 16:32:34,624 - [test_business_register03.py - line:64] - INFO:测试编号27,测试用例标题:测试生日输入非数字的场景,执行成功!
2021-10-08 16:32:34,778 - [test_business_register03.py - line:64] - INFO:测试编号28,测试用例标题:测试生日输入不存在的日期的场景,执行成功!
2021-10-08 16:32:34,947 - [test_business_register03.py - line:64] - INFO:测试编号29,测试用例标题:测试QQ号码无效边界值的场景,执行成功!
2021-10-08 16:32:35,100 - [test_business_register03.py - line:64] - INFO:测试编号30,测试用例标题:测试QQ号码非数字的场景,执行成功!
2021-10-08 16:32:35,247 - [test_business_register03.py - line:64] - INFO:测试编号31,测试用例标题:测试邮箱格式错误的场景,执行成功!
2021-10-08 16:32:35,400 - [test_business_register03.py - line:64] - INFO:测试编号32,测试用例标题:测试邮箱为已注册邮箱的场景,执行成功!
2021-10-08 16:32:35,562 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号1,测试用例标题:商品信息查询正常流程_无条件查询,执行成功!
2021-10-08 16:32:35,712 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号2,测试用例标题:测试token值为空的场景,执行成功!
2021-10-08 16:32:35,858 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号3,测试用例标题:测试错误的token场景,执行成功!
2021-10-08 16:32:36,015 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号4,测试用例标题:测试token值大小写区分的场景,执行成功!
2021-10-08 16:32:36,185 - [test_business_token_goodsInfo03.py - line:69] - ERROR:测试编号5,测试用例标题:测试上一次的token的场景,执行失败,实际结果为:{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone11', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '三星note7', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '华为P40', 'shopPrice': 6000.0, 'promotePrice': 0.0, 'num': 666}, {'goodsName': '华为P50', 'shopPrice': 4500.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米11', 'shopPrice': 4000.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '三星s21', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '贵州茅台', 'shopPrice': 1499.0, 'promotePrice': 0.0, 'num': 0}, {'goodsName': '牛仔短裤', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': '优衣库', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': '卫龙辣条', 'shopPrice': 2.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '牛仔上衣', 'shopPrice': 99.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': '牛仔裤', 'shopPrice': 0.01, 'promotePrice': 0.0, 'num': 50}, {'goodsName': '小米8', 'shopPrice': 2299.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '三星s7', 'shopPrice': 500.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '华为mate10', 'shopPrice': 800.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '红米10', 'shopPrice': 500.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '羊毛衫', 'shopPrice': 199.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': 'iPhone8', 'shopPrice': 2999.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone5s', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone10', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone20', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhonese', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone6', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone6s', 'shopPrice': 1666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone7', 'shopPrice': 1999.0, 'promotePrice': 0.0, 'num': 9999}]}!
2021-10-08 16:32:36,186 - [test_business_token_goodsInfo03.py - line:70] - ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[2015 chars]99}]}
Diff is 4162 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 66, in test_token_goods_info
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[2015 chars]99}]}
Diff is 4162 characters long. Set self.maxDiff to None to see it.
2021-10-08 16:32:36,349 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号6,测试用例标题:测试goodsId格式错误的场景,执行成功!
2021-10-08 16:32:36,530 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号7,测试用例标题:测试goodsId不存在的场景,执行成功!
2021-10-08 16:32:36,701 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号8,测试用例标题:测试isOnSale为非枚举的场景,执行成功!
2021-10-08 16:32:36,857 - [test_business_token_goodsInfo03.py - line:69] - ERROR:测试编号9,测试用例标题:测试isOnSale状态不对应的场景,执行失败,实际结果为:{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}]}!
2021-10-08 16:32:36,857 - [test_business_token_goodsInfo03.py - line:70] - ERROR:{'code': 1008, 'msg': '没有符合条件的数据'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[65 chars]00}]}
- {'code': 1008, 'msg': '没有符合条件的数据'}
+ {'code': 1000,
+  'goods_tiems': [{'goodsName': '预留数据',
+                   'num': 1000,
+                   'promotePrice': 0.0,
+                   'shopPrice': 100.0}],
+  'msg': '查询成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 66, in test_token_goods_info
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '没有符合条件的数据'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[65 chars]00}]}
- {'code': 1008, 'msg': '没有符合条件的数据'}
+ {'code': 1000,
+  'goods_tiems': [{'goodsName': '预留数据',
+                   'num': 1000,
+                   'promotePrice': 0.0,
+                   'shopPrice': 100.0}],
+  'msg': '查询成功'}
2021-10-08 16:32:37,018 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号10,测试用例标题:测试isPromote为非枚举的场景,执行成功!
2021-10-08 16:32:37,176 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号11,测试用例标题:测试isPromote状态不对应的场景,执行成功!
2021-10-08 16:32:37,332 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号12,测试用例标题:测试商品编号正确+isOnSale为0+isPromote为空的场景,执行成功!
2021-10-08 16:32:37,488 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号13,测试用例标题:测试商品编号正确+isOnSale为空+isPromote为0的场景,执行成功!
2021-10-08 16:32:37,646 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号14,测试用例标题:测试商品编号正确+isOnSale为1+isPromote为空的场景,执行成功!
2021-10-08 16:32:37,800 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号15,测试用例标题:测试商品编号正确+isOnSale为空+isPromote为1的场景,执行成功!
2021-10-08 16:32:37,958 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号16,测试用例标题:测试商品编号为空+isOnSale为0+isPromote为0的场景,执行成功!
2021-10-08 16:32:38,114 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号17,测试用例标题:测试商品编号为空+isOnSale为1+isPromote为1的场景,执行成功!
2021-10-08 16:32:38,270 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号18,测试用例标题:测试商品编号为空+isOnSale为1+isPromote为0的场景,执行成功!
2021-10-08 16:32:38,426 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号19,测试用例标题:测试商品编号为空+isOnSale为0+isPromote为1的场景,执行成功!
2021-10-08 16:32:38,584 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号20,测试用例标题:测试编号正确+isOnSale为0+isPromote为1的场景,执行成功!
2021-10-08 16:32:38,752 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号21,测试用例标题:测试编号正确+isOnSale为0+isPromote为0的场景,执行成功!
2021-10-08 16:32:38,907 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号22,测试用例标题:测试编号正确+isOnSale为1+isPromote为1的场景,执行成功!
2021-10-08 16:32:39,057 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号23,测试用例标题:测试编号正确+isOnSale为1+isPromote为0的场景,执行成功!
2021-10-08 16:32:39,214 - [test_business_goods_delete02.py - line:61] - INFO:测试编号1,测试用例标题:商品删除正确流程,执行成功!
2021-10-08 16:32:39,370 - [test_business_goods_delete03.py - line:65] - INFO:测试编号1,测试用例标题:商品删除正确流程,执行成功!
2021-10-08 16:32:39,524 - [test_business_goods_delete03.py - line:65] - INFO:测试编号2,测试用例标题:测试商品编号为空的场景,执行成功!
2021-10-08 16:32:39,680 - [test_business_goods_delete03.py - line:65] - INFO:测试编号3,测试用例标题:测试商品编号不存在的场景,执行成功!
2021-10-08 16:32:39,833 - [test_business_goods_delete03.py - line:65] - INFO:测试编号4,测试用例标题:测试商品编号输入非6位整数的场景,执行成功!
2021-10-08 16:32:39,982 - [test_business_goods_delete03.py - line:65] - INFO:测试编号5,测试用例标题:测试商品编号输入字母的场景,执行成功!
2021-10-08 16:32:40,135 - [test_business_goods_delete03.py - line:65] - INFO:测试编号6,测试用例标题:测试商品编号输入为汉字的场景,执行成功!
2021-10-08 16:32:40,286 - [test_business_goods_delete03.py - line:65] - INFO:测试编号7,测试用例标题:测试商品编号输入为商品未下架的场景,执行成功!
2021-10-08 16:32:40,448 - [test_business_goods_input03.py - line:58] - INFO:测试编号1,测试用例标题:商品录入正常流程,执行成功!
2021-10-08 16:32:40,618 - [test_business_goods_input03.py - line:58] - INFO:测试编号2,测试用例标题:测试商品名输入为空,执行成功!
2021-10-08 16:32:40,774 - [test_business_goods_input03.py - line:58] - INFO:测试编号3,测试用例标题:测试商品名输入有效边界值,执行成功!
2021-10-08 16:32:40,939 - [test_business_goods_input03.py - line:58] - INFO:测试编号4,测试用例标题:测试商品名输入无效边界值,执行成功!
2021-10-08 16:32:41,136 - [test_business_goods_input03.py - line:58] - INFO:测试编号5,测试用例标题:测试商品名输入重复商品名,执行成功!
2021-10-08 16:32:41,284 - [test_business_goods_input03.py - line:58] - INFO:测试编号6,测试用例标题:测试商品分类id输入为空,执行成功!
2021-10-08 16:32:41,435 - [test_business_goods_input03.py - line:58] - INFO:测试编号7,测试用例标题:测试商品分类id输入非数字,执行成功!
2021-10-08 16:32:41,587 - [test_business_goods_input03.py - line:58] - INFO:测试编号8,测试用例标题:测试商品分类id输入非5位数字,执行成功!
2021-10-08 16:32:41,740 - [test_business_goods_input03.py - line:58] - INFO:测试编号9,测试用例标题:测试商品分类id输入不存在的商品分类id,执行成功!
2021-10-08 16:32:41,893 - [test_business_goods_input03.py - line:58] - INFO:测试编号10,测试用例标题:测试商品描述输入为空,执行成功!
2021-10-08 16:32:42,052 - [test_business_goods_input03.py - line:58] - INFO:测试编号11,测试用例标题:测试商品描述输入有效边界值,执行成功!
2021-10-08 16:32:42,199 - [test_business_goods_input03.py - line:58] - INFO:测试编号12,测试用例标题:测试商品描述输入无效边界值,执行成功!
2021-10-08 16:32:42,353 - [test_business_goods_input03.py - line:58] - INFO:测试编号13,测试用例标题:测试商品库存输入为空,执行成功!
2021-10-08 16:32:42,508 - [test_business_goods_input03.py - line:58] - INFO:测试编号14,测试用例标题:测试商品库存输入0,执行成功!
2021-10-08 16:32:42,658 - [test_business_goods_input03.py - line:58] - INFO:测试编号15,测试用例标题:测试商品库存输入为负数,执行成功!
2021-10-08 16:32:42,815 - [test_business_goods_input03.py - line:58] - INFO:测试编号16,测试用例标题:测试商品库存输入为非数字,执行成功!
2021-10-08 16:32:42,983 - [test_business_goods_input03.py - line:58] - INFO:测试编号17,测试用例标题:测试商品库存输入非整数,执行成功!
2021-10-08 16:32:43,135 - [test_business_goods_input03.py - line:58] - INFO:测试编号18,测试用例标题:测试商品库存输入有效边界值,执行成功!
2021-10-08 16:32:43,287 - [test_business_goods_input03.py - line:58] - INFO:测试编号19,测试用例标题:测试商品库存输入无效边界值,执行成功!
2021-10-08 16:32:43,436 - [test_business_goods_input03.py - line:58] - INFO:测试编号20,测试用例标题:测试商品价格输入为空,执行成功!
2021-10-08 16:32:43,591 - [test_business_goods_input03.py - line:53] - ERROR:测试编号21,测试用例标题:测试商品价格输入0.00,执行失败,实际结果为:{'code': 1013, 'msg': '产品名称不能重复'}!
2021-10-08 16:32:43,591 - [test_business_goods_input03.py - line:54] - ERROR:{'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input06\test_business_goods_input03.py", line 45, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

2021-10-08 16:32:43,741 - [test_business_goods_input03.py - line:58] - INFO:测试编号22,测试用例标题:测试商品价格输入负数,执行成功!
2021-10-08 16:32:43,905 - [test_business_goods_input03.py - line:58] - INFO:测试编号23,测试用例标题:测试商品价格输入为非数字,执行成功!
2021-10-08 16:32:44,066 - [test_business_goods_input03.py - line:58] - INFO:测试编号24,测试用例标题:测试商品价格输入非两位的小数点,执行成功!
2021-10-08 16:32:44,224 - [test_business_goods_input03.py - line:58] - INFO:测试编号25,测试用例标题:测试商品价格输入有效边界值,执行成功!
2021-10-08 16:32:44,377 - [test_business_goods_input03.py - line:58] - INFO:测试编号26,测试用例标题:测试商品价格输入无效边界值,执行成功!
2021-10-08 16:32:44,532 - [test_login05.py - line:57] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-08 16:32:44,680 - [test_login05.py - line:57] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-08 16:32:44,828 - [test_login05.py - line:57] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-08 16:32:44,978 - [test_login05.py - line:52] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzcxMTk2NC44MzU5MjAzOmQzM2UyYjA5ZmZmYTM5MmY4NDkzNTUyNTNhMDcxZTAzN2ZjYmFkNmE='}
2021-10-08 16:32:44,978 - [test_login05.py - line:53] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzcxMTk2N[64 chars]mE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzcxMTk2NC44MzU5MjAzOmQzM2UyYjA5ZmZmYTM5MmY4NDkzNTUyNTNhMDcxZTAzN2ZjYmFkNmE='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzcxMTk2N[64 chars]mE='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzcxMTk2NC44MzU5MjAzOmQzM2UyYjA5ZmZmYTM5MmY4NDkzNTUyNTNhMDcxZTAzN2ZjYmFkNmE='}
2021-10-08 16:32:45,151 - [test_login05.py - line:57] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-08 16:32:45,302 - [test_login05.py - line:52] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzcxMTk2NS4xNjAwNTI1OmYzNGY5MzVkZTcwOWMxZmVkODA3NWJjOTgyNTAxOWQ5NDY3OTViYTY='}
2021-10-08 16:32:45,302 - [test_login05.py - line:53] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzcxMTk2N[64 chars]TY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzcxMTk2NS4xNjAwNTI1OmYzNGY5MzVkZTcwOWMxZmVkODA3NWJjOTgyNTAxOWQ5NDY3OTViYTY='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzcxMTk2N[64 chars]TY='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzcxMTk2NS4xNjAwNTI1OmYzNGY5MzVkZTcwOWMxZmVkODA3NWJjOTgyNTAxOWQ5NDY3OTViYTY='}
2021-10-08 16:32:45,452 - [test_login05.py - line:57] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-08 16:32:45,599 - [test_login05.py - line:57] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-08 16:32:45,747 - [test_login05.py - line:57] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-08 16:32:45,891 - [test_login05.py - line:57] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-08 16:32:46,039 - [test_login05.py - line:57] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-08 16:32:46,195 - [test_business_token_order_items02.py - line:66] - INFO:测试编号1,测试用例标题:订单信息查询正常流程,执行成功!
2021-10-08 16:32:46,347 - [test_business_token_order_items02.py - line:66] - INFO:测试编号2,测试用例标题:orderId为空,执行成功!
2021-10-08 16:32:46,497 - [test_business_token_order_items02.py - line:66] - INFO:测试编号3,测试用例标题:订单编号输入非5位的数字,执行成功!
2021-10-08 16:32:46,650 - [test_business_token_order_items02.py - line:66] - INFO:测试编号4,测试用例标题:订单编号输入非数字,执行成功!
2021-10-08 16:32:46,801 - [test_business_token_order_items02.py - line:66] - INFO:测试编号5,测试用例标题:订单编号输入不存在的编号,执行成功!
2021-10-08 16:34:59,948 - [test_business_goods_promote03.py - line:67] - INFO:测试编号1,测试用例标题:商品促销设置正确流程,执行成功!
2021-10-08 16:35:00,100 - [test_business_goods_promote03.py - line:67] - INFO:测试编号2,测试用例标题:测试促销开始时间为空,执行成功!
2021-10-08 16:35:00,256 - [test_business_goods_promote03.py - line:67] - INFO:测试编号3,测试用例标题:测试促销开始时间输入错误的格式:2021-9-01,执行成功!
2021-10-08 16:35:00,479 - [test_business_goods_promote03.py - line:67] - INFO:测试编号7,测试用例标题:测试促销开始时间小于当前时间,执行成功!
2021-10-08 16:35:00,642 - [test_business_goods_promote03.py - line:67] - INFO:测试编号8,测试用例标题:测试促销结束时间为空,执行成功!
2021-10-08 16:35:00,802 - [test_business_goods_promote03.py - line:67] - INFO:测试编号9,测试用例标题:测试促销结束时间格式错误的格式:2021-13-11,执行成功!
2021-10-08 16:35:01,020 - [test_business_goods_promote03.py - line:67] - INFO:测试编号13,测试用例标题:测试促销结束时间输入小于促销开始时间,执行成功!
2021-10-08 16:35:01,193 - [test_business_goods_promote03.py - line:67] - INFO:测试编号14,测试用例标题:测试促销结束时间输入等于促销开始时间,执行成功!
2021-10-08 16:35:01,351 - [test_business_goods_promote03.py - line:67] - INFO:测试编号15,测试用例标题:测试商品编号输入为空,执行成功!
2021-10-08 16:35:01,507 - [test_business_goods_promote03.py - line:67] - INFO:测试编号16,测试用例标题:测试商品编号输入非数字,执行成功!
2021-10-08 16:35:01,663 - [test_business_goods_promote03.py - line:67] - INFO:测试编号17,测试用例标题:测试商品编号输入非6位数字,执行成功!
2021-10-08 16:35:01,823 - [test_business_goods_promote03.py - line:67] - INFO:测试编号18,测试用例标题:测试商品编号输入已经在促销的,执行成功!
2021-10-08 16:35:01,997 - [test_business_goods_promote03.py - line:67] - INFO:测试编号19,测试用例标题:测试商品编号输入不存在的,执行成功!
2021-10-08 16:35:02,146 - [test_business_register03.py - line:64] - INFO:测试编号1,测试用例标题:注册正常流程,执行成功!
2021-10-08 16:35:02,296 - [test_business_register03.py - line:64] - INFO:测试编号2,测试用例标题:测试性别、生日、qq、email不输入的场景,执行成功!
2021-10-08 16:35:02,444 - [test_business_register03.py - line:64] - INFO:测试编号3,测试用例标题:测试用户名有效边界值的场景,执行成功!
2021-10-08 16:35:02,594 - [test_business_register03.py - line:64] - INFO:测试编号4,测试用例标题:测试密码有效边界值的场景,执行成功!
2021-10-08 16:35:02,740 - [test_business_register03.py - line:64] - INFO:测试编号5,测试用例标题:测试qq号有效边界值的场景,执行成功!
2021-10-08 16:35:02,891 - [test_business_register03.py - line:59] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-08 16:35:02,891 - [test_business_register03.py - line:60] - ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-08 16:35:03,038 - [test_business_register03.py - line:59] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-08 16:35:03,038 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-08 16:35:03,192 - [test_business_register03.py - line:59] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-08 16:35:03,192 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-08 16:35:03,342 - [test_business_register03.py - line:64] - INFO:测试编号9,测试用例标题:测试用户名无效边界值的场景,执行成功!
2021-10-08 16:35:03,495 - [test_business_register03.py - line:64] - INFO:测试编号10,测试用例标题:测试用户名为空的场景,执行成功!
2021-10-08 16:35:03,646 - [test_business_register03.py - line:64] - INFO:测试编号11,测试用例标题:测试用户名非字母开头的场景,执行成功!
2021-10-08 16:35:03,795 - [test_business_register03.py - line:64] - INFO:测试编号12,测试用例标题:测试用户名包含符号或者汉字的场景,执行成功!
2021-10-08 16:35:03,942 - [test_business_register03.py - line:64] - INFO:测试编号13,测试用例标题:测试用户名已存在的场景,执行成功!
2021-10-08 16:35:04,107 - [test_business_register03.py - line:64] - INFO:测试编号14,测试用例标题:测试密码无效边界值的场景,执行成功!
2021-10-08 16:35:04,247 - [test_business_register03.py - line:64] - INFO:测试编号15,测试用例标题:测试密码为空的场景,执行成功!
2021-10-08 16:35:04,394 - [test_business_register03.py - line:64] - INFO:测试编号16,测试用例标题:测试密码包含符号或者汉字的场景,执行成功!
2021-10-08 16:35:04,538 - [test_business_register03.py - line:64] - INFO:测试编号17,测试用例标题:测试确认密码大小写区分的场景,执行成功!
2021-10-08 16:35:04,684 - [test_business_register03.py - line:64] - INFO:测试编号18,测试用例标题:测试确认密码和密码不一致的场景,执行成功!
2021-10-08 16:35:04,826 - [test_business_register03.py - line:64] - INFO:测试编号19,测试用例标题:测试确认密码为空的场景,执行成功!
2021-10-08 16:35:04,974 - [test_business_register03.py - line:64] - INFO:测试编号20,测试用例标题:测试手机号为空的场景,执行成功!
2021-10-08 16:35:05,114 - [test_business_register03.py - line:64] - INFO:测试编号21,测试用例标题:测试手机号非11位的场景,执行成功!
2021-10-08 16:35:05,262 - [test_business_register03.py - line:64] - INFO:测试编号22,测试用例标题:测试手机号已注册的场景,执行成功!
2021-10-08 16:35:05,402 - [test_business_register03.py - line:64] - INFO:测试编号23,测试用例标题:测试手机号非数字的场景,执行成功!
2021-10-08 16:35:05,549 - [test_business_register03.py - line:64] - INFO:测试编号24,测试用例标题:测试性别非枚举的场景,执行成功!
2021-10-08 16:35:05,692 - [test_business_register03.py - line:64] - INFO:测试编号25,测试用例标题:测试性别男+女的场景,执行成功!
2021-10-08 16:35:05,852 - [test_business_register03.py - line:64] - INFO:测试编号26,测试用例标题:测试生日年月日不完整的场景,执行成功!
2021-10-08 16:35:06,014 - [test_business_register03.py - line:64] - INFO:测试编号27,测试用例标题:测试生日输入非数字的场景,执行成功!
2021-10-08 16:35:06,159 - [test_business_register03.py - line:64] - INFO:测试编号28,测试用例标题:测试生日输入不存在的日期的场景,执行成功!
2021-10-08 16:35:06,302 - [test_business_register03.py - line:64] - INFO:测试编号29,测试用例标题:测试QQ号码无效边界值的场景,执行成功!
2021-10-08 16:35:06,452 - [test_business_register03.py - line:64] - INFO:测试编号30,测试用例标题:测试QQ号码非数字的场景,执行成功!
2021-10-08 16:35:06,603 - [test_business_register03.py - line:64] - INFO:测试编号31,测试用例标题:测试邮箱格式错误的场景,执行成功!
2021-10-08 16:35:06,752 - [test_business_register03.py - line:64] - INFO:测试编号32,测试用例标题:测试邮箱为已注册邮箱的场景,执行成功!
2021-10-08 16:35:06,920 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号1,测试用例标题:商品信息查询正常流程_无条件查询,执行成功!
2021-10-08 16:35:07,067 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号2,测试用例标题:测试token值为空的场景,执行成功!
2021-10-08 16:35:07,210 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号3,测试用例标题:测试错误的token场景,执行成功!
2021-10-08 16:35:07,363 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号4,测试用例标题:测试token值大小写区分的场景,执行成功!
2021-10-08 16:35:07,528 - [test_business_token_goodsInfo03.py - line:69] - ERROR:测试编号5,测试用例标题:测试上一次的token的场景,执行失败,实际结果为:{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone11', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '三星note7', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '华为P40', 'shopPrice': 6000.0, 'promotePrice': 0.0, 'num': 666}, {'goodsName': '华为P50', 'shopPrice': 4500.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米11', 'shopPrice': 4000.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '三星s21', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '贵州茅台', 'shopPrice': 1499.0, 'promotePrice': 0.0, 'num': 0}, {'goodsName': '牛仔短裤', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': '优衣库', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': '小米8', 'shopPrice': 2299.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '三星s7', 'shopPrice': 500.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '华为mate10', 'shopPrice': 800.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '红米10', 'shopPrice': 500.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '羊毛衫', 'shopPrice': 199.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': 'iPhone8', 'shopPrice': 2999.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone5s', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone10', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone20', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhonese', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone6', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone6s', 'shopPrice': 1666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone7', 'shopPrice': 1999.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '卫龙辣条', 'shopPrice': 2.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '牛仔上衣', 'shopPrice': 99.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': '牛仔裤', 'shopPrice': 0.01, 'promotePrice': 0.0, 'num': 50}]}!
2021-10-08 16:35:07,528 - [test_business_token_goodsInfo03.py - line:70] - ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[2015 chars]50}]}
Diff is 4162 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 66, in test_token_goods_info
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[2015 chars]50}]}
Diff is 4162 characters long. Set self.maxDiff to None to see it.
2021-10-08 16:35:07,689 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号6,测试用例标题:测试goodsId格式错误的场景,执行成功!
2021-10-08 16:35:07,842 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号7,测试用例标题:测试goodsId不存在的场景,执行成功!
2021-10-08 16:35:07,997 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号8,测试用例标题:测试isOnSale为非枚举的场景,执行成功!
2021-10-08 16:35:08,166 - [test_business_token_goodsInfo03.py - line:69] - ERROR:测试编号9,测试用例标题:测试isOnSale状态不对应的场景,执行失败,实际结果为:{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}]}!
2021-10-08 16:35:08,166 - [test_business_token_goodsInfo03.py - line:70] - ERROR:{'code': 1008, 'msg': '没有符合条件的数据'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[65 chars]00}]}
- {'code': 1008, 'msg': '没有符合条件的数据'}
+ {'code': 1000,
+  'goods_tiems': [{'goodsName': '预留数据',
+                   'num': 1000,
+                   'promotePrice': 0.0,
+                   'shopPrice': 100.0}],
+  'msg': '查询成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 66, in test_token_goods_info
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '没有符合条件的数据'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[65 chars]00}]}
- {'code': 1008, 'msg': '没有符合条件的数据'}
+ {'code': 1000,
+  'goods_tiems': [{'goodsName': '预留数据',
+                   'num': 1000,
+                   'promotePrice': 0.0,
+                   'shopPrice': 100.0}],
+  'msg': '查询成功'}
2021-10-08 16:35:08,334 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号10,测试用例标题:测试isPromote为非枚举的场景,执行成功!
2021-10-08 16:35:08,492 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号11,测试用例标题:测试isPromote状态不对应的场景,执行成功!
2021-10-08 16:35:08,648 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号12,测试用例标题:测试商品编号正确+isOnSale为0+isPromote为空的场景,执行成功!
2021-10-08 16:35:08,799 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号13,测试用例标题:测试商品编号正确+isOnSale为空+isPromote为0的场景,执行成功!
2021-10-08 16:35:08,952 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号14,测试用例标题:测试商品编号正确+isOnSale为1+isPromote为空的场景,执行成功!
2021-10-08 16:35:09,107 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号15,测试用例标题:测试商品编号正确+isOnSale为空+isPromote为1的场景,执行成功!
2021-10-08 16:35:09,263 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号16,测试用例标题:测试商品编号为空+isOnSale为0+isPromote为0的场景,执行成功!
2021-10-08 16:35:09,413 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号17,测试用例标题:测试商品编号为空+isOnSale为1+isPromote为1的场景,执行成功!
2021-10-08 16:35:09,569 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号18,测试用例标题:测试商品编号为空+isOnSale为1+isPromote为0的场景,执行成功!
2021-10-08 16:35:09,720 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号19,测试用例标题:测试商品编号为空+isOnSale为0+isPromote为1的场景,执行成功!
2021-10-08 16:35:09,873 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号20,测试用例标题:测试编号正确+isOnSale为0+isPromote为1的场景,执行成功!
2021-10-08 16:35:10,022 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号21,测试用例标题:测试编号正确+isOnSale为0+isPromote为0的场景,执行成功!
2021-10-08 16:35:10,196 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号22,测试用例标题:测试编号正确+isOnSale为1+isPromote为1的场景,执行成功!
2021-10-08 16:35:10,344 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号23,测试用例标题:测试编号正确+isOnSale为1+isPromote为0的场景,执行成功!
2021-10-08 16:35:10,507 - [test_business_goods_delete03.py - line:65] - INFO:测试编号1,测试用例标题:商品删除正确流程,执行成功!
2021-10-08 16:35:10,656 - [test_business_goods_delete03.py - line:65] - INFO:测试编号2,测试用例标题:测试商品编号为空的场景,执行成功!
2021-10-08 16:35:10,810 - [test_business_goods_delete03.py - line:65] - INFO:测试编号3,测试用例标题:测试商品编号不存在的场景,执行成功!
2021-10-08 16:35:10,958 - [test_business_goods_delete03.py - line:65] - INFO:测试编号4,测试用例标题:测试商品编号输入非6位整数的场景,执行成功!
2021-10-08 16:35:11,111 - [test_business_goods_delete03.py - line:65] - INFO:测试编号5,测试用例标题:测试商品编号输入字母的场景,执行成功!
2021-10-08 16:35:11,260 - [test_business_goods_delete03.py - line:65] - INFO:测试编号6,测试用例标题:测试商品编号输入为汉字的场景,执行成功!
2021-10-08 16:35:11,414 - [test_business_goods_delete03.py - line:65] - INFO:测试编号7,测试用例标题:测试商品编号输入为商品未下架的场景,执行成功!
2021-10-08 16:35:11,566 - [test_business_goods_input03.py - line:58] - INFO:测试编号1,测试用例标题:商品录入正常流程,执行成功!
2021-10-08 16:35:11,719 - [test_business_goods_input03.py - line:58] - INFO:测试编号2,测试用例标题:测试商品名输入为空,执行成功!
2021-10-08 16:35:11,873 - [test_business_goods_input03.py - line:58] - INFO:测试编号3,测试用例标题:测试商品名输入有效边界值,执行成功!
2021-10-08 16:35:12,026 - [test_business_goods_input03.py - line:58] - INFO:测试编号4,测试用例标题:测试商品名输入无效边界值,执行成功!
2021-10-08 16:35:12,194 - [test_business_goods_input03.py - line:58] - INFO:测试编号5,测试用例标题:测试商品名输入重复商品名,执行成功!
2021-10-08 16:35:12,348 - [test_business_goods_input03.py - line:58] - INFO:测试编号6,测试用例标题:测试商品分类id输入为空,执行成功!
2021-10-08 16:35:12,499 - [test_business_goods_input03.py - line:58] - INFO:测试编号7,测试用例标题:测试商品分类id输入非数字,执行成功!
2021-10-08 16:35:12,654 - [test_business_goods_input03.py - line:58] - INFO:测试编号8,测试用例标题:测试商品分类id输入非5位数字,执行成功!
2021-10-08 16:35:12,811 - [test_business_goods_input03.py - line:58] - INFO:测试编号9,测试用例标题:测试商品分类id输入不存在的商品分类id,执行成功!
2021-10-08 16:35:12,972 - [test_business_goods_input03.py - line:58] - INFO:测试编号10,测试用例标题:测试商品描述输入为空,执行成功!
2021-10-08 16:35:13,127 - [test_business_goods_input03.py - line:58] - INFO:测试编号11,测试用例标题:测试商品描述输入有效边界值,执行成功!
2021-10-08 16:35:13,286 - [test_business_goods_input03.py - line:58] - INFO:测试编号12,测试用例标题:测试商品描述输入无效边界值,执行成功!
2021-10-08 16:35:13,435 - [test_business_goods_input03.py - line:58] - INFO:测试编号13,测试用例标题:测试商品库存输入为空,执行成功!
2021-10-08 16:35:13,595 - [test_business_goods_input03.py - line:58] - INFO:测试编号14,测试用例标题:测试商品库存输入0,执行成功!
2021-10-08 16:35:13,747 - [test_business_goods_input03.py - line:58] - INFO:测试编号15,测试用例标题:测试商品库存输入为负数,执行成功!
2021-10-08 16:35:13,901 - [test_business_goods_input03.py - line:58] - INFO:测试编号16,测试用例标题:测试商品库存输入为非数字,执行成功!
2021-10-08 16:35:14,051 - [test_business_goods_input03.py - line:58] - INFO:测试编号17,测试用例标题:测试商品库存输入非整数,执行成功!
2021-10-08 16:35:14,208 - [test_business_goods_input03.py - line:58] - INFO:测试编号18,测试用例标题:测试商品库存输入有效边界值,执行成功!
2021-10-08 16:35:14,375 - [test_business_goods_input03.py - line:58] - INFO:测试编号19,测试用例标题:测试商品库存输入无效边界值,执行成功!
2021-10-08 16:35:14,531 - [test_business_goods_input03.py - line:58] - INFO:测试编号20,测试用例标题:测试商品价格输入为空,执行成功!
2021-10-08 16:35:14,687 - [test_business_goods_input03.py - line:53] - ERROR:测试编号21,测试用例标题:测试商品价格输入0.00,执行失败,实际结果为:{'code': 1013, 'msg': '产品名称不能重复'}!
2021-10-08 16:35:14,687 - [test_business_goods_input03.py - line:54] - ERROR:{'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input06\test_business_goods_input03.py", line 45, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

2021-10-08 16:35:14,843 - [test_business_goods_input03.py - line:58] - INFO:测试编号22,测试用例标题:测试商品价格输入负数,执行成功!
2021-10-08 16:35:15,009 - [test_business_goods_input03.py - line:58] - INFO:测试编号23,测试用例标题:测试商品价格输入为非数字,执行成功!
2021-10-08 16:35:15,166 - [test_business_goods_input03.py - line:58] - INFO:测试编号24,测试用例标题:测试商品价格输入非两位的小数点,执行成功!
2021-10-08 16:35:15,323 - [test_business_goods_input03.py - line:58] - INFO:测试编号25,测试用例标题:测试商品价格输入有效边界值,执行成功!
2021-10-08 16:35:15,480 - [test_business_goods_input03.py - line:58] - INFO:测试编号26,测试用例标题:测试商品价格输入无效边界值,执行成功!
2021-10-08 16:35:15,633 - [test_login05.py - line:57] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-08 16:35:15,782 - [test_login05.py - line:57] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-08 16:35:15,927 - [test_login05.py - line:57] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-08 16:35:16,076 - [test_login05.py - line:57] - INFO:测试编号4,测试用例标题:测试用户名是否区分大小写,执行成功！
2021-10-08 16:35:16,224 - [test_login05.py - line:57] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-08 16:35:16,396 - [test_login05.py - line:57] - INFO:测试编号6,测试用例标题:测试密码是否区分大小写,执行成功！
2021-10-08 16:35:16,543 - [test_login05.py - line:57] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-08 16:35:16,690 - [test_login05.py - line:57] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-08 16:35:16,833 - [test_login05.py - line:57] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-08 16:35:16,983 - [test_login05.py - line:57] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-08 16:35:17,129 - [test_login05.py - line:57] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-08 16:35:17,288 - [test_business_token_order_items02.py - line:66] - INFO:测试编号1,测试用例标题:订单信息查询正常流程,执行成功!
2021-10-08 16:35:17,441 - [test_business_token_order_items02.py - line:66] - INFO:测试编号2,测试用例标题:orderId为空,执行成功!
2021-10-08 16:35:17,601 - [test_business_token_order_items02.py - line:66] - INFO:测试编号3,测试用例标题:订单编号输入非5位的数字,执行成功!
2021-10-08 16:35:17,753 - [test_business_token_order_items02.py - line:66] - INFO:测试编号4,测试用例标题:订单编号输入非数字,执行成功!
2021-10-08 16:35:17,910 - [test_business_token_order_items02.py - line:66] - INFO:测试编号5,测试用例标题:订单编号输入不存在的编号,执行成功!
2021-10-08 16:36:39,632 - [test_business_goods_promote03.py - line:67] - INFO:测试编号1,测试用例标题:商品促销设置正确流程,执行成功!
2021-10-08 16:36:39,787 - [test_business_goods_promote03.py - line:67] - INFO:测试编号2,测试用例标题:测试促销开始时间为空,执行成功!
2021-10-08 16:36:39,941 - [test_business_goods_promote03.py - line:67] - INFO:测试编号3,测试用例标题:测试促销开始时间输入错误的格式:2021-9-01,执行成功!
2021-10-08 16:36:40,177 - [test_business_goods_promote03.py - line:67] - INFO:测试编号7,测试用例标题:测试促销开始时间小于当前时间,执行成功!
2021-10-08 16:36:40,327 - [test_business_goods_promote03.py - line:67] - INFO:测试编号8,测试用例标题:测试促销结束时间为空,执行成功!
2021-10-08 16:36:40,483 - [test_business_goods_promote03.py - line:67] - INFO:测试编号9,测试用例标题:测试促销结束时间格式错误的格式:2021-13-11,执行成功!
2021-10-08 16:36:40,702 - [test_business_goods_promote03.py - line:67] - INFO:测试编号13,测试用例标题:测试促销结束时间输入小于促销开始时间,执行成功!
2021-10-08 16:36:40,860 - [test_business_goods_promote03.py - line:67] - INFO:测试编号14,测试用例标题:测试促销结束时间输入等于促销开始时间,执行成功!
2021-10-08 16:36:41,012 - [test_business_goods_promote03.py - line:67] - INFO:测试编号15,测试用例标题:测试商品编号输入为空,执行成功!
2021-10-08 16:36:41,166 - [test_business_goods_promote03.py - line:67] - INFO:测试编号16,测试用例标题:测试商品编号输入非数字,执行成功!
2021-10-08 16:36:41,317 - [test_business_goods_promote03.py - line:67] - INFO:测试编号17,测试用例标题:测试商品编号输入非6位数字,执行成功!
2021-10-08 16:36:41,473 - [test_business_goods_promote03.py - line:67] - INFO:测试编号18,测试用例标题:测试商品编号输入已经在促销的,执行成功!
2021-10-08 16:36:41,650 - [test_business_goods_promote03.py - line:67] - INFO:测试编号19,测试用例标题:测试商品编号输入不存在的,执行成功!
2021-10-08 16:36:41,801 - [test_business_register03.py - line:64] - INFO:测试编号1,测试用例标题:注册正常流程,执行成功!
2021-10-08 16:36:41,949 - [test_business_register03.py - line:64] - INFO:测试编号2,测试用例标题:测试性别、生日、qq、email不输入的场景,执行成功!
2021-10-08 16:36:42,095 - [test_business_register03.py - line:64] - INFO:测试编号3,测试用例标题:测试用户名有效边界值的场景,执行成功!
2021-10-08 16:36:42,248 - [test_business_register03.py - line:64] - INFO:测试编号4,测试用例标题:测试密码有效边界值的场景,执行成功!
2021-10-08 16:36:42,397 - [test_business_register03.py - line:64] - INFO:测试编号5,测试用例标题:测试qq号有效边界值的场景,执行成功!
2021-10-08 16:36:42,545 - [test_business_register03.py - line:59] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-08 16:36:42,546 - [test_business_register03.py - line:60] - ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-08 16:36:42,693 - [test_business_register03.py - line:59] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-08 16:36:42,693 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-08 16:36:42,843 - [test_business_register03.py - line:59] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-08 16:36:42,844 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-08 16:36:42,988 - [test_business_register03.py - line:64] - INFO:测试编号9,测试用例标题:测试用户名无效边界值的场景,执行成功!
2021-10-08 16:36:43,133 - [test_business_register03.py - line:64] - INFO:测试编号10,测试用例标题:测试用户名为空的场景,执行成功!
2021-10-08 16:36:43,277 - [test_business_register03.py - line:64] - INFO:测试编号11,测试用例标题:测试用户名非字母开头的场景,执行成功!
2021-10-08 16:36:43,418 - [test_business_register03.py - line:64] - INFO:测试编号12,测试用例标题:测试用户名包含符号或者汉字的场景,执行成功!
2021-10-08 16:36:43,565 - [test_business_register03.py - line:64] - INFO:测试编号13,测试用例标题:测试用户名已存在的场景,执行成功!
2021-10-08 16:36:43,723 - [test_business_register03.py - line:64] - INFO:测试编号14,测试用例标题:测试密码无效边界值的场景,执行成功!
2021-10-08 16:36:43,864 - [test_business_register03.py - line:64] - INFO:测试编号15,测试用例标题:测试密码为空的场景,执行成功!
2021-10-08 16:36:44,007 - [test_business_register03.py - line:64] - INFO:测试编号16,测试用例标题:测试密码包含符号或者汉字的场景,执行成功!
2021-10-08 16:36:44,148 - [test_business_register03.py - line:64] - INFO:测试编号17,测试用例标题:测试确认密码大小写区分的场景,执行成功!
2021-10-08 16:36:44,289 - [test_business_register03.py - line:64] - INFO:测试编号18,测试用例标题:测试确认密码和密码不一致的场景,执行成功!
2021-10-08 16:36:44,430 - [test_business_register03.py - line:64] - INFO:测试编号19,测试用例标题:测试确认密码为空的场景,执行成功!
2021-10-08 16:36:44,570 - [test_business_register03.py - line:64] - INFO:测试编号20,测试用例标题:测试手机号为空的场景,执行成功!
2021-10-08 16:36:44,711 - [test_business_register03.py - line:64] - INFO:测试编号21,测试用例标题:测试手机号非11位的场景,执行成功!
2021-10-08 16:36:44,852 - [test_business_register03.py - line:64] - INFO:测试编号22,测试用例标题:测试手机号已注册的场景,执行成功!
2021-10-08 16:36:44,995 - [test_business_register03.py - line:64] - INFO:测试编号23,测试用例标题:测试手机号非数字的场景,执行成功!
2021-10-08 16:36:45,137 - [test_business_register03.py - line:64] - INFO:测试编号24,测试用例标题:测试性别非枚举的场景,执行成功!
2021-10-08 16:36:45,277 - [test_business_register03.py - line:64] - INFO:测试编号25,测试用例标题:测试性别男+女的场景,执行成功!
2021-10-08 16:36:45,418 - [test_business_register03.py - line:64] - INFO:测试编号26,测试用例标题:测试生日年月日不完整的场景,执行成功!
2021-10-08 16:36:45,577 - [test_business_register03.py - line:64] - INFO:测试编号27,测试用例标题:测试生日输入非数字的场景,执行成功!
2021-10-08 16:36:45,719 - [test_business_register03.py - line:64] - INFO:测试编号28,测试用例标题:测试生日输入不存在的日期的场景,执行成功!
2021-10-08 16:36:45,861 - [test_business_register03.py - line:64] - INFO:测试编号29,测试用例标题:测试QQ号码无效边界值的场景,执行成功!
2021-10-08 16:36:46,000 - [test_business_register03.py - line:64] - INFO:测试编号30,测试用例标题:测试QQ号码非数字的场景,执行成功!
2021-10-08 16:36:46,144 - [test_business_register03.py - line:64] - INFO:测试编号31,测试用例标题:测试邮箱格式错误的场景,执行成功!
2021-10-08 16:36:46,289 - [test_business_register03.py - line:64] - INFO:测试编号32,测试用例标题:测试邮箱为已注册邮箱的场景,执行成功!
2021-10-08 16:36:46,444 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号1,测试用例标题:商品信息查询正常流程_无条件查询,执行成功!
2021-10-08 16:36:46,595 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号2,测试用例标题:测试token值为空的场景,执行成功!
2021-10-08 16:36:46,735 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号3,测试用例标题:测试错误的token场景,执行成功!
2021-10-08 16:36:46,884 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号4,测试用例标题:测试token值大小写区分的场景,执行成功!
2021-10-08 16:36:47,048 - [test_business_token_goodsInfo03.py - line:69] - ERROR:测试编号5,测试用例标题:测试上一次的token的场景,执行失败,实际结果为:{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone11', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '三星note7', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '华为P40', 'shopPrice': 6000.0, 'promotePrice': 0.0, 'num': 666}, {'goodsName': '华为P50', 'shopPrice': 4500.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米11', 'shopPrice': 4000.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '三星s21', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '贵州茅台', 'shopPrice': 1499.0, 'promotePrice': 0.0, 'num': 0}, {'goodsName': '牛仔短裤', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': '优衣库', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': '小米8', 'shopPrice': 2299.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '三星s7', 'shopPrice': 500.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '华为mate10', 'shopPrice': 800.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '红米10', 'shopPrice': 500.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '羊毛衫', 'shopPrice': 199.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': 'iPhone8', 'shopPrice': 2999.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone5s', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone10', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone20', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhonese', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone6', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone6s', 'shopPrice': 1666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone7', 'shopPrice': 1999.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '卫龙辣条', 'shopPrice': 2.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '牛仔上衣', 'shopPrice': 99.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': '牛仔裤', 'shopPrice': 0.01, 'promotePrice': 0.0, 'num': 50}]}!
2021-10-08 16:36:47,048 - [test_business_token_goodsInfo03.py - line:70] - ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[2015 chars]50}]}
Diff is 4162 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 66, in test_token_goods_info
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[2015 chars]50}]}
Diff is 4162 characters long. Set self.maxDiff to None to see it.
2021-10-08 16:36:47,203 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号6,测试用例标题:测试goodsId格式错误的场景,执行成功!
2021-10-08 16:36:47,353 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号7,测试用例标题:测试goodsId不存在的场景,执行成功!
2021-10-08 16:36:47,502 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号8,测试用例标题:测试isOnSale为非枚举的场景,执行成功!
2021-10-08 16:36:47,668 - [test_business_token_goodsInfo03.py - line:69] - ERROR:测试编号9,测试用例标题:测试isOnSale状态不对应的场景,执行失败,实际结果为:{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}]}!
2021-10-08 16:36:47,668 - [test_business_token_goodsInfo03.py - line:70] - ERROR:{'code': 1008, 'msg': '没有符合条件的数据'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[65 chars]00}]}
- {'code': 1008, 'msg': '没有符合条件的数据'}
+ {'code': 1000,
+  'goods_tiems': [{'goodsName': '预留数据',
+                   'num': 1000,
+                   'promotePrice': 0.0,
+                   'shopPrice': 100.0}],
+  'msg': '查询成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 66, in test_token_goods_info
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '没有符合条件的数据'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[65 chars]00}]}
- {'code': 1008, 'msg': '没有符合条件的数据'}
+ {'code': 1000,
+  'goods_tiems': [{'goodsName': '预留数据',
+                   'num': 1000,
+                   'promotePrice': 0.0,
+                   'shopPrice': 100.0}],
+  'msg': '查询成功'}
2021-10-08 16:36:47,822 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号10,测试用例标题:测试isPromote为非枚举的场景,执行成功!
2021-10-08 16:36:47,978 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号11,测试用例标题:测试isPromote状态不对应的场景,执行成功!
2021-10-08 16:36:48,127 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号12,测试用例标题:测试商品编号正确+isOnSale为0+isPromote为空的场景,执行成功!
2021-10-08 16:36:48,280 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号13,测试用例标题:测试商品编号正确+isOnSale为空+isPromote为0的场景,执行成功!
2021-10-08 16:36:48,429 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号14,测试用例标题:测试商品编号正确+isOnSale为1+isPromote为空的场景,执行成功!
2021-10-08 16:36:48,577 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号15,测试用例标题:测试商品编号正确+isOnSale为空+isPromote为1的场景,执行成功!
2021-10-08 16:36:48,727 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号16,测试用例标题:测试商品编号为空+isOnSale为0+isPromote为0的场景,执行成功!
2021-10-08 16:36:48,877 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号17,测试用例标题:测试商品编号为空+isOnSale为1+isPromote为1的场景,执行成功!
2021-10-08 16:36:49,028 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号18,测试用例标题:测试商品编号为空+isOnSale为1+isPromote为0的场景,执行成功!
2021-10-08 16:36:49,178 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号19,测试用例标题:测试商品编号为空+isOnSale为0+isPromote为1的场景,执行成功!
2021-10-08 16:36:49,326 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号20,测试用例标题:测试编号正确+isOnSale为0+isPromote为1的场景,执行成功!
2021-10-08 16:36:49,479 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号21,测试用例标题:测试编号正确+isOnSale为0+isPromote为0的场景,执行成功!
2021-10-08 16:36:49,659 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号22,测试用例标题:测试编号正确+isOnSale为1+isPromote为1的场景,执行成功!
2021-10-08 16:36:49,811 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号23,测试用例标题:测试编号正确+isOnSale为1+isPromote为0的场景,执行成功!
2021-10-08 16:36:49,965 - [test_business_goods_delete03.py - line:65] - INFO:测试编号1,测试用例标题:商品删除正确流程,执行成功!
2021-10-08 16:36:50,115 - [test_business_goods_delete03.py - line:65] - INFO:测试编号2,测试用例标题:测试商品编号为空的场景,执行成功!
2021-10-08 16:36:50,270 - [test_business_goods_delete03.py - line:65] - INFO:测试编号3,测试用例标题:测试商品编号不存在的场景,执行成功!
2021-10-08 16:36:50,421 - [test_business_goods_delete03.py - line:65] - INFO:测试编号4,测试用例标题:测试商品编号输入非6位整数的场景,执行成功!
2021-10-08 16:36:50,572 - [test_business_goods_delete03.py - line:65] - INFO:测试编号5,测试用例标题:测试商品编号输入字母的场景,执行成功!
2021-10-08 16:36:50,721 - [test_business_goods_delete03.py - line:65] - INFO:测试编号6,测试用例标题:测试商品编号输入为汉字的场景,执行成功!
2021-10-08 16:36:50,894 - [test_business_goods_delete03.py - line:65] - INFO:测试编号7,测试用例标题:测试商品编号输入为商品未下架的场景,执行成功!
2021-10-08 16:36:51,051 - [test_business_goods_input03.py - line:58] - INFO:测试编号1,测试用例标题:商品录入正常流程,执行成功!
2021-10-08 16:36:51,204 - [test_business_goods_input03.py - line:58] - INFO:测试编号2,测试用例标题:测试商品名输入为空,执行成功!
2021-10-08 16:36:51,357 - [test_business_goods_input03.py - line:58] - INFO:测试编号3,测试用例标题:测试商品名输入有效边界值,执行成功!
2021-10-08 16:36:51,507 - [test_business_goods_input03.py - line:58] - INFO:测试编号4,测试用例标题:测试商品名输入无效边界值,执行成功!
2021-10-08 16:36:51,673 - [test_business_goods_input03.py - line:58] - INFO:测试编号5,测试用例标题:测试商品名输入重复商品名,执行成功!
2021-10-08 16:36:51,822 - [test_business_goods_input03.py - line:58] - INFO:测试编号6,测试用例标题:测试商品分类id输入为空,执行成功!
2021-10-08 16:36:51,973 - [test_business_goods_input03.py - line:58] - INFO:测试编号7,测试用例标题:测试商品分类id输入非数字,执行成功!
2021-10-08 16:36:52,123 - [test_business_goods_input03.py - line:58] - INFO:测试编号8,测试用例标题:测试商品分类id输入非5位数字,执行成功!
2021-10-08 16:36:52,275 - [test_business_goods_input03.py - line:58] - INFO:测试编号9,测试用例标题:测试商品分类id输入不存在的商品分类id,执行成功!
2021-10-08 16:36:52,427 - [test_business_goods_input03.py - line:58] - INFO:测试编号10,测试用例标题:测试商品描述输入为空,执行成功!
2021-10-08 16:36:52,584 - [test_business_goods_input03.py - line:58] - INFO:测试编号11,测试用例标题:测试商品描述输入有效边界值,执行成功!
2021-10-08 16:36:52,731 - [test_business_goods_input03.py - line:58] - INFO:测试编号12,测试用例标题:测试商品描述输入无效边界值,执行成功!
2021-10-08 16:36:52,881 - [test_business_goods_input03.py - line:58] - INFO:测试编号13,测试用例标题:测试商品库存输入为空,执行成功!
2021-10-08 16:36:53,035 - [test_business_goods_input03.py - line:58] - INFO:测试编号14,测试用例标题:测试商品库存输入0,执行成功!
2021-10-08 16:36:53,184 - [test_business_goods_input03.py - line:58] - INFO:测试编号15,测试用例标题:测试商品库存输入为负数,执行成功!
2021-10-08 16:36:53,333 - [test_business_goods_input03.py - line:58] - INFO:测试编号16,测试用例标题:测试商品库存输入为非数字,执行成功!
2021-10-08 16:36:53,480 - [test_business_goods_input03.py - line:58] - INFO:测试编号17,测试用例标题:测试商品库存输入非整数,执行成功!
2021-10-08 16:36:53,640 - [test_business_goods_input03.py - line:58] - INFO:测试编号18,测试用例标题:测试商品库存输入有效边界值,执行成功!
2021-10-08 16:36:53,806 - [test_business_goods_input03.py - line:58] - INFO:测试编号19,测试用例标题:测试商品库存输入无效边界值,执行成功!
2021-10-08 16:36:53,956 - [test_business_goods_input03.py - line:58] - INFO:测试编号20,测试用例标题:测试商品价格输入为空,执行成功!
2021-10-08 16:36:54,106 - [test_business_goods_input03.py - line:53] - ERROR:测试编号21,测试用例标题:测试商品价格输入0.00,执行失败,实际结果为:{'code': 1013, 'msg': '产品名称不能重复'}!
2021-10-08 16:36:54,106 - [test_business_goods_input03.py - line:54] - ERROR:{'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input06\test_business_goods_input03.py", line 45, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

2021-10-08 16:36:54,258 - [test_business_goods_input03.py - line:58] - INFO:测试编号22,测试用例标题:测试商品价格输入负数,执行成功!
2021-10-08 16:36:54,411 - [test_business_goods_input03.py - line:58] - INFO:测试编号23,测试用例标题:测试商品价格输入为非数字,执行成功!
2021-10-08 16:36:54,562 - [test_business_goods_input03.py - line:58] - INFO:测试编号24,测试用例标题:测试商品价格输入非两位的小数点,执行成功!
2021-10-08 16:36:54,743 - [test_business_goods_input03.py - line:58] - INFO:测试编号25,测试用例标题:测试商品价格输入有效边界值,执行成功!
2021-10-08 16:36:54,894 - [test_business_goods_input03.py - line:58] - INFO:测试编号26,测试用例标题:测试商品价格输入无效边界值,执行成功!
2021-10-08 16:36:55,045 - [test_login05.py - line:57] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-08 16:36:55,197 - [test_login05.py - line:57] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-08 16:36:55,341 - [test_login05.py - line:57] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-08 16:36:55,485 - [test_login05.py - line:57] - INFO:测试编号4,测试用例标题:测试用户名是否区分大小写,执行成功！
2021-10-08 16:36:55,627 - [test_login05.py - line:57] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-08 16:36:55,787 - [test_login05.py - line:57] - INFO:测试编号6,测试用例标题:测试密码是否区分大小写,执行成功！
2021-10-08 16:36:55,929 - [test_login05.py - line:57] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-08 16:36:56,073 - [test_login05.py - line:57] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-08 16:36:56,216 - [test_login05.py - line:57] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-08 16:36:56,360 - [test_login05.py - line:57] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-08 16:36:56,503 - [test_login05.py - line:57] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-08 16:36:56,656 - [test_business_token_order_items02.py - line:66] - INFO:测试编号1,测试用例标题:订单信息查询正常流程,执行成功!
2021-10-08 16:36:56,804 - [test_business_token_order_items02.py - line:66] - INFO:测试编号2,测试用例标题:orderId为空,执行成功!
2021-10-08 16:36:56,954 - [test_business_token_order_items02.py - line:66] - INFO:测试编号3,测试用例标题:订单编号输入非5位的数字,执行成功!
2021-10-08 16:36:57,107 - [test_business_token_order_items02.py - line:66] - INFO:测试编号4,测试用例标题:订单编号输入非数字,执行成功!
2021-10-08 16:36:57,257 - [test_business_token_order_items02.py - line:66] - INFO:测试编号5,测试用例标题:订单编号输入不存在的编号,执行成功!
2021-10-08 16:37:25,242 - [test_business_goods_promote03.py - line:67] - INFO:测试编号1,测试用例标题:商品促销设置正确流程,执行成功!
2021-10-08 16:37:25,396 - [test_business_goods_promote03.py - line:67] - INFO:测试编号2,测试用例标题:测试促销开始时间为空,执行成功!
2021-10-08 16:37:25,549 - [test_business_goods_promote03.py - line:67] - INFO:测试编号3,测试用例标题:测试促销开始时间输入错误的格式:2021-9-01,执行成功!
2021-10-08 16:37:25,773 - [test_business_goods_promote03.py - line:67] - INFO:测试编号7,测试用例标题:测试促销开始时间小于当前时间,执行成功!
2021-10-08 16:37:25,928 - [test_business_goods_promote03.py - line:67] - INFO:测试编号8,测试用例标题:测试促销结束时间为空,执行成功!
2021-10-08 16:37:26,083 - [test_business_goods_promote03.py - line:67] - INFO:测试编号9,测试用例标题:测试促销结束时间格式错误的格式:2021-13-11,执行成功!
2021-10-08 16:37:26,302 - [test_business_goods_promote03.py - line:67] - INFO:测试编号13,测试用例标题:测试促销结束时间输入小于促销开始时间,执行成功!
2021-10-08 16:37:26,459 - [test_business_goods_promote03.py - line:67] - INFO:测试编号14,测试用例标题:测试促销结束时间输入等于促销开始时间,执行成功!
2021-10-08 16:37:26,614 - [test_business_goods_promote03.py - line:67] - INFO:测试编号15,测试用例标题:测试商品编号输入为空,执行成功!
2021-10-08 16:37:26,767 - [test_business_goods_promote03.py - line:67] - INFO:测试编号16,测试用例标题:测试商品编号输入非数字,执行成功!
2021-10-08 16:37:26,920 - [test_business_goods_promote03.py - line:67] - INFO:测试编号17,测试用例标题:测试商品编号输入非6位数字,执行成功!
2021-10-08 16:37:27,085 - [test_business_goods_promote03.py - line:67] - INFO:测试编号18,测试用例标题:测试商品编号输入已经在促销的,执行成功!
2021-10-08 16:37:27,261 - [test_business_goods_promote03.py - line:67] - INFO:测试编号19,测试用例标题:测试商品编号输入不存在的,执行成功!
2021-10-08 16:37:27,414 - [test_business_register03.py - line:64] - INFO:测试编号1,测试用例标题:注册正常流程,执行成功!
2021-10-08 16:37:27,565 - [test_business_register03.py - line:64] - INFO:测试编号2,测试用例标题:测试性别、生日、qq、email不输入的场景,执行成功!
2021-10-08 16:37:27,718 - [test_business_register03.py - line:64] - INFO:测试编号3,测试用例标题:测试用户名有效边界值的场景,执行成功!
2021-10-08 16:37:27,925 - [test_business_register03.py - line:64] - INFO:测试编号4,测试用例标题:测试密码有效边界值的场景,执行成功!
2021-10-08 16:37:28,120 - [test_business_register03.py - line:64] - INFO:测试编号5,测试用例标题:测试qq号有效边界值的场景,执行成功!
2021-10-08 16:37:28,278 - [test_business_register03.py - line:59] - ERROR:测试编号6,测试用例标题:测试手机号段不支持的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-08 16:37:28,278 - [test_business_register03.py - line:60] - ERROR:{'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '手机号格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1008, 'msg': '手机号格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-08 16:37:28,440 - [test_business_register03.py - line:59] - ERROR:测试编号7,测试用例标题:测试生日超过当前日期的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-08 16:37:28,440 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-08 16:37:28,590 - [test_business_register03.py - line:59] - ERROR:测试编号8,测试用例标题:测试生日超出合理时间范畴的场景,执行失败,实际结果为:{'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}!
2021-10-08 16:37:28,591 - [test_business_register03.py - line:60] - ERROR:{'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_register03\test_business_register03.py", line 51, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '生日格式错误'} != {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
- {'code': 1010, 'msg': '生日格式错误'}
+ {'code': 1013, 'msg': '该用户名、手机号、邮箱已经被注册'}
2021-10-08 16:37:28,744 - [test_business_register03.py - line:64] - INFO:测试编号9,测试用例标题:测试用户名无效边界值的场景,执行成功!
2021-10-08 16:37:28,893 - [test_business_register03.py - line:64] - INFO:测试编号10,测试用例标题:测试用户名为空的场景,执行成功!
2021-10-08 16:37:29,039 - [test_business_register03.py - line:64] - INFO:测试编号11,测试用例标题:测试用户名非字母开头的场景,执行成功!
2021-10-08 16:37:29,190 - [test_business_register03.py - line:64] - INFO:测试编号12,测试用例标题:测试用户名包含符号或者汉字的场景,执行成功!
2021-10-08 16:37:29,339 - [test_business_register03.py - line:64] - INFO:测试编号13,测试用例标题:测试用户名已存在的场景,执行成功!
2021-10-08 16:37:29,514 - [test_business_register03.py - line:64] - INFO:测试编号14,测试用例标题:测试密码无效边界值的场景,执行成功!
2021-10-08 16:37:29,660 - [test_business_register03.py - line:64] - INFO:测试编号15,测试用例标题:测试密码为空的场景,执行成功!
2021-10-08 16:37:29,806 - [test_business_register03.py - line:64] - INFO:测试编号16,测试用例标题:测试密码包含符号或者汉字的场景,执行成功!
2021-10-08 16:37:29,955 - [test_business_register03.py - line:64] - INFO:测试编号17,测试用例标题:测试确认密码大小写区分的场景,执行成功!
2021-10-08 16:37:30,103 - [test_business_register03.py - line:64] - INFO:测试编号18,测试用例标题:测试确认密码和密码不一致的场景,执行成功!
2021-10-08 16:37:30,251 - [test_business_register03.py - line:64] - INFO:测试编号19,测试用例标题:测试确认密码为空的场景,执行成功!
2021-10-08 16:37:30,398 - [test_business_register03.py - line:64] - INFO:测试编号20,测试用例标题:测试手机号为空的场景,执行成功!
2021-10-08 16:37:30,542 - [test_business_register03.py - line:64] - INFO:测试编号21,测试用例标题:测试手机号非11位的场景,执行成功!
2021-10-08 16:37:30,694 - [test_business_register03.py - line:64] - INFO:测试编号22,测试用例标题:测试手机号已注册的场景,执行成功!
2021-10-08 16:37:30,842 - [test_business_register03.py - line:64] - INFO:测试编号23,测试用例标题:测试手机号非数字的场景,执行成功!
2021-10-08 16:37:30,990 - [test_business_register03.py - line:64] - INFO:测试编号24,测试用例标题:测试性别非枚举的场景,执行成功!
2021-10-08 16:37:31,135 - [test_business_register03.py - line:64] - INFO:测试编号25,测试用例标题:测试性别男+女的场景,执行成功!
2021-10-08 16:37:31,286 - [test_business_register03.py - line:64] - INFO:测试编号26,测试用例标题:测试生日年月日不完整的场景,执行成功!
2021-10-08 16:37:31,450 - [test_business_register03.py - line:64] - INFO:测试编号27,测试用例标题:测试生日输入非数字的场景,执行成功!
2021-10-08 16:37:31,598 - [test_business_register03.py - line:64] - INFO:测试编号28,测试用例标题:测试生日输入不存在的日期的场景,执行成功!
2021-10-08 16:37:31,747 - [test_business_register03.py - line:64] - INFO:测试编号29,测试用例标题:测试QQ号码无效边界值的场景,执行成功!
2021-10-08 16:37:31,895 - [test_business_register03.py - line:64] - INFO:测试编号30,测试用例标题:测试QQ号码非数字的场景,执行成功!
2021-10-08 16:37:32,047 - [test_business_register03.py - line:64] - INFO:测试编号31,测试用例标题:测试邮箱格式错误的场景,执行成功!
2021-10-08 16:37:32,198 - [test_business_register03.py - line:64] - INFO:测试编号32,测试用例标题:测试邮箱为已注册邮箱的场景,执行成功!
2021-10-08 16:37:32,359 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号1,测试用例标题:商品信息查询正常流程_无条件查询,执行成功!
2021-10-08 16:37:32,514 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号2,测试用例标题:测试token值为空的场景,执行成功!
2021-10-08 16:37:32,662 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号3,测试用例标题:测试错误的token场景,执行成功!
2021-10-08 16:37:32,816 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号4,测试用例标题:测试token值大小写区分的场景,执行成功!
2021-10-08 16:37:32,987 - [test_business_token_goodsInfo03.py - line:69] - ERROR:测试编号5,测试用例标题:测试上一次的token的场景,执行失败,实际结果为:{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}, {'goodsName': 'iphone11', 'shopPrice': 9999.0, 'promotePrice': 0.0, 'num': 100}, {'goodsName': '三星note7', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '华为P40', 'shopPrice': 6000.0, 'promotePrice': 0.0, 'num': 666}, {'goodsName': '华为P50', 'shopPrice': 4500.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '小米11', 'shopPrice': 4000.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '三星s21', 'shopPrice': 7000.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '贵州茅台', 'shopPrice': 1499.0, 'promotePrice': 0.0, 'num': 0}, {'goodsName': '牛仔短裤', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': '优衣库', 'shopPrice': 0.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': '小米8', 'shopPrice': 2299.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '三星s7', 'shopPrice': 500.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '华为mate10', 'shopPrice': 800.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '红米10', 'shopPrice': 500.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '羊毛衫', 'shopPrice': 199.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': 'iPhone8', 'shopPrice': 2999.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone5s', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone10', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone20', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhonese', 'shopPrice': 2666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone6', 'shopPrice': 666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone6s', 'shopPrice': 1666.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': 'iPhone7', 'shopPrice': 1999.0, 'promotePrice': 0.0, 'num': 9999}, {'goodsName': '卫龙辣条', 'shopPrice': 2.0, 'promotePrice': 0.0, 'num': 999}, {'goodsName': '牛仔上衣', 'shopPrice': 99.0, 'promotePrice': 0.0, 'num': 50}, {'goodsName': '牛仔裤', 'shopPrice': 0.01, 'promotePrice': 0.0, 'num': 50}]}!
2021-10-08 16:37:32,987 - [test_business_token_goodsInfo03.py - line:70] - ERROR:{'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[2015 chars]50}]}
Diff is 4162 characters long. Set self.maxDiff to None to see it.
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 66, in test_token_goods_info
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '鉴权失败,请检查token是否失效'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[2015 chars]50}]}
Diff is 4162 characters long. Set self.maxDiff to None to see it.
2021-10-08 16:37:33,166 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号6,测试用例标题:测试goodsId格式错误的场景,执行成功!
2021-10-08 16:37:33,321 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号7,测试用例标题:测试goodsId不存在的场景,执行成功!
2021-10-08 16:37:33,499 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号8,测试用例标题:测试isOnSale为非枚举的场景,执行成功!
2021-10-08 16:37:33,674 - [test_business_token_goodsInfo03.py - line:69] - ERROR:测试编号9,测试用例标题:测试isOnSale状态不对应的场景,执行失败,实际结果为:{'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goodsName': '预留数据', 'shopPrice': 100.0, 'promotePrice': 0.0, 'num': 1000}]}!
2021-10-08 16:37:33,674 - [test_business_token_goodsInfo03.py - line:70] - ERROR:{'code': 1008, 'msg': '没有符合条件的数据'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[65 chars]00}]}
- {'code': 1008, 'msg': '没有符合条件的数据'}
+ {'code': 1000,
+  'goods_tiems': [{'goodsName': '预留数据',
+                   'num': 1000,
+                   'promotePrice': 0.0,
+                   'shopPrice': 100.0}],
+  'msg': '查询成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goodsInfo04\test_business_token_goodsInfo03.py", line 66, in test_token_goods_info
    self.assertEqual(eval(case.expect), res_body)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1008, 'msg': '没有符合条件的数据'} != {'code': 1000, 'msg': '查询成功', 'goods_tiems': [{'goods[65 chars]00}]}
- {'code': 1008, 'msg': '没有符合条件的数据'}
+ {'code': 1000,
+  'goods_tiems': [{'goodsName': '预留数据',
+                   'num': 1000,
+                   'promotePrice': 0.0,
+                   'shopPrice': 100.0}],
+  'msg': '查询成功'}
2021-10-08 16:37:33,834 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号10,测试用例标题:测试isPromote为非枚举的场景,执行成功!
2021-10-08 16:37:33,993 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号11,测试用例标题:测试isPromote状态不对应的场景,执行成功!
2021-10-08 16:37:34,151 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号12,测试用例标题:测试商品编号正确+isOnSale为0+isPromote为空的场景,执行成功!
2021-10-08 16:37:34,309 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号13,测试用例标题:测试商品编号正确+isOnSale为空+isPromote为0的场景,执行成功!
2021-10-08 16:37:34,468 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号14,测试用例标题:测试商品编号正确+isOnSale为1+isPromote为空的场景,执行成功!
2021-10-08 16:37:34,626 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号15,测试用例标题:测试商品编号正确+isOnSale为空+isPromote为1的场景,执行成功!
2021-10-08 16:37:34,787 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号16,测试用例标题:测试商品编号为空+isOnSale为0+isPromote为0的场景,执行成功!
2021-10-08 16:37:34,947 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号17,测试用例标题:测试商品编号为空+isOnSale为1+isPromote为1的场景,执行成功!
2021-10-08 16:37:35,110 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号18,测试用例标题:测试商品编号为空+isOnSale为1+isPromote为0的场景,执行成功!
2021-10-08 16:37:35,271 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号19,测试用例标题:测试商品编号为空+isOnSale为0+isPromote为1的场景,执行成功!
2021-10-08 16:37:35,439 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号20,测试用例标题:测试编号正确+isOnSale为0+isPromote为1的场景,执行成功!
2021-10-08 16:37:35,599 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号21,测试用例标题:测试编号正确+isOnSale为0+isPromote为0的场景,执行成功!
2021-10-08 16:37:35,773 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号22,测试用例标题:测试编号正确+isOnSale为1+isPromote为1的场景,执行成功!
2021-10-08 16:37:35,933 - [test_business_token_goodsInfo03.py - line:74] - INFO:测试编号23,测试用例标题:测试编号正确+isOnSale为1+isPromote为0的场景,执行成功!
2021-10-08 16:37:36,096 - [test_business_goods_delete03.py - line:65] - INFO:测试编号1,测试用例标题:商品删除正确流程,执行成功!
2021-10-08 16:37:36,255 - [test_business_goods_delete03.py - line:65] - INFO:测试编号2,测试用例标题:测试商品编号为空的场景,执行成功!
2021-10-08 16:37:36,417 - [test_business_goods_delete03.py - line:65] - INFO:测试编号3,测试用例标题:测试商品编号不存在的场景,执行成功!
2021-10-08 16:37:36,576 - [test_business_goods_delete03.py - line:65] - INFO:测试编号4,测试用例标题:测试商品编号输入非6位整数的场景,执行成功!
2021-10-08 16:37:36,734 - [test_business_goods_delete03.py - line:65] - INFO:测试编号5,测试用例标题:测试商品编号输入字母的场景,执行成功!
2021-10-08 16:37:36,891 - [test_business_goods_delete03.py - line:65] - INFO:测试编号6,测试用例标题:测试商品编号输入为汉字的场景,执行成功!
2021-10-08 16:37:37,050 - [test_business_goods_delete03.py - line:65] - INFO:测试编号7,测试用例标题:测试商品编号输入为商品未下架的场景,执行成功!
2021-10-08 16:37:37,212 - [test_business_goods_input03.py - line:58] - INFO:测试编号1,测试用例标题:商品录入正常流程,执行成功!
2021-10-08 16:37:37,372 - [test_business_goods_input03.py - line:58] - INFO:测试编号2,测试用例标题:测试商品名输入为空,执行成功!
2021-10-08 16:37:37,557 - [test_business_goods_input03.py - line:58] - INFO:测试编号3,测试用例标题:测试商品名输入有效边界值,执行成功!
2021-10-08 16:37:37,716 - [test_business_goods_input03.py - line:58] - INFO:测试编号4,测试用例标题:测试商品名输入无效边界值,执行成功!
2021-10-08 16:37:37,895 - [test_business_goods_input03.py - line:58] - INFO:测试编号5,测试用例标题:测试商品名输入重复商品名,执行成功!
2021-10-08 16:37:38,055 - [test_business_goods_input03.py - line:58] - INFO:测试编号6,测试用例标题:测试商品分类id输入为空,执行成功!
2021-10-08 16:37:38,212 - [test_business_goods_input03.py - line:58] - INFO:测试编号7,测试用例标题:测试商品分类id输入非数字,执行成功!
2021-10-08 16:37:38,366 - [test_business_goods_input03.py - line:58] - INFO:测试编号8,测试用例标题:测试商品分类id输入非5位数字,执行成功!
2021-10-08 16:37:38,519 - [test_business_goods_input03.py - line:58] - INFO:测试编号9,测试用例标题:测试商品分类id输入不存在的商品分类id,执行成功!
2021-10-08 16:37:38,685 - [test_business_goods_input03.py - line:58] - INFO:测试编号10,测试用例标题:测试商品描述输入为空,执行成功!
2021-10-08 16:37:38,858 - [test_business_goods_input03.py - line:58] - INFO:测试编号11,测试用例标题:测试商品描述输入有效边界值,执行成功!
2021-10-08 16:37:39,015 - [test_business_goods_input03.py - line:58] - INFO:测试编号12,测试用例标题:测试商品描述输入无效边界值,执行成功!
2021-10-08 16:37:39,173 - [test_business_goods_input03.py - line:58] - INFO:测试编号13,测试用例标题:测试商品库存输入为空,执行成功!
2021-10-08 16:37:39,334 - [test_business_goods_input03.py - line:58] - INFO:测试编号14,测试用例标题:测试商品库存输入0,执行成功!
2021-10-08 16:37:39,491 - [test_business_goods_input03.py - line:58] - INFO:测试编号15,测试用例标题:测试商品库存输入为负数,执行成功!
2021-10-08 16:37:39,651 - [test_business_goods_input03.py - line:58] - INFO:测试编号16,测试用例标题:测试商品库存输入为非数字,执行成功!
2021-10-08 16:37:39,808 - [test_business_goods_input03.py - line:58] - INFO:测试编号17,测试用例标题:测试商品库存输入非整数,执行成功!
2021-10-08 16:37:39,970 - [test_business_goods_input03.py - line:58] - INFO:测试编号18,测试用例标题:测试商品库存输入有效边界值,执行成功!
2021-10-08 16:37:40,143 - [test_business_goods_input03.py - line:58] - INFO:测试编号19,测试用例标题:测试商品库存输入无效边界值,执行成功!
2021-10-08 16:37:40,298 - [test_business_goods_input03.py - line:58] - INFO:测试编号20,测试用例标题:测试商品价格输入为空,执行成功!
2021-10-08 16:37:40,456 - [test_business_goods_input03.py - line:53] - ERROR:测试编号21,测试用例标题:测试商品价格输入0.00,执行失败,实际结果为:{'code': 1013, 'msg': '产品名称不能重复'}!
2021-10-08 16:37:40,456 - [test_business_goods_input03.py - line:54] - ERROR:{'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_goods_input06\test_business_goods_input03.py", line 45, in test_goods_input
    self.assertEqual(eval(case.expect), res)
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1010, 'msg': '商品价格格式不正确'} != {'code': 1013, 'msg': '产品名称不能重复'}
- {'code': 1010, 'msg': '商品价格格式不正确'}
?             ^          ^ ^^^^ ^^

+ {'code': 1013, 'msg': '产品名称不能重复'}
?             ^          ^ ^^ ^^^

2021-10-08 16:37:40,608 - [test_business_goods_input03.py - line:58] - INFO:测试编号22,测试用例标题:测试商品价格输入负数,执行成功!
2021-10-08 16:37:40,772 - [test_business_goods_input03.py - line:58] - INFO:测试编号23,测试用例标题:测试商品价格输入为非数字,执行成功!
2021-10-08 16:37:40,928 - [test_business_goods_input03.py - line:58] - INFO:测试编号24,测试用例标题:测试商品价格输入非两位的小数点,执行成功!
2021-10-08 16:37:41,088 - [test_business_goods_input03.py - line:58] - INFO:测试编号25,测试用例标题:测试商品价格输入有效边界值,执行成功!
2021-10-08 16:37:41,242 - [test_business_goods_input03.py - line:58] - INFO:测试编号26,测试用例标题:测试商品价格输入无效边界值,执行成功!
2021-10-08 16:37:41,390 - [test_login05.py - line:57] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2021-10-08 16:37:41,546 - [test_login05.py - line:57] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2021-10-08 16:37:41,691 - [test_login05.py - line:57] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2021-10-08 16:37:41,844 - [test_login05.py - line:52] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzcxMjI2MS42OTc4MjQyOmJmY2UyYTE4OWIwYWRjZjczNzkxYzQxMDhmMjhhMmY3ZjgyZTE4OTA='}
2021-10-08 16:37:41,844 - [test_login05.py - line:53] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzcxMjI2M[64 chars]TA='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzcxMjI2MS42OTc4MjQyOmJmY2UyYTE4OWIwYWRjZjczNzkxYzQxMDhmMjhhMmY3ZjgyZTE4OTA='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzcxMjI2M[64 chars]TA='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzcxMjI2MS42OTc4MjQyOmJmY2UyYTE4OWIwYWRjZjczNzkxYzQxMDhmMjhhMmY3ZjgyZTE4OTA='}
2021-10-08 16:37:41,993 - [test_login05.py - line:57] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2021-10-08 16:37:42,160 - [test_login05.py - line:52] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzcxMjI2MS45OTgwMjE6NDkyMmI4YTFhMjEyYjg0YTU2MTg0MTMxMjczYTNiYzdlOGUzYjE3Ng=='}
2021-10-08 16:37:42,160 - [test_login05.py - line:53] - ERROR:{'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzcxMjI2M[64 chars]g=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzcxMjI2MS45OTgwMjE6NDkyMmI4YTFhMjEyYjg0YTU2MTg0MTMxMjczYTNiYzdlOGUzYjE3Ng=='}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 49, in test_login
    self.assertEqual(eval(case.expect), res_body)  # assert是断言的意思，Equal是相等、比较的意思
  File "D:\tools\python\lib\unittest\case.py", line 839, in assertEqual
    assertion_func(first, second, msg=msg)
  File "D:\tools\python\lib\unittest\case.py", line 1138, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "D:\tools\python\lib\unittest\case.py", line 680, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '用户名或者密码错误'} != {'code': 1000, 'msg': '登录成功', 'token': 'MTYzMzcxMjI2M[64 chars]g=='}
- {'code': 1007, 'msg': '用户名或者密码错误'}
+ {'code': 1000,
+  'msg': '登录成功',
+  'token': 'MTYzMzcxMjI2MS45OTgwMjE6NDkyMmI4YTFhMjEyYjg0YTU2MTg0MTMxMjczYTNiYzdlOGUzYjE3Ng=='}
2021-10-08 16:37:42,306 - [test_login05.py - line:57] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2021-10-08 16:37:42,458 - [test_login05.py - line:57] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2021-10-08 16:37:42,607 - [test_login05.py - line:57] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2021-10-08 16:37:42,753 - [test_login05.py - line:57] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2021-10-08 16:37:42,900 - [test_login05.py - line:57] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2021-10-08 16:37:43,061 - [test_business_token_order_items02.py - line:66] - INFO:测试编号1,测试用例标题:订单信息查询正常流程,执行成功!
2021-10-08 16:37:43,223 - [test_business_token_order_items02.py - line:66] - INFO:测试编号2,测试用例标题:orderId为空,执行成功!
2021-10-08 16:37:43,380 - [test_business_token_order_items02.py - line:66] - INFO:测试编号3,测试用例标题:订单编号输入非5位的数字,执行成功!
2021-10-08 16:37:43,533 - [test_business_token_order_items02.py - line:66] - INFO:测试编号4,测试用例标题:订单编号输入非数字,执行成功!
2021-10-08 16:37:43,701 - [test_business_token_order_items02.py - line:66] - INFO:测试编号5,测试用例标题:订单编号输入不存在的编号,执行成功!
2022-02-24 19:44:16,945 - [Ftest_regist.py - line:43] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-24 19:44:17,030 - [Ftest_regist.py - line:43] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-24 19:44:17,131 - [Ftest_regist.py - line:43] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-24 19:44:17,222 - [Ftest_regist.py - line:38] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 19:44:17,222 - [Ftest_regist.py - line:39] - ERROR:{'code': 1003, 'msg': '确认密码不能为空'} != {'code': 1004, 'msg': '两次密码输入不一致'}
- {'code': 1003, 'msg': '确认密码不能为空'}
?             ^          ^^   ^^^

+ {'code': 1004, 'msg': '两次密码输入不一致'}
?             ^          ^^  ++ ^^
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\Ftest_regist.py", line 35, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "C:\Program Files\JetBrains\PyCharm Community Edition 2021.2.1\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files (x86)\新建文件夹\lib\unittest\case.py", line 912, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files (x86)\新建文件夹\lib\unittest\case.py", line 1211, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files (x86)\新建文件夹\lib\unittest\case.py", line 753, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1003, 'msg': '确认密码不能为空'} != {'code': 1004, 'msg': '两次密码输入不一致'}
- {'code': 1003, 'msg': '确认密码不能为空'}
?             ^          ^^   ^^^

+ {'code': 1004, 'msg': '两次密码输入不一致'}
?             ^          ^^  ++ ^^

2022-02-24 19:44:17,443 - [Ftest_regist.py - line:43] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-24 19:44:17,531 - [Ftest_regist.py - line:43] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-24 19:44:17,615 - [Ftest_regist.py - line:43] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-24 19:44:17,707 - [Ftest_regist.py - line:38] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 9999, 'msg': '注册成功'}!
2022-02-24 19:44:17,708 - [Ftest_regist.py - line:39] - ERROR:{'code': 1007, 'msg': '手机号码格式不正确'} != {'code': 9999, 'msg': '注册成功'}
- {'code': 1007, 'msg': '手机号码格式不正确'}
+ {'code': 9999, 'msg': '注册成功'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\Ftest_regist.py", line 35, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "C:\Program Files\JetBrains\PyCharm Community Edition 2021.2.1\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files (x86)\新建文件夹\lib\unittest\case.py", line 912, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files (x86)\新建文件夹\lib\unittest\case.py", line 1211, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files (x86)\新建文件夹\lib\unittest\case.py", line 753, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1007, 'msg': '手机号码格式不正确'} != {'code': 9999, 'msg': '注册成功'}
- {'code': 1007, 'msg': '手机号码格式不正确'}
+ {'code': 9999, 'msg': '注册成功'}
2022-02-24 19:44:17,817 - [Ftest_regist.py - line:43] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-24 19:44:17,906 - [Ftest_regist.py - line:43] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-24 19:44:18,004 - [Ftest_regist.py - line:38] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 9999, 'msg': '注册成功'}!
2022-02-24 19:44:18,004 - [Ftest_regist.py - line:39] - ERROR:{'code': 1009, 'msg': '邮箱格式不正确'} != {'code': 9999, 'msg': '注册成功'}
- {'code': 1009, 'msg': '邮箱格式不正确'}
+ {'code': 9999, 'msg': '注册成功'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\Ftest_regist.py", line 35, in test_register
    self.assertEqual(eval(case.expect), res_body)
  File "C:\Program Files\JetBrains\PyCharm Community Edition 2021.2.1\plugins\python-ce\helpers\pycharm\teamcity\diff_tools.py", line 32, in _patched_equals
    old(self, first, second, msg)
  File "C:\Program Files (x86)\新建文件夹\lib\unittest\case.py", line 912, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Program Files (x86)\新建文件夹\lib\unittest\case.py", line 1211, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "C:\Program Files (x86)\新建文件夹\lib\unittest\case.py", line 753, in fail
    raise self.failureException(msg)
AssertionError: {'code': 1009, 'msg': '邮箱格式不正确'} != {'code': 9999, 'msg': '注册成功'}
- {'code': 1009, 'msg': '邮箱格式不正确'}
+ {'code': 9999, 'msg': '注册成功'}
2022-02-24 19:44:18,127 - [Ftest_regist.py - line:43] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-24 19:48:13,243 - [test_regist.py - line:42] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-24 19:48:13,322 - [test_regist.py - line:42] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-24 19:48:13,403 - [test_regist.py - line:42] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-24 19:48:13,488 - [test_regist.py - line:37] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 19:48:13,488 - [test_regist.py - line:38] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 19:48:13,679 - [test_regist.py - line:42] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-24 19:48:13,761 - [test_regist.py - line:42] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-24 19:48:13,842 - [test_regist.py - line:42] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-24 19:48:13,923 - [test_regist.py - line:37] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 19:48:13,923 - [test_regist.py - line:38] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 19:48:14,008 - [test_regist.py - line:42] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-24 19:48:14,090 - [test_regist.py - line:42] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-24 19:48:14,172 - [test_regist.py - line:37] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 19:48:14,172 - [test_regist.py - line:38] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 19:48:14,265 - [test_regist.py - line:42] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-24 19:49:02,759 - [test_regist.py - line:42] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-24 19:49:02,839 - [test_regist.py - line:42] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-24 19:49:02,924 - [test_regist.py - line:42] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-24 19:49:03,007 - [test_regist.py - line:37] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 19:49:03,007 - [test_regist.py - line:38] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 19:49:03,266 - [test_regist.py - line:42] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-24 19:49:03,346 - [test_regist.py - line:42] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-24 19:49:03,428 - [test_regist.py - line:42] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-24 19:49:03,514 - [test_regist.py - line:37] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 9999, 'msg': '注册成功'}!
2022-02-24 19:49:03,514 - [test_regist.py - line:38] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 9999, 'msg': '注册成功'}
  Differing items:
  {'code': 1007} != {'code': 9999}
  {'msg': '手机号码格式不正确'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 9999, 'msg': '注册成功'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 9999, 'msg': '注册成功'}
  Differing items:
  {'code': 1007} != {'code': 9999}
  {'msg': '手机号码格式不正确'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 9999, 'msg': '注册成功'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 19:49:03,597 - [test_regist.py - line:42] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-24 19:49:03,680 - [test_regist.py - line:42] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-24 19:49:03,788 - [test_regist.py - line:37] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 9999, 'msg': '注册成功'}!
2022-02-24 19:49:03,788 - [test_regist.py - line:38] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 9999, 'msg': '注册成功'}
  Differing items:
  {'code': 1009} != {'code': 9999}
  {'msg': '邮箱格式不正确'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 9999, 'msg': '注册成功'}
  + {'code': 1009, 'msg': '邮箱格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 9999, 'msg': '注册成功'}
  Differing items:
  {'code': 1009} != {'code': 9999}
  {'msg': '邮箱格式不正确'} != {'msg': '注册成功'}
  Full diff:
  - {'code': 9999, 'msg': '注册成功'}
  + {'code': 1009, 'msg': '邮箱格式不正确'}
2022-02-24 19:49:03,874 - [test_regist.py - line:42] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-24 19:53:36,688 - [test_login.py - line:46] - INFO:测试编号1,测试用例标题:登录成功,执行成功！
2022-02-24 19:53:36,780 - [test_login.py - line:46] - INFO:测试编号2,测试用例标题:用户名错误,执行成功！
2022-02-24 19:53:36,861 - [test_login.py - line:46] - INFO:测试编号3,测试用例标题:用户名为空,执行成功！
2022-02-24 19:53:36,944 - [test_login.py - line:46] - INFO:测试编号4,测试用例标题:密码错误,执行成功！
2022-02-24 19:53:37,022 - [test_login.py - line:46] - INFO:测试编号5,测试用例标题:密码为空,执行成功！
2022-02-24 19:55:54,395 - [test_login.py - line:46] - INFO:测试编号1,测试用例标题:登录成功,执行成功！
2022-02-24 19:55:54,477 - [test_login.py - line:46] - INFO:测试编号2,测试用例标题:用户名错误,执行成功！
2022-02-24 19:55:54,566 - [test_login.py - line:46] - INFO:测试编号3,测试用例标题:用户名为空,执行成功！
2022-02-24 19:55:54,647 - [test_login.py - line:46] - INFO:测试编号4,测试用例标题:密码错误,执行成功！
2022-02-24 19:55:54,724 - [test_login.py - line:46] - INFO:测试编号5,测试用例标题:密码为空,执行成功！
2022-02-24 19:59:30,081 - [test_login.py - line:46] - INFO:测试编号1,测试用例标题:登录成功,执行成功！
2022-02-24 19:59:30,164 - [test_login.py - line:46] - INFO:测试编号2,测试用例标题:用户名错误,执行成功！
2022-02-24 19:59:30,241 - [test_login.py - line:46] - INFO:测试编号3,测试用例标题:用户名为空,执行成功！
2022-02-24 19:59:30,324 - [test_login.py - line:46] - INFO:测试编号4,测试用例标题:密码错误,执行成功！
2022-02-24 19:59:30,405 - [test_login.py - line:46] - INFO:测试编号5,测试用例标题:密码为空,执行成功！
2022-02-24 19:59:30,491 - [test_regist.py - line:42] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-24 19:59:30,573 - [test_regist.py - line:42] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-24 19:59:30,659 - [test_regist.py - line:42] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-24 19:59:30,742 - [test_regist.py - line:37] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 19:59:30,743 - [test_regist.py - line:38] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 19:59:30,942 - [test_regist.py - line:42] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-24 19:59:31,023 - [test_regist.py - line:42] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-24 19:59:31,120 - [test_regist.py - line:42] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-24 19:59:31,205 - [test_regist.py - line:37] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 19:59:31,205 - [test_regist.py - line:38] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 19:59:31,289 - [test_regist.py - line:42] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-24 19:59:31,372 - [test_regist.py - line:42] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-24 19:59:31,495 - [test_regist.py - line:37] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 19:59:31,495 - [test_regist.py - line:38] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 19:59:31,581 - [test_regist.py - line:42] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-24 20:08:21,053 - [test_regist.py - line:42] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-24 20:08:21,135 - [test_regist.py - line:42] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-24 20:08:21,218 - [test_regist.py - line:42] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-24 20:08:21,304 - [test_regist.py - line:37] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 20:08:21,304 - [test_regist.py - line:38] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 20:08:21,499 - [test_regist.py - line:42] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-24 20:08:21,582 - [test_regist.py - line:42] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-24 20:08:21,666 - [test_regist.py - line:42] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-24 20:08:21,752 - [test_regist.py - line:37] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 20:08:21,753 - [test_regist.py - line:38] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 20:08:21,841 - [test_regist.py - line:42] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-24 20:08:21,924 - [test_regist.py - line:42] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-24 20:08:22,012 - [test_regist.py - line:37] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 20:08:22,012 - [test_regist.py - line:38] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 20:08:22,117 - [test_regist.py - line:42] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-24 20:17:14,859 - [test_regist.py - line:42] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-24 20:17:14,939 - [test_regist.py - line:42] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-24 20:17:15,019 - [test_regist.py - line:42] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-24 20:17:15,101 - [test_regist.py - line:37] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 20:17:15,101 - [test_regist.py - line:38] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 20:17:15,293 - [test_regist.py - line:42] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-24 20:17:15,375 - [test_regist.py - line:42] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-24 20:17:15,456 - [test_regist.py - line:42] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-24 20:17:15,538 - [test_regist.py - line:37] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 20:17:15,538 - [test_regist.py - line:38] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 20:17:15,623 - [test_regist.py - line:42] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-24 20:17:15,704 - [test_regist.py - line:42] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-24 20:17:15,788 - [test_regist.py - line:37] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 20:17:15,789 - [test_regist.py - line:38] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 20:17:15,891 - [test_regist.py - line:42] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-24 20:19:29,361 - [test_regist.py - line:42] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-24 20:19:29,445 - [test_regist.py - line:42] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-24 20:19:29,526 - [test_regist.py - line:42] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-24 20:19:29,607 - [test_regist.py - line:37] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 20:19:29,607 - [test_regist.py - line:38] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 20:19:29,801 - [test_regist.py - line:42] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-24 20:19:29,882 - [test_regist.py - line:42] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-24 20:19:29,962 - [test_regist.py - line:42] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-24 20:19:30,048 - [test_regist.py - line:37] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 20:19:30,048 - [test_regist.py - line:38] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 20:19:30,133 - [test_regist.py - line:42] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-24 20:19:30,215 - [test_regist.py - line:42] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-24 20:19:30,303 - [test_regist.py - line:37] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 20:19:30,304 - [test_regist.py - line:38] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 20:19:30,407 - [test_regist.py - line:42] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-24 20:29:38,283 - [test_login.py - line:50] - INFO:测试编号1,测试用例标题:登录成功,执行成功！
2022-02-24 20:29:38,365 - [test_login.py - line:50] - INFO:测试编号2,测试用例标题:用户名错误,执行成功！
2022-02-24 20:29:38,447 - [test_login.py - line:50] - INFO:测试编号3,测试用例标题:用户名为空,执行成功！
2022-02-24 20:29:38,528 - [test_login.py - line:50] - INFO:测试编号4,测试用例标题:密码错误,执行成功！
2022-02-24 20:29:38,609 - [test_login.py - line:50] - INFO:测试编号5,测试用例标题:密码为空,执行成功！
2022-02-24 20:29:38,695 - [test_regist.py - line:42] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-24 20:29:38,776 - [test_regist.py - line:42] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-24 20:29:38,856 - [test_regist.py - line:42] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-24 20:29:38,939 - [test_regist.py - line:37] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 20:29:38,939 - [test_regist.py - line:38] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 20:29:39,132 - [test_regist.py - line:42] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-24 20:29:39,215 - [test_regist.py - line:42] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-24 20:29:39,322 - [test_regist.py - line:42] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-24 20:29:39,406 - [test_regist.py - line:37] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 20:29:39,406 - [test_regist.py - line:38] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 20:29:39,491 - [test_regist.py - line:42] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-24 20:29:39,573 - [test_regist.py - line:42] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-24 20:29:39,657 - [test_regist.py - line:37] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 20:29:39,657 - [test_regist.py - line:38] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 20:29:39,744 - [test_regist.py - line:42] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-24 21:01:02,563 - [test_regist.py - line:42] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-24 21:01:02,646 - [test_regist.py - line:42] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-24 21:01:02,728 - [test_regist.py - line:42] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-24 21:01:02,817 - [test_regist.py - line:37] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 21:01:02,818 - [test_regist.py - line:38] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:01:02,901 - [test_regist.py - line:42] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-24 21:01:02,981 - [test_regist.py - line:42] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-24 21:01:03,062 - [test_regist.py - line:42] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-24 21:01:03,155 - [test_regist.py - line:37] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:01:03,155 - [test_regist.py - line:38] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 21:01:03,237 - [test_regist.py - line:42] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-24 21:01:03,318 - [test_regist.py - line:42] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-24 21:01:03,403 - [test_regist.py - line:37] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:01:03,404 - [test_regist.py - line:38] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:01:03,506 - [test_regist.py - line:42] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-24 21:02:47,459 - [test_login.py - line:51] - INFO:测试编号1,测试用例标题:登录成功,执行成功！
2022-02-24 21:02:47,541 - [test_login.py - line:51] - INFO:测试编号2,测试用例标题:用户名错误,执行成功！
2022-02-24 21:02:47,621 - [test_login.py - line:51] - INFO:测试编号3,测试用例标题:用户名为空,执行成功！
2022-02-24 21:02:47,701 - [test_login.py - line:51] - INFO:测试编号4,测试用例标题:密码错误,执行成功！
2022-02-24 21:02:47,780 - [test_login.py - line:51] - INFO:测试编号5,测试用例标题:密码为空,执行成功！
2022-02-24 21:02:47,866 - [test_regist.py - line:42] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-24 21:02:47,944 - [test_regist.py - line:42] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-24 21:02:48,025 - [test_regist.py - line:42] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-24 21:02:48,107 - [test_regist.py - line:37] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 21:02:48,107 - [test_regist.py - line:38] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:02:48,303 - [test_regist.py - line:42] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-24 21:02:48,386 - [test_regist.py - line:42] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-24 21:02:48,482 - [test_regist.py - line:42] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-24 21:02:48,565 - [test_regist.py - line:37] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:02:48,565 - [test_regist.py - line:38] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 21:02:48,651 - [test_regist.py - line:42] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-24 21:02:48,735 - [test_regist.py - line:42] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-24 21:02:48,817 - [test_regist.py - line:37] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:02:48,817 - [test_regist.py - line:38] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:02:48,903 - [test_regist.py - line:42] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-24 21:04:15,554 - [test_login.py - line:51] - INFO:测试编号1,测试用例标题:登录成功,执行成功！
2022-02-24 21:04:15,637 - [test_login.py - line:51] - INFO:测试编号2,测试用例标题:用户名错误,执行成功！
2022-02-24 21:04:15,717 - [test_login.py - line:51] - INFO:测试编号3,测试用例标题:用户名为空,执行成功！
2022-02-24 21:04:15,797 - [test_login.py - line:51] - INFO:测试编号4,测试用例标题:密码错误,执行成功！
2022-02-24 21:04:15,876 - [test_login.py - line:51] - INFO:测试编号5,测试用例标题:密码为空,执行成功！
2022-02-24 21:04:40,457 - [test_regist.py - line:42] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-24 21:04:40,537 - [test_regist.py - line:42] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-24 21:04:40,617 - [test_regist.py - line:42] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-24 21:04:40,697 - [test_regist.py - line:37] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 21:04:40,697 - [test_regist.py - line:38] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:04:40,890 - [test_regist.py - line:42] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-24 21:04:40,969 - [test_regist.py - line:42] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-24 21:04:41,057 - [test_regist.py - line:42] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-24 21:04:41,143 - [test_regist.py - line:37] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:04:41,143 - [test_regist.py - line:38] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 21:04:41,222 - [test_regist.py - line:42] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-24 21:04:41,302 - [test_regist.py - line:42] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-24 21:04:41,384 - [test_regist.py - line:37] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:04:41,384 - [test_regist.py - line:38] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:04:41,468 - [test_regist.py - line:42] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-24 21:05:22,271 - [test_login.py - line:50] - INFO:测试编号1,测试用例标题:登录成功,执行成功！
2022-02-24 21:05:22,352 - [test_login.py - line:50] - INFO:测试编号2,测试用例标题:用户名错误,执行成功！
2022-02-24 21:05:22,434 - [test_login.py - line:50] - INFO:测试编号3,测试用例标题:用户名为空,执行成功！
2022-02-24 21:05:22,514 - [test_login.py - line:50] - INFO:测试编号4,测试用例标题:密码错误,执行成功！
2022-02-24 21:05:22,593 - [test_login.py - line:50] - INFO:测试编号5,测试用例标题:密码为空,执行成功！
2022-02-24 21:05:22,679 - [test_regist.py - line:42] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-24 21:05:22,758 - [test_regist.py - line:42] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-24 21:05:22,837 - [test_regist.py - line:42] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-24 21:05:22,919 - [test_regist.py - line:37] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 21:05:22,919 - [test_regist.py - line:38] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:05:23,112 - [test_regist.py - line:42] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-24 21:05:23,193 - [test_regist.py - line:42] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-24 21:05:23,290 - [test_regist.py - line:42] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-24 21:05:23,372 - [test_regist.py - line:37] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:05:23,372 - [test_regist.py - line:38] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 21:05:23,454 - [test_regist.py - line:42] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-24 21:05:23,536 - [test_regist.py - line:42] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-24 21:05:23,619 - [test_regist.py - line:37] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:05:23,619 - [test_regist.py - line:38] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:05:23,706 - [test_regist.py - line:42] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-24 21:06:55,420 - [test_login.py - line:51] - INFO:测试编号1,测试用例标题:登录成功,执行成功！
2022-02-24 21:06:55,503 - [test_login.py - line:51] - INFO:测试编号2,测试用例标题:用户名错误,执行成功！
2022-02-24 21:06:55,582 - [test_login.py - line:51] - INFO:测试编号3,测试用例标题:用户名为空,执行成功！
2022-02-24 21:06:55,662 - [test_login.py - line:51] - INFO:测试编号4,测试用例标题:密码错误,执行成功！
2022-02-24 21:06:55,740 - [test_login.py - line:51] - INFO:测试编号5,测试用例标题:密码为空,执行成功！
2022-02-24 21:06:55,833 - [test_regist.py - line:42] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-24 21:06:55,912 - [test_regist.py - line:42] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-24 21:06:55,991 - [test_regist.py - line:42] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-24 21:06:56,072 - [test_regist.py - line:37] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 21:06:56,072 - [test_regist.py - line:38] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:06:56,262 - [test_regist.py - line:42] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-24 21:06:56,344 - [test_regist.py - line:42] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-24 21:06:56,438 - [test_regist.py - line:42] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-24 21:06:56,523 - [test_regist.py - line:37] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:06:56,523 - [test_regist.py - line:38] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 21:06:56,608 - [test_regist.py - line:42] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-24 21:06:56,687 - [test_regist.py - line:42] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-24 21:06:56,772 - [test_regist.py - line:37] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:06:56,772 - [test_regist.py - line:38] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:06:56,858 - [test_regist.py - line:42] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-24 21:08:43,781 - [test_login.py - line:50] - INFO:测试编号1,测试用例标题:登录成功,执行成功！
2022-02-24 21:08:43,864 - [test_login.py - line:50] - INFO:测试编号2,测试用例标题:用户名错误,执行成功！
2022-02-24 21:08:43,943 - [test_login.py - line:50] - INFO:测试编号3,测试用例标题:用户名为空,执行成功！
2022-02-24 21:08:44,024 - [test_login.py - line:50] - INFO:测试编号4,测试用例标题:密码错误,执行成功！
2022-02-24 21:08:44,103 - [test_login.py - line:50] - INFO:测试编号5,测试用例标题:密码为空,执行成功！
2022-02-24 21:08:44,188 - [test_regist.py - line:42] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-24 21:08:44,268 - [test_regist.py - line:42] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-24 21:08:44,350 - [test_regist.py - line:42] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-24 21:08:44,431 - [test_regist.py - line:37] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 21:08:44,431 - [test_regist.py - line:38] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:08:44,628 - [test_regist.py - line:42] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-24 21:08:44,709 - [test_regist.py - line:42] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-24 21:08:44,805 - [test_regist.py - line:42] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-24 21:08:44,887 - [test_regist.py - line:37] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:08:44,887 - [test_regist.py - line:38] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 21:08:44,972 - [test_regist.py - line:42] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-24 21:08:45,054 - [test_regist.py - line:42] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-24 21:08:45,138 - [test_regist.py - line:37] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:08:45,138 - [test_regist.py - line:38] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 34, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:08:45,222 - [test_regist.py - line:42] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-24 21:10:25,891 - [test_login.py - line:50] - INFO:测试编号1,测试用例标题:登录成功,执行成功！
2022-02-24 21:10:25,976 - [test_login.py - line:50] - INFO:测试编号2,测试用例标题:用户名错误,执行成功！
2022-02-24 21:10:26,056 - [test_login.py - line:50] - INFO:测试编号3,测试用例标题:用户名为空,执行成功！
2022-02-24 21:10:26,137 - [test_login.py - line:50] - INFO:测试编号4,测试用例标题:密码错误,执行成功！
2022-02-24 21:10:26,215 - [test_login.py - line:50] - INFO:测试编号5,测试用例标题:密码为空,执行成功！
2022-02-24 21:10:26,300 - [test_regist.py - line:47] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-24 21:10:26,382 - [test_regist.py - line:47] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-24 21:10:26,459 - [test_regist.py - line:47] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-24 21:10:26,544 - [test_regist.py - line:42] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-24 21:10:26,544 - [test_regist.py - line:43] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:10:26,747 - [test_regist.py - line:47] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-24 21:10:26,830 - [test_regist.py - line:47] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-24 21:10:26,925 - [test_regist.py - line:47] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-24 21:10:27,008 - [test_regist.py - line:42] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:10:27,008 - [test_regist.py - line:43] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-24 21:10:27,091 - [test_regist.py - line:47] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-24 21:10:27,173 - [test_regist.py - line:47] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-24 21:10:27,257 - [test_regist.py - line:42] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-24 21:10:27,257 - [test_regist.py - line:43] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-24 21:10:27,342 - [test_regist.py - line:47] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-28 16:42:44,612 - [test_login.py - line:50] - INFO:测试编号1,测试用例标题:登录成功,执行成功！
2022-02-28 16:42:44,695 - [test_login.py - line:50] - INFO:测试编号2,测试用例标题:用户名错误,执行成功！
2022-02-28 16:42:44,776 - [test_login.py - line:50] - INFO:测试编号3,测试用例标题:用户名为空,执行成功！
2022-02-28 16:42:44,856 - [test_login.py - line:50] - INFO:测试编号4,测试用例标题:密码错误,执行成功！
2022-02-28 16:42:44,934 - [test_login.py - line:50] - INFO:测试编号5,测试用例标题:密码为空,执行成功！
2022-02-28 16:42:45,022 - [test_regist.py - line:47] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-28 16:42:45,103 - [test_regist.py - line:47] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-28 16:42:45,185 - [test_regist.py - line:47] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-28 16:42:45,266 - [test_regist.py - line:42] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 16:42:45,266 - [test_regist.py - line:43] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 16:42:45,458 - [test_regist.py - line:47] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-28 16:42:45,571 - [test_regist.py - line:47] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-28 16:42:45,665 - [test_regist.py - line:47] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-28 16:42:45,749 - [test_regist.py - line:42] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 16:42:45,749 - [test_regist.py - line:43] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 16:42:45,834 - [test_regist.py - line:47] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-28 16:42:45,916 - [test_regist.py - line:47] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-28 16:42:45,998 - [test_regist.py - line:42] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 16:42:45,998 - [test_regist.py - line:43] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 16:42:46,085 - [test_regist.py - line:47] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-28 16:45:50,073 - [test_login.py - line:50] - INFO:测试编号1,测试用例标题:登录成功,执行成功！
2022-02-28 16:45:50,156 - [test_login.py - line:50] - INFO:测试编号2,测试用例标题:用户名错误,执行成功！
2022-02-28 16:45:50,238 - [test_login.py - line:50] - INFO:测试编号3,测试用例标题:用户名为空,执行成功！
2022-02-28 16:45:50,319 - [test_login.py - line:50] - INFO:测试编号4,测试用例标题:密码错误,执行成功！
2022-02-28 16:45:50,402 - [test_login.py - line:50] - INFO:测试编号5,测试用例标题:密码为空,执行成功！
2022-02-28 16:45:50,490 - [test_regist.py - line:47] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-28 16:45:50,574 - [test_regist.py - line:47] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-28 16:45:50,654 - [test_regist.py - line:47] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-28 16:45:50,735 - [test_regist.py - line:42] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 16:45:50,735 - [test_regist.py - line:43] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 16:45:50,935 - [test_regist.py - line:47] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-28 16:45:51,022 - [test_regist.py - line:47] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-28 16:45:51,115 - [test_regist.py - line:47] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-28 16:45:51,198 - [test_regist.py - line:42] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 16:45:51,199 - [test_regist.py - line:43] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 16:45:51,282 - [test_regist.py - line:47] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-28 16:45:51,364 - [test_regist.py - line:47] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-28 16:45:51,448 - [test_regist.py - line:42] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 16:45:51,448 - [test_regist.py - line:43] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 16:45:51,533 - [test_regist.py - line:47] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-28 16:46:40,196 - [test_login.py - line:50] - INFO:测试编号1,测试用例标题:登录成功,执行成功！
2022-02-28 16:46:40,280 - [test_login.py - line:50] - INFO:测试编号2,测试用例标题:用户名错误,执行成功！
2022-02-28 16:46:40,361 - [test_login.py - line:50] - INFO:测试编号3,测试用例标题:用户名为空,执行成功！
2022-02-28 16:46:40,442 - [test_login.py - line:50] - INFO:测试编号4,测试用例标题:密码错误,执行成功！
2022-02-28 16:46:40,525 - [test_login.py - line:50] - INFO:测试编号5,测试用例标题:密码为空,执行成功！
2022-02-28 16:46:40,618 - [test_regist.py - line:47] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-28 16:46:40,703 - [test_regist.py - line:47] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-28 16:46:40,781 - [test_regist.py - line:47] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-28 16:46:40,863 - [test_regist.py - line:42] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 16:46:40,863 - [test_regist.py - line:43] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 16:46:41,058 - [test_regist.py - line:47] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-28 16:46:41,141 - [test_regist.py - line:47] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-28 16:46:41,240 - [test_regist.py - line:47] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-28 16:46:41,323 - [test_regist.py - line:42] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 16:46:41,323 - [test_regist.py - line:43] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 16:46:41,407 - [test_regist.py - line:47] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-28 16:46:41,488 - [test_regist.py - line:47] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-28 16:46:41,572 - [test_regist.py - line:42] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 16:46:41,572 - [test_regist.py - line:43] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 16:46:41,660 - [test_regist.py - line:47] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-28 16:50:20,979 - [test_login.py - line:50] - INFO:测试编号1,测试用例标题:登录成功,执行成功！
2022-02-28 16:50:21,063 - [test_login.py - line:50] - INFO:测试编号2,测试用例标题:用户名错误,执行成功！
2022-02-28 16:50:21,145 - [test_login.py - line:50] - INFO:测试编号3,测试用例标题:用户名为空,执行成功！
2022-02-28 16:50:21,227 - [test_login.py - line:50] - INFO:测试编号4,测试用例标题:密码错误,执行成功！
2022-02-28 16:50:21,308 - [test_login.py - line:50] - INFO:测试编号5,测试用例标题:密码为空,执行成功！
2022-02-28 16:50:21,396 - [test_regist.py - line:47] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-28 16:50:21,476 - [test_regist.py - line:47] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-28 16:50:21,557 - [test_regist.py - line:47] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-28 16:50:21,641 - [test_regist.py - line:42] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 16:50:21,641 - [test_regist.py - line:43] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 16:50:21,838 - [test_regist.py - line:47] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-28 16:50:21,922 - [test_regist.py - line:47] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-28 16:50:22,020 - [test_regist.py - line:47] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-28 16:50:22,102 - [test_regist.py - line:42] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 16:50:22,102 - [test_regist.py - line:43] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 16:50:22,188 - [test_regist.py - line:47] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-28 16:50:22,269 - [test_regist.py - line:47] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-28 16:50:22,354 - [test_regist.py - line:42] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 16:50:22,354 - [test_regist.py - line:43] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 16:50:22,442 - [test_regist.py - line:47] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-28 16:50:54,198 - [test_login.py - line:50] - INFO:测试编号1,测试用例标题:登录成功,执行成功！
2022-02-28 16:50:54,284 - [test_login.py - line:50] - INFO:测试编号2,测试用例标题:用户名错误,执行成功！
2022-02-28 16:50:54,369 - [test_login.py - line:50] - INFO:测试编号3,测试用例标题:用户名为空,执行成功！
2022-02-28 16:50:54,454 - [test_login.py - line:50] - INFO:测试编号4,测试用例标题:密码错误,执行成功！
2022-02-28 16:50:54,538 - [test_login.py - line:50] - INFO:测试编号5,测试用例标题:密码为空,执行成功！
2022-02-28 16:50:54,632 - [test_regist.py - line:47] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-28 16:50:54,728 - [test_regist.py - line:47] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-28 16:50:54,811 - [test_regist.py - line:47] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-28 16:50:54,901 - [test_regist.py - line:42] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 16:50:54,901 - [test_regist.py - line:43] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 16:50:55,102 - [test_regist.py - line:47] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-28 16:50:55,193 - [test_regist.py - line:47] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-28 16:50:55,294 - [test_regist.py - line:47] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-28 16:50:55,378 - [test_regist.py - line:42] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 16:50:55,378 - [test_regist.py - line:43] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 16:50:55,469 - [test_regist.py - line:47] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-28 16:50:55,561 - [test_regist.py - line:47] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-28 16:50:55,656 - [test_regist.py - line:42] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 16:50:55,656 - [test_regist.py - line:43] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 39, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 16:50:55,746 - [test_regist.py - line:47] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-28 17:00:59,767 - [test_login.py - line:52] - INFO:测试编号1,测试用例标题:登录成功,执行成功！
2022-02-28 17:00:59,849 - [test_login.py - line:52] - INFO:测试编号2,测试用例标题:用户名错误,执行成功！
2022-02-28 17:00:59,929 - [test_login.py - line:52] - INFO:测试编号3,测试用例标题:用户名为空,执行成功！
2022-02-28 17:01:00,012 - [test_login.py - line:52] - INFO:测试编号4,测试用例标题:密码错误,执行成功！
2022-02-28 17:01:00,102 - [test_login.py - line:52] - INFO:测试编号5,测试用例标题:密码为空,执行成功！
2022-02-28 17:01:00,206 - [test_regist.py - line:48] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-28 17:01:00,298 - [test_regist.py - line:48] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-28 17:01:00,384 - [test_regist.py - line:48] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-28 17:01:00,468 - [test_regist.py - line:43] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 17:01:00,468 - [test_regist.py - line:44] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:01:00,670 - [test_regist.py - line:48] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-28 17:01:00,751 - [test_regist.py - line:48] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-28 17:01:00,846 - [test_regist.py - line:48] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-28 17:01:00,929 - [test_regist.py - line:43] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:01:00,929 - [test_regist.py - line:44] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 17:01:01,018 - [test_regist.py - line:48] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-28 17:01:01,097 - [test_regist.py - line:48] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-28 17:01:01,182 - [test_regist.py - line:43] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:01:01,182 - [test_regist.py - line:44] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:01:01,273 - [test_regist.py - line:48] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-28 17:04:55,049 - [test_regist.py - line:48] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-28 17:04:55,130 - [test_regist.py - line:48] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-28 17:04:55,213 - [test_regist.py - line:48] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-28 17:04:55,297 - [test_regist.py - line:43] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 17:04:55,297 - [test_regist.py - line:44] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:04:55,381 - [test_regist.py - line:48] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-28 17:04:55,462 - [test_regist.py - line:48] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-28 17:04:55,546 - [test_regist.py - line:48] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-28 17:04:55,633 - [test_regist.py - line:43] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:04:55,633 - [test_regist.py - line:44] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 17:04:55,719 - [test_regist.py - line:48] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-28 17:04:55,814 - [test_regist.py - line:48] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-28 17:04:55,898 - [test_regist.py - line:43] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:04:55,898 - [test_regist.py - line:44] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:04:56,000 - [test_regist.py - line:48] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-28 17:05:49,437 - [test_login.py - line:54] - INFO:测试编号1,测试用例标题:登录成功,执行成功！
2022-02-28 17:05:49,533 - [test_login.py - line:54] - INFO:测试编号2,测试用例标题:用户名错误,执行成功！
2022-02-28 17:05:49,616 - [test_login.py - line:54] - INFO:测试编号3,测试用例标题:用户名为空,执行成功！
2022-02-28 17:05:49,701 - [test_login.py - line:54] - INFO:测试编号4,测试用例标题:密码错误,执行成功！
2022-02-28 17:05:49,782 - [test_login.py - line:54] - INFO:测试编号5,测试用例标题:密码为空,执行成功！
2022-02-28 17:05:50,059 - [test_regist.py - line:48] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-28 17:05:50,148 - [test_regist.py - line:48] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-28 17:05:50,236 - [test_regist.py - line:48] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-28 17:05:50,385 - [test_regist.py - line:43] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 17:05:50,385 - [test_regist.py - line:44] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:05:50,589 - [test_regist.py - line:48] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-28 17:05:50,691 - [test_regist.py - line:48] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-28 17:05:50,791 - [test_regist.py - line:48] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-28 17:05:50,874 - [test_regist.py - line:43] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:05:50,874 - [test_regist.py - line:44] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 17:05:50,960 - [test_regist.py - line:48] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-28 17:05:51,058 - [test_regist.py - line:48] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-28 17:05:51,144 - [test_regist.py - line:43] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:05:51,144 - [test_regist.py - line:44] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:05:51,231 - [test_regist.py - line:48] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-28 17:08:48,433 - [test_regist.py - line:48] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-28 17:08:48,524 - [test_regist.py - line:48] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-28 17:08:48,606 - [test_regist.py - line:48] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-28 17:08:48,702 - [test_regist.py - line:43] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 17:08:48,702 - [test_regist.py - line:44] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:08:48,791 - [test_regist.py - line:48] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-28 17:08:48,875 - [test_regist.py - line:48] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-28 17:08:48,960 - [test_regist.py - line:48] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-28 17:08:49,055 - [test_regist.py - line:43] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:08:49,055 - [test_regist.py - line:44] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 17:08:49,144 - [test_regist.py - line:48] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-28 17:08:49,224 - [test_regist.py - line:48] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-28 17:08:49,311 - [test_regist.py - line:43] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:08:49,311 - [test_regist.py - line:44] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:08:49,413 - [test_regist.py - line:48] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-28 17:09:43,354 - [test_regist.py - line:48] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-28 17:09:43,445 - [test_regist.py - line:48] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-28 17:09:43,527 - [test_regist.py - line:48] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-28 17:09:43,609 - [test_regist.py - line:43] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 17:09:43,609 - [test_regist.py - line:44] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:09:43,693 - [test_regist.py - line:48] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-28 17:09:43,796 - [test_regist.py - line:48] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-28 17:09:43,875 - [test_regist.py - line:48] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-28 17:09:43,962 - [test_regist.py - line:43] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:09:43,962 - [test_regist.py - line:44] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 17:09:44,046 - [test_regist.py - line:48] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-28 17:09:44,127 - [test_regist.py - line:48] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-28 17:09:44,214 - [test_regist.py - line:43] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:09:44,214 - [test_regist.py - line:44] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:09:44,301 - [test_regist.py - line:48] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-28 17:13:53,908 - [test_login.py - line:55] - INFO:测试编号1,测试用例标题:登录成功,执行成功！
2022-02-28 17:13:53,992 - [test_login.py - line:55] - INFO:测试编号2,测试用例标题:用户名错误,执行成功！
2022-02-28 17:13:54,075 - [test_login.py - line:55] - INFO:测试编号3,测试用例标题:用户名为空,执行成功！
2022-02-28 17:13:54,157 - [test_login.py - line:55] - INFO:测试编号4,测试用例标题:密码错误,执行成功！
2022-02-28 17:13:54,238 - [test_login.py - line:55] - INFO:测试编号5,测试用例标题:密码为空,执行成功！
2022-02-28 17:13:54,325 - [test_regist.py - line:48] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-28 17:13:54,407 - [test_regist.py - line:48] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-28 17:13:54,488 - [test_regist.py - line:48] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-28 17:13:54,570 - [test_regist.py - line:43] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 17:13:54,570 - [test_regist.py - line:44] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:13:54,777 - [test_regist.py - line:48] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-28 17:13:54,870 - [test_regist.py - line:48] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-28 17:13:54,966 - [test_regist.py - line:48] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-28 17:13:55,056 - [test_regist.py - line:43] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:13:55,056 - [test_regist.py - line:44] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 17:13:55,146 - [test_regist.py - line:48] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-28 17:13:55,227 - [test_regist.py - line:48] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-28 17:13:55,311 - [test_regist.py - line:43] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:13:55,312 - [test_regist.py - line:44] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 40, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:13:55,414 - [test_regist.py - line:48] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-28 17:16:21,713 - [test_login.py - line:55] - INFO:测试编号1,测试用例标题:登录成功,执行成功！
2022-02-28 17:16:21,799 - [test_login.py - line:55] - INFO:测试编号2,测试用例标题:用户名错误,执行成功！
2022-02-28 17:16:21,884 - [test_login.py - line:55] - INFO:测试编号3,测试用例标题:用户名为空,执行成功！
2022-02-28 17:16:21,974 - [test_login.py - line:55] - INFO:测试编号4,测试用例标题:密码错误,执行成功！
2022-02-28 17:16:22,056 - [test_login.py - line:55] - INFO:测试编号5,测试用例标题:密码为空,执行成功！
2022-02-28 17:16:22,144 - [test_regist.py - line:51] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-28 17:16:22,226 - [test_regist.py - line:51] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-28 17:16:22,308 - [test_regist.py - line:51] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-28 17:16:22,393 - [test_regist.py - line:46] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 17:16:22,393 - [test_regist.py - line:47] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 43, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:16:22,598 - [test_regist.py - line:51] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-28 17:16:22,695 - [test_regist.py - line:51] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-28 17:16:22,802 - [test_regist.py - line:51] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-28 17:16:22,891 - [test_regist.py - line:46] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:16:22,892 - [test_regist.py - line:47] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 43, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 17:16:22,981 - [test_regist.py - line:51] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-28 17:16:23,068 - [test_regist.py - line:51] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-28 17:16:23,159 - [test_regist.py - line:46] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:16:23,159 - [test_regist.py - line:47] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 43, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:16:23,249 - [test_regist.py - line:51] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-28 17:19:24,857 - [test_login.py - line:56] - INFO:测试编号1,测试用例标题:登录成功,执行成功！
2022-02-28 17:19:24,941 - [test_login.py - line:56] - INFO:测试编号2,测试用例标题:用户名错误,执行成功！
2022-02-28 17:19:25,021 - [test_login.py - line:56] - INFO:测试编号3,测试用例标题:用户名为空,执行成功！
2022-02-28 17:19:25,107 - [test_login.py - line:56] - INFO:测试编号4,测试用例标题:密码错误,执行成功！
2022-02-28 17:19:25,187 - [test_login.py - line:56] - INFO:测试编号5,测试用例标题:密码为空,执行成功！
2022-02-28 17:19:25,276 - [test_regist.py - line:51] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-28 17:19:25,358 - [test_regist.py - line:51] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-28 17:19:25,445 - [test_regist.py - line:51] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-28 17:19:25,529 - [test_regist.py - line:46] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 17:19:25,529 - [test_regist.py - line:47] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 43, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:19:25,723 - [test_regist.py - line:51] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-28 17:19:25,809 - [test_regist.py - line:51] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-28 17:19:25,918 - [test_regist.py - line:51] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-28 17:19:26,004 - [test_regist.py - line:46] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:19:26,004 - [test_regist.py - line:47] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 43, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 17:19:26,091 - [test_regist.py - line:51] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-28 17:19:26,175 - [test_regist.py - line:51] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-28 17:19:26,266 - [test_regist.py - line:46] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 17:19:26,266 - [test_regist.py - line:47] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 43, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 17:19:26,359 - [test_regist.py - line:51] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-02-28 18:52:19,719 - [test_regist.py - line:51] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-02-28 18:52:19,798 - [test_regist.py - line:51] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-02-28 18:52:19,877 - [test_regist.py - line:51] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-02-28 18:52:19,957 - [test_regist.py - line:46] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-02-28 18:52:19,958 - [test_regist.py - line:47] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 43, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  {'code': 1003} != {'code': 1004}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 18:52:20,151 - [test_regist.py - line:51] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-02-28 18:52:20,229 - [test_regist.py - line:51] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-02-28 18:52:20,306 - [test_regist.py - line:51] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-02-28 18:52:20,387 - [test_regist.py - line:46] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 18:52:20,387 - [test_regist.py - line:47] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 43, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  {'code': 1007} != {'code': 1009}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-02-28 18:52:20,468 - [test_regist.py - line:51] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-02-28 18:52:20,547 - [test_regist.py - line:51] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-02-28 18:52:20,630 - [test_regist.py - line:46] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-02-28 18:52:20,631 - [test_regist.py - line:47] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 43, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-02-28 18:52:20,729 - [test_regist.py - line:51] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
2022-03-01 16:29:40,487 - [test_login01.py - line:40] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-01 16:32:53,686 - [test_login02.py - line:58] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-01 16:35:39,836 - [test_login03.py - line:60] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-01 16:35:39,935 - [test_login03.py - line:60] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2022-03-01 16:35:40,025 - [test_login03.py - line:60] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2022-03-01 16:35:40,111 - [test_login03.py - line:55] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1Mzc0MC4wMzI3Mjg3OmU3NTFiMzdhM2RmYzNlNDU2ZDU0NTYzMzU2ODk0ODllNTlmMDIxZjQ='}
2022-03-01 16:35:40,112 - [test_login03.py - line:56] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NTlmMDIxZjQ='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1Mzc0MC4wMzI3Mjg3OmU3NTFiMzdhM2RmYzNlNDU2ZDU0NTYzMzU2ODk0ODllNTlmMDIxZjQ='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 52, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NTlmMDIxZjQ='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1Mzc0MC4wMzI3Mjg3OmU3NTFiMzdhM2RmYzNlNDU2ZDU0NTYzMzU2ODk0ODllNTlmMDIxZjQ='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 16:35:40,309 - [test_login03.py - line:60] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2022-03-01 16:35:40,394 - [test_login03.py - line:55] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1Mzc0MC4zMTU5NzQ6MTU2NTk1MWVhODgzOWViMDc5Y2Q1NmQ3NGRkMmExYTk3NWVmYmJmOA=='}
2022-03-01 16:35:40,394 - [test_login03.py - line:56] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NWVmYmJmOA=='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1Mzc0MC4zMTU5NzQ6MTU2NTk1MWVhODgzOWViMDc5Y2Q1NmQ3NGRkMmExYTk3NWVmYmJmOA=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 52, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NWVmYmJmOA=='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1Mzc0MC4zMTU5NzQ6MTU2NTk1MWVhODgzOWViMDc5Y2Q1NmQ3NGRkMmExYTk3NWVmYmJmOA=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 16:35:40,497 - [test_login03.py - line:60] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2022-03-01 16:35:40,598 - [test_login03.py - line:60] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2022-03-01 16:35:40,683 - [test_login03.py - line:60] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2022-03-01 16:35:40,768 - [test_login03.py - line:60] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2022-03-01 16:35:40,859 - [test_login03.py - line:60] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2022-03-01 16:39:47,182 - [test_login03.py - line:60] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-01 16:39:47,270 - [test_login03.py - line:60] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2022-03-01 16:39:47,366 - [test_login03.py - line:60] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2022-03-01 16:39:47,452 - [test_login03.py - line:55] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1Mzk4Ny4zNzMwNTk1Ojg0Zjc4ODBkM2E0ODI5YjA1NTgzZTk4ZGQwZmZiYjdkYmM4NGYwYWU='}
2022-03-01 16:39:47,452 - [test_login03.py - line:56] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YmM4NGYwYWU='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1Mzk4Ny4zNzMwNTk1Ojg0Zjc4ODBkM2E0ODI5YjA1NTgzZTk4ZGQwZmZiYjdkYmM4NGYwYWU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 52, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YmM4NGYwYWU='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1Mzk4Ny4zNzMwNTk1Ojg0Zjc4ODBkM2E0ODI5YjA1NTgzZTk4ZGQwZmZiYjdkYmM4NGYwYWU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 16:39:47,728 - [test_login03.py - line:60] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2022-03-01 16:39:47,814 - [test_login03.py - line:55] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1Mzk4Ny43MzUwOTE6MzU3OGQ0ZWE2MzNhMmVmYTdjNjg3MjcxODdjYmY1ZTVlMzhhYTQ1MA=='}
2022-03-01 16:39:47,814 - [test_login03.py - line:56] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MzhhYTQ1MA=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1Mzk4Ny43MzUwOTE6MzU3OGQ0ZWE2MzNhMmVmYTdjNjg3MjcxODdjYmY1ZTVlMzhhYTQ1MA=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 52, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MzhhYTQ1MA=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1Mzk4Ny43MzUwOTE6MzU3OGQ0ZWE2MzNhMmVmYTdjNjg3MjcxODdjYmY1ZTVlMzhhYTQ1MA=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 16:39:47,916 - [test_login03.py - line:60] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2022-03-01 16:39:48,011 - [test_login03.py - line:60] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2022-03-01 16:39:48,103 - [test_login03.py - line:60] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2022-03-01 16:39:48,185 - [test_login03.py - line:60] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2022-03-01 16:39:48,270 - [test_login03.py - line:60] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2022-03-01 16:40:22,885 - [test_login03.py - line:60] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-01 16:40:22,969 - [test_login03.py - line:60] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2022-03-01 16:40:23,054 - [test_login03.py - line:60] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2022-03-01 16:40:23,147 - [test_login03.py - line:55] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NDAyMy4wNjY1NzE1OmZkZjU3MDBkMDIzY2JiZDkyY2FlZmQ3NTMwYWM3MWZkMTBlOTQzMzQ='}
2022-03-01 16:40:23,147 - [test_login03.py - line:56] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MTBlOTQzMzQ='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NDAyMy4wNjY1NzE1OmZkZjU3MDBkMDIzY2JiZDkyY2FlZmQ3NTMwYWM3MWZkMTBlOTQzMzQ='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 52, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MTBlOTQzMzQ='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NDAyMy4wNjY1NzE1OmZkZjU3MDBkMDIzY2JiZDkyY2FlZmQ3NTMwYWM3MWZkMTBlOTQzMzQ='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 16:40:23,242 - [test_login03.py - line:60] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2022-03-01 16:40:23,331 - [test_login03.py - line:55] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NDAyMy4yNTAwODo1N2Q4ZmQ2Y2Q2ZTgwNzA0ZGRjYWYwMGZiNDlmN2NlZTcwZWY1Mjdi'}
2022-03-01 16:40:23,331 - [test_login03.py - line:56] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTcwZWY1Mjdi'}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NDAyMy4yNTAwODo1N2Q4ZmQ2Y2Q2ZTgwNzA0ZGRjYWYwMGZiNDlmN2NlZTcwZWY1Mjdi'}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 52, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTcwZWY1Mjdi'}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NDAyMy4yNTAwODo1N2Q4ZmQ2Y2Q2ZTgwNzA0ZGRjYWYwMGZiNDlmN2NlZTcwZWY1Mjdi'}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 16:40:23,422 - [test_login03.py - line:60] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2022-03-01 16:40:23,518 - [test_login03.py - line:60] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2022-03-01 16:40:23,605 - [test_login03.py - line:60] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2022-03-01 16:40:23,699 - [test_login03.py - line:60] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2022-03-01 16:40:23,794 - [test_login03.py - line:60] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2022-03-01 16:49:31,369 - [test_login03.py - line:69] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-01 16:49:31,456 - [test_login03.py - line:69] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2022-03-01 16:49:31,548 - [test_login03.py - line:69] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2022-03-01 16:49:31,637 - [test_login03.py - line:64] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NDU3MS41NTU2NjcyOjdmMWI5Y2Y1YjRiZDg4MmM1MjEyYjkwYmM4NWFmYzJkODYxNTJiODE='}
2022-03-01 16:49:31,637 - [test_login03.py - line:65] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ODYxNTJiODE='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NDU3MS41NTU2NjcyOjdmMWI5Y2Y1YjRiZDg4MmM1MjEyYjkwYmM4NWFmYzJkODYxNTJiODE='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 61, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ODYxNTJiODE='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NDU3MS41NTU2NjcyOjdmMWI5Y2Y1YjRiZDg4MmM1MjEyYjkwYmM4NWFmYzJkODYxNTJiODE='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 16:49:31,735 - [test_login03.py - line:69] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2022-03-01 16:49:31,821 - [test_login03.py - line:64] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NDU3MS43NDIxNjc3OjliN2MxN2U3MDFkYTczNjRkMjc1MTA4MGViODQ4N2I1NDVmNGQxZDU='}
2022-03-01 16:49:31,821 - [test_login03.py - line:65] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NDVmNGQxZDU='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NDU3MS43NDIxNjc3OjliN2MxN2U3MDFkYTczNjRkMjc1MTA4MGViODQ4N2I1NDVmNGQxZDU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 61, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NDVmNGQxZDU='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NDU3MS43NDIxNjc3OjliN2MxN2U3MDFkYTczNjRkMjc1MTA4MGViODQ4N2I1NDVmNGQxZDU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 16:49:31,912 - [test_login03.py - line:69] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2022-03-01 16:49:32,003 - [test_login03.py - line:69] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2022-03-01 16:49:32,094 - [test_login03.py - line:69] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2022-03-01 16:49:32,176 - [test_login03.py - line:69] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2022-03-01 16:49:32,258 - [test_login03.py - line:69] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2022-03-01 16:51:00,350 - [test_login03.py - line:69] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-01 16:51:00,440 - [test_login03.py - line:69] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2022-03-01 16:51:00,532 - [test_login03.py - line:69] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2022-03-01 16:51:00,620 - [test_login03.py - line:64] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NDY2MC41NDI2MDU0OmEzODVmNzUwZDYzNjU3ODRhMDZkNmI2NTdiNDIyZGRmZGM1YzkxODA='}
2022-03-01 16:51:00,620 - [test_login03.py - line:65] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZGM1YzkxODA='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NDY2MC41NDI2MDU0OmEzODVmNzUwZDYzNjU3ODRhMDZkNmI2NTdiNDIyZGRmZGM1YzkxODA='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 61, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZGM1YzkxODA='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NDY2MC41NDI2MDU0OmEzODVmNzUwZDYzNjU3ODRhMDZkNmI2NTdiNDIyZGRmZGM1YzkxODA='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 16:51:00,842 - [test_login03.py - line:69] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2022-03-01 16:51:00,931 - [test_login03.py - line:64] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NDY2MC44NTM3NzM6ODEwOWE4MzUxNTRhZWZmNDNmMjBkN2FiNTNlM2ZhYTc5NTFmMzUyNQ=='}
2022-03-01 16:51:00,931 - [test_login03.py - line:65] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NTFmMzUyNQ=='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NDY2MC44NTM3NzM6ODEwOWE4MzUxNTRhZWZmNDNmMjBkN2FiNTNlM2ZhYTc5NTFmMzUyNQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 61, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NTFmMzUyNQ=='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NDY2MC44NTM3NzM6ODEwOWE4MzUxNTRhZWZmNDNmMjBkN2FiNTNlM2ZhYTc5NTFmMzUyNQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 16:51:01,031 - [test_login03.py - line:69] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2022-03-01 16:51:01,120 - [test_login03.py - line:69] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2022-03-01 16:51:01,205 - [test_login03.py - line:69] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2022-03-01 16:51:01,414 - [test_login03.py - line:69] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2022-03-01 16:51:01,530 - [test_login03.py - line:69] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2022-03-01 17:06:42,495 - [test_login04.py - line:65] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-01 17:06:42,661 - [test_login04.py - line:65] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2022-03-01 17:06:42,767 - [test_login04.py - line:65] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2022-03-01 17:06:42,871 - [test_login04.py - line:60] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTYwMi43Nzc2ODQ1OjdjZjZjNzZjNzlhZmUzYTE1NjE4N2ZiZTEyMWY5YjRjNWQxM2ZjYzY='}
2022-03-01 17:06:42,871 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NWQxM2ZjYzY='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTYwMi43Nzc2ODQ1OjdjZjZjNzZjNzlhZmUzYTE1NjE4N2ZiZTEyMWY5YjRjNWQxM2ZjYzY='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NWQxM2ZjYzY='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTYwMi43Nzc2ODQ1OjdjZjZjNzZjNzlhZmUzYTE1NjE4N2ZiZTEyMWY5YjRjNWQxM2ZjYzY='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:06:42,963 - [test_login04.py - line:65] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2022-03-01 17:06:43,052 - [test_login04.py - line:60] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTYwMi45NzAxNjk6NThiNDRjOGU3MmMyNGJlMWUzYzI5MzUxMDliYzFiNjBiYjRhNzdhZQ=='}
2022-03-01 17:06:43,052 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YjRhNzdhZQ=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTYwMi45NzAxNjk6NThiNDRjOGU3MmMyNGJlMWUzYzI5MzUxMDliYzFiNjBiYjRhNzdhZQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YjRhNzdhZQ=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTYwMi45NzAxNjk6NThiNDRjOGU3MmMyNGJlMWUzYzI5MzUxMDliYzFiNjBiYjRhNzdhZQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:06:43,140 - [test_login04.py - line:65] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2022-03-01 17:06:43,241 - [test_login04.py - line:65] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2022-03-01 17:06:43,332 - [test_login04.py - line:65] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2022-03-01 17:06:43,422 - [test_login04.py - line:65] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2022-03-01 17:06:43,514 - [test_login04.py - line:65] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2022-03-01 17:07:01,126 - [test_login04.py - line:65] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-01 17:07:01,222 - [test_login04.py - line:65] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2022-03-01 17:07:01,332 - [test_login04.py - line:65] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2022-03-01 17:07:01,432 - [test_login04.py - line:60] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTYyMS4zNDUwMTI6MDY1YmJhNzhlMDM1N2YzMThkMzliODJiNTZjMWY3NzdlN2ZmZmI2MQ=='}
2022-03-01 17:07:01,433 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...N2ZmZmI2MQ=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTYyMS4zNDUwMTI6MDY1YmJhNzhlMDM1N2YzMThkMzliODJiNTZjMWY3NzdlN2ZmZmI2MQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...N2ZmZmI2MQ=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTYyMS4zNDUwMTI6MDY1YmJhNzhlMDM1N2YzMThkMzliODJiNTZjMWY3NzdlN2ZmZmI2MQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:07:01,645 - [test_login04.py - line:65] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2022-03-01 17:07:01,732 - [test_login04.py - line:60] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTYyMS42NTYxNzk0OmM5YmIzM2VhYzc0YjA1ODVhNWViMmY4MmM4ZmViZjg2MTg5ZWM1ZTg='}
2022-03-01 17:07:01,732 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MTg5ZWM1ZTg='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTYyMS42NTYxNzk0OmM5YmIzM2VhYzc0YjA1ODVhNWViMmY4MmM4ZmViZjg2MTg5ZWM1ZTg='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MTg5ZWM1ZTg='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTYyMS42NTYxNzk0OmM5YmIzM2VhYzc0YjA1ODVhNWViMmY4MmM4ZmViZjg2MTg5ZWM1ZTg='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:07:01,823 - [test_login04.py - line:65] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2022-03-01 17:07:01,916 - [test_login04.py - line:65] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2022-03-01 17:07:02,002 - [test_login04.py - line:65] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2022-03-01 17:07:02,091 - [test_login04.py - line:65] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2022-03-01 17:07:02,183 - [test_login04.py - line:65] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2022-03-01 17:08:57,007 - [test_login04.py - line:65] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-01 17:08:57,102 - [test_login04.py - line:65] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2022-03-01 17:08:57,196 - [test_login04.py - line:65] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2022-03-01 17:08:57,290 - [test_login04.py - line:60] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTczNy4yMDg2NTI3OmRjZTQzMTIxZjFhNGZlOGRiZDIxY2Y2OWNiMGRiNzE4YWNmNDBjNmI='}
2022-03-01 17:08:57,290 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YWNmNDBjNmI='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTczNy4yMDg2NTI3OmRjZTQzMTIxZjFhNGZlOGRiZDIxY2Y2OWNiMGRiNzE4YWNmNDBjNmI='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YWNmNDBjNmI='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTczNy4yMDg2NTI3OmRjZTQzMTIxZjFhNGZlOGRiZDIxY2Y2OWNiMGRiNzE4YWNmNDBjNmI='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:08:57,561 - [test_login04.py - line:65] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2022-03-01 17:08:57,654 - [test_login04.py - line:60] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTczNy41NzI2ODpjOWJjMDNhMGRjMzNmY2ZjMzk5ZDlkMWQ1NGEyM2UwZjJmYzkzMjg1'}
2022-03-01 17:08:57,654 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZjJmYzkzMjg1'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTczNy41NzI2ODpjOWJjMDNhMGRjMzNmY2ZjMzk5ZDlkMWQ1NGEyM2UwZjJmYzkzMjg1'}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZjJmYzkzMjg1'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTczNy41NzI2ODpjOWJjMDNhMGRjMzNmY2ZjMzk5ZDlkMWQ1NGEyM2UwZjJmYzkzMjg1'}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:08:57,755 - [test_login04.py - line:65] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2022-03-01 17:08:57,850 - [test_login04.py - line:65] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2022-03-01 17:08:57,945 - [test_login04.py - line:65] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2022-03-01 17:08:58,042 - [test_login04.py - line:65] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2022-03-01 17:08:58,134 - [test_login04.py - line:65] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2022-03-01 17:11:06,351 - [test_login04.py - line:65] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-01 17:11:06,470 - [test_login04.py - line:65] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2022-03-01 17:11:06,580 - [test_login04.py - line:65] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2022-03-01 17:11:06,701 - [test_login04.py - line:60] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTg2Ni41OTQ3MDEzOjY0ODdmZjVmZmJiZDU2ZmMxNGFjNDI4OGQ1ZDY4NDkzOTQzMjVhZDU='}
2022-03-01 17:11:06,702 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...OTQzMjVhZDU='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTg2Ni41OTQ3MDEzOjY0ODdmZjVmZmJiZDU2ZmMxNGFjNDI4OGQ1ZDY4NDkzOTQzMjVhZDU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...OTQzMjVhZDU='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTg2Ni41OTQ3MDEzOjY0ODdmZjVmZmJiZDU2ZmMxNGFjNDI4OGQ1ZDY4NDkzOTQzMjVhZDU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:11:06,962 - [test_login04.py - line:65] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2022-03-01 17:11:07,054 - [test_login04.py - line:60] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTg2Ni45NzQ2ODU6OTNjZjYyNTFjMDFiNGMwYzMxMWUzYjk3ODM3M2U3ZmVhMzk0ODYzNQ=='}
2022-03-01 17:11:07,054 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...Mzk0ODYzNQ=='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTg2Ni45NzQ2ODU6OTNjZjYyNTFjMDFiNGMwYzMxMWUzYjk3ODM3M2U3ZmVhMzk0ODYzNQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...Mzk0ODYzNQ=='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTg2Ni45NzQ2ODU6OTNjZjYyNTFjMDFiNGMwYzMxMWUzYjk3ODM3M2U3ZmVhMzk0ODYzNQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:11:07,157 - [test_login04.py - line:65] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2022-03-01 17:11:07,258 - [test_login04.py - line:65] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2022-03-01 17:11:07,352 - [test_login04.py - line:65] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2022-03-01 17:11:07,449 - [test_login04.py - line:65] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2022-03-01 17:11:07,548 - [test_login04.py - line:65] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2022-03-01 17:11:29,164 - [test_login04.py - line:65] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-01 17:11:29,256 - [test_login04.py - line:65] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2022-03-01 17:11:29,355 - [test_login04.py - line:65] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2022-03-01 17:11:29,454 - [test_login04.py - line:60] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTg4OS4zNzA3NzAyOmI1MWEwYmRjMjgwZWQzOWM0YjU4MzEyZGMwZjJiMjhlNGZmMWU3ZDk='}
2022-03-01 17:11:29,454 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NGZmMWU3ZDk='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTg4OS4zNzA3NzAyOmI1MWEwYmRjMjgwZWQzOWM0YjU4MzEyZGMwZjJiMjhlNGZmMWU3ZDk='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NGZmMWU3ZDk='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTg4OS4zNzA3NzAyOmI1MWEwYmRjMjgwZWQzOWM0YjU4MzEyZGMwZjJiMjhlNGZmMWU3ZDk='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:11:29,730 - [test_login04.py - line:65] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2022-03-01 17:11:29,818 - [test_login04.py - line:60] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTg4OS43NDE3NzcyOmNkZjZmOWIwMDQyNzI4YTJiN2EwNjIwYTNlYTEyMTExYTMxYWJkYmM='}
2022-03-01 17:11:29,818 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YTMxYWJkYmM='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTg4OS43NDE3NzcyOmNkZjZmOWIwMDQyNzI4YTJiN2EwNjIwYTNlYTEyMTExYTMxYWJkYmM='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YTMxYWJkYmM='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTg4OS43NDE3NzcyOmNkZjZmOWIwMDQyNzI4YTJiN2EwNjIwYTNlYTEyMTExYTMxYWJkYmM='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:11:29,917 - [test_login04.py - line:65] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2022-03-01 17:11:30,005 - [test_login04.py - line:65] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2022-03-01 17:11:30,093 - [test_login04.py - line:65] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2022-03-01 17:11:30,183 - [test_login04.py - line:65] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2022-03-01 17:11:30,276 - [test_login04.py - line:65] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2022-03-01 17:12:20,857 - [test_login04.py - line:65] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-01 17:12:20,950 - [test_login04.py - line:65] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2022-03-01 17:12:21,044 - [test_login04.py - line:65] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2022-03-01 17:12:21,129 - [test_login04.py - line:60] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTk0MS4wNTE1MzY2OmMzYjgwZDQ5YmY5OWY0NWVlZTliYWRmZDU3ODkxMDBkM2M0ZTFiNDM='}
2022-03-01 17:12:21,129 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...M2M0ZTFiNDM='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTk0MS4wNTE1MzY2OmMzYjgwZDQ5YmY5OWY0NWVlZTliYWRmZDU3ODkxMDBkM2M0ZTFiNDM='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...M2M0ZTFiNDM='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTk0MS4wNTE1MzY2OmMzYjgwZDQ5YmY5OWY0NWVlZTliYWRmZDU3ODkxMDBkM2M0ZTFiNDM='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:12:21,214 - [test_login04.py - line:65] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2022-03-01 17:12:21,305 - [test_login04.py - line:60] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTk0MS4yMjMwNzgzOjFmN2ZhNDk1NmM2ODA1NzczZTdmNjNlNWRmZGVmZTM3Njc1MzRhMDg='}
2022-03-01 17:12:21,305 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...Njc1MzRhMDg='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTk0MS4yMjMwNzgzOjFmN2ZhNDk1NmM2ODA1NzczZTdmNjNlNWRmZGVmZTM3Njc1MzRhMDg='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...Njc1MzRhMDg='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTk0MS4yMjMwNzgzOjFmN2ZhNDk1NmM2ODA1NzczZTdmNjNlNWRmZGVmZTM3Njc1MzRhMDg='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:12:21,391 - [test_login04.py - line:65] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2022-03-01 17:12:21,481 - [test_login04.py - line:65] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2022-03-01 17:12:21,564 - [test_login04.py - line:65] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2022-03-01 17:12:21,647 - [test_login04.py - line:65] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2022-03-01 17:12:21,741 - [test_login04.py - line:65] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2022-03-01 17:12:28,796 - [test_login04.py - line:65] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-01 17:12:28,884 - [test_login04.py - line:65] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2022-03-01 17:12:28,975 - [test_login04.py - line:65] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2022-03-01 17:12:29,064 - [test_login04.py - line:60] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTk0OC45ODUzMTI6OTQyOGIzYzIyMTI4MjFlYzQwNDYxMTE3ZDA4NDI4ZDdlNjY2OWUxYg=='}
2022-03-01 17:12:29,065 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NjY2OWUxYg=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTk0OC45ODUzMTI6OTQyOGIzYzIyMTI4MjFlYzQwNDYxMTE3ZDA4NDI4ZDdlNjY2OWUxYg=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NjY2OWUxYg=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTk0OC45ODUzMTI6OTQyOGIzYzIyMTI4MjFlYzQwNDYxMTE3ZDA4NDI4ZDdlNjY2OWUxYg=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:12:29,266 - [test_login04.py - line:65] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2022-03-01 17:12:29,361 - [test_login04.py - line:60] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NTk0OS4yNzg1Mjc1Ojc4MzZhOTQ2MzgwM2U0NTFmNWI1NTY2MDFiZjg5YzFhZjViNzA4M2I='}
2022-03-01 17:12:29,361 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZjViNzA4M2I='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTk0OS4yNzg1Mjc1Ojc4MzZhOTQ2MzgwM2U0NTFmNWI1NTY2MDFiZjg5YzFhZjViNzA4M2I='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZjViNzA4M2I='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NTk0OS4yNzg1Mjc1Ojc4MzZhOTQ2MzgwM2U0NTFmNWI1NTY2MDFiZjg5YzFhZjViNzA4M2I='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:12:29,455 - [test_login04.py - line:65] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2022-03-01 17:12:29,544 - [test_login04.py - line:65] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2022-03-01 17:12:29,632 - [test_login04.py - line:65] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2022-03-01 17:12:29,728 - [test_login04.py - line:65] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2022-03-01 17:12:29,826 - [test_login04.py - line:65] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2022-03-01 17:24:09,661 - [test_login05.py - line:65] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-01 17:24:09,751 - [test_login05.py - line:65] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2022-03-01 17:24:09,841 - [test_login05.py - line:65] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2022-03-01 17:24:09,940 - [test_login05.py - line:60] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NjY0OS44NDk1MDA0OmRlMDRhODMxMWI3NmM3ZjVmN2UzMjZkMDNjYmQ0MDMzN2NhZDQwYWE='}
2022-03-01 17:24:09,940 - [test_login05.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...N2NhZDQwYWE='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NjY0OS44NDk1MDA0OmRlMDRhODMxMWI3NmM3ZjVmN2UzMjZkMDNjYmQ0MDMzN2NhZDQwYWE='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...N2NhZDQwYWE='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NjY0OS44NDk1MDA0OmRlMDRhODMxMWI3NmM3ZjVmN2UzMjZkMDNjYmQ0MDMzN2NhZDQwYWE='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:24:10,032 - [test_login05.py - line:65] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2022-03-01 17:24:10,116 - [test_login05.py - line:60] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NjY1MC4wMzg5OTI2OjFkNTEzMWU0NjUwOGEyNjMzNDMxN2JkZjRmMjE1YTk2NmM4NmNjZWY='}
2022-03-01 17:24:10,116 - [test_login05.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NmM4NmNjZWY='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NjY1MC4wMzg5OTI2OjFkNTEzMWU0NjUwOGEyNjMzNDMxN2JkZjRmMjE1YTk2NmM4NmNjZWY='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NmM4NmNjZWY='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NjY1MC4wMzg5OTI2OjFkNTEzMWU0NjUwOGEyNjMzNDMxN2JkZjRmMjE1YTk2NmM4NmNjZWY='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:24:10,200 - [test_login05.py - line:65] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2022-03-01 17:24:10,284 - [test_login05.py - line:65] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2022-03-01 17:24:10,379 - [test_login05.py - line:65] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2022-03-01 17:24:10,460 - [test_login05.py - line:65] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2022-03-01 17:24:10,543 - [test_login05.py - line:65] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2022-03-01 17:24:32,764 - [test_login05.py - line:60] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-01 17:24:32,861 - [test_login05.py - line:60] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2022-03-01 17:24:32,954 - [test_login05.py - line:60] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2022-03-01 17:24:33,047 - [test_login05.py - line:55] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NjY3Mi45NjI2Njc6OWMyOGE4NzgzMmRkMDBiZDg2MThiMDI4OGRiZTk2MmQwYTM3NGIxYg=='}
2022-03-01 17:24:33,048 - [test_login05.py - line:56] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YTM3NGIxYg=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NjY3Mi45NjI2Njc6OWMyOGE4NzgzMmRkMDBiZDg2MThiMDI4OGRiZTk2MmQwYTM3NGIxYg=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 52, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YTM3NGIxYg=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NjY3Mi45NjI2Njc6OWMyOGE4NzgzMmRkMDBiZDg2MThiMDI4OGRiZTk2MmQwYTM3NGIxYg=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:24:33,134 - [test_login05.py - line:60] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2022-03-01 17:24:33,217 - [test_login05.py - line:55] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NjY3My4xNDIxODY6YzM0ZWM2NjhkYjY3NDYxYTZhNGFhMzFmN2M5YzNmNDFhZWJhMmQxYQ=='}
2022-03-01 17:24:33,218 - [test_login05.py - line:56] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZWJhMmQxYQ=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NjY3My4xNDIxODY6YzM0ZWM2NjhkYjY3NDYxYTZhNGFhMzFmN2M5YzNmNDFhZWJhMmQxYQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 52, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZWJhMmQxYQ=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NjY3My4xNDIxODY6YzM0ZWM2NjhkYjY3NDYxYTZhNGFhMzFmN2M5YzNmNDFhZWJhMmQxYQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:24:33,305 - [test_login05.py - line:60] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2022-03-01 17:24:33,397 - [test_login05.py - line:60] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2022-03-01 17:24:33,480 - [test_login05.py - line:60] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2022-03-01 17:24:33,565 - [test_login05.py - line:60] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2022-03-01 17:24:33,650 - [test_login05.py - line:60] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2022-03-01 17:30:19,167 - [test_login05.py - line:67] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-01 17:30:19,260 - [test_login05.py - line:67] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2022-03-01 17:30:19,345 - [test_login05.py - line:67] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2022-03-01 17:30:19,429 - [test_login05.py - line:62] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NzAxOS4zNTE5OTI0OmFiMDczZjM0Nzc2OTgxZjViOTVmNGQ4NjNmYWNjMDA4MWVmYjIzMGY='}
2022-03-01 17:30:19,429 - [test_login05.py - line:63] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MWVmYjIzMGY='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzAxOS4zNTE5OTI0OmFiMDczZjM0Nzc2OTgxZjViOTVmNGQ4NjNmYWNjMDA4MWVmYjIzMGY='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 59, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MWVmYjIzMGY='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzAxOS4zNTE5OTI0OmFiMDczZjM0Nzc2OTgxZjViOTVmNGQ4NjNmYWNjMDA4MWVmYjIzMGY='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:30:19,518 - [test_login05.py - line:67] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2022-03-01 17:30:19,602 - [test_login05.py - line:62] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NzAxOS41MjU1Mjc3OjVmYjA3YjcwNDhiZmZmYzRjY2Y0NjkwZmNkNWZjZjZlYzJjNGMzMWQ='}
2022-03-01 17:30:19,603 - [test_login05.py - line:63] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YzJjNGMzMWQ='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzAxOS41MjU1Mjc3OjVmYjA3YjcwNDhiZmZmYzRjY2Y0NjkwZmNkNWZjZjZlYzJjNGMzMWQ='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 59, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YzJjNGMzMWQ='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzAxOS41MjU1Mjc3OjVmYjA3YjcwNDhiZmZmYzRjY2Y0NjkwZmNkNWZjZjZlYzJjNGMzMWQ='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:30:19,696 - [test_login05.py - line:67] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2022-03-01 17:30:19,779 - [test_login05.py - line:67] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2022-03-01 17:30:19,870 - [test_login05.py - line:67] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2022-03-01 17:30:19,961 - [test_login05.py - line:67] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2022-03-01 17:30:20,046 - [test_login05.py - line:67] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2022-03-01 17:30:31,309 - [test_login05.py - line:67] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-01 17:30:31,403 - [test_login05.py - line:67] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2022-03-01 17:30:31,506 - [test_login05.py - line:67] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2022-03-01 17:30:31,612 - [test_login05.py - line:62] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NzAzMS41MTk0NDE2OjJmZmI0ZGYxZDc1MjY5ZWRjNzlkNGZlZDQzM2IyMWNmOTFmNGM2ZTk='}
2022-03-01 17:30:31,612 - [test_login05.py - line:63] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...OTFmNGM2ZTk='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzAzMS41MTk0NDE2OjJmZmI0ZGYxZDc1MjY5ZWRjNzlkNGZlZDQzM2IyMWNmOTFmNGM2ZTk='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 59, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...OTFmNGM2ZTk='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzAzMS41MTk0NDE2OjJmZmI0ZGYxZDc1MjY5ZWRjNzlkNGZlZDQzM2IyMWNmOTFmNGM2ZTk='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:30:31,817 - [test_login05.py - line:67] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2022-03-01 17:30:31,907 - [test_login05.py - line:67] - INFO:测试编号6,测试用例标题:测试密码是否区分大小写,执行成功！
2022-03-01 17:30:31,995 - [test_login05.py - line:67] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2022-03-01 17:30:32,081 - [test_login05.py - line:67] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2022-03-01 17:30:32,174 - [test_login05.py - line:67] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2022-03-01 17:30:32,327 - [test_login05.py - line:67] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2022-03-01 17:30:32,415 - [test_login05.py - line:67] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2022-03-01 17:30:56,287 - [test_login05.py - line:67] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-01 17:30:56,396 - [test_login05.py - line:67] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2022-03-01 17:30:56,489 - [test_login05.py - line:67] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2022-03-01 17:30:56,584 - [test_login05.py - line:62] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NzA1Ni41MDA4ODA3OjZlOTEyZWQwYmZlNDcxYTEwMjQwZTU5OTI2NjEwMWFiNjY0OTRkZmE='}
2022-03-01 17:30:56,584 - [test_login05.py - line:63] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NjY0OTRkZmE='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzA1Ni41MDA4ODA3OjZlOTEyZWQwYmZlNDcxYTEwMjQwZTU5OTI2NjEwMWFiNjY0OTRkZmE='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 59, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NjY0OTRkZmE='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzA1Ni41MDA4ODA3OjZlOTEyZWQwYmZlNDcxYTEwMjQwZTU5OTI2NjEwMWFiNjY0OTRkZmE='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:30:56,782 - [test_login05.py - line:67] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2022-03-01 17:30:56,875 - [test_login05.py - line:67] - INFO:测试编号6,测试用例标题:测试密码是否区分大小写,执行成功！
2022-03-01 17:30:56,962 - [test_login05.py - line:67] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2022-03-01 17:30:57,049 - [test_login05.py - line:67] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2022-03-01 17:30:57,135 - [test_login05.py - line:67] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2022-03-01 17:30:57,315 - [test_login05.py - line:67] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2022-03-01 17:30:57,420 - [test_login05.py - line:67] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2022-03-01 17:32:01,231 - [test_login05.py - line:67] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-01 17:32:01,333 - [test_login05.py - line:67] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2022-03-01 17:32:01,435 - [test_login05.py - line:67] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2022-03-01 17:32:01,524 - [test_login05.py - line:62] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NzEyMS40NDYxMzY1OjZlYTUzM2MyMWQ4MWIwNzM1NzYwYjFiODNmY2E4OGU0MjEzMmExZjk='}
2022-03-01 17:32:01,524 - [test_login05.py - line:63] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MjEzMmExZjk='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzEyMS40NDYxMzY1OjZlYTUzM2MyMWQ4MWIwNzM1NzYwYjFiODNmY2E4OGU0MjEzMmExZjk='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 59, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MjEzMmExZjk='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzEyMS40NDYxMzY1OjZlYTUzM2MyMWQ4MWIwNzM1NzYwYjFiODNmY2E4OGU0MjEzMmExZjk='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:32:01,722 - [test_login05.py - line:67] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2022-03-01 17:32:01,816 - [test_login05.py - line:67] - INFO:测试编号6,测试用例标题:测试密码是否区分大小写,执行成功！
2022-03-01 17:32:01,905 - [test_login05.py - line:67] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2022-03-01 17:32:01,997 - [test_login05.py - line:67] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2022-03-01 17:32:02,094 - [test_login05.py - line:67] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2022-03-01 17:32:02,184 - [test_login05.py - line:67] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2022-03-01 17:32:02,269 - [test_login05.py - line:67] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2022-03-01 17:37:19,065 - [test_login05.py - line:69] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-01 17:37:19,149 - [test_login05.py - line:69] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2022-03-01 17:37:19,232 - [test_login05.py - line:69] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2022-03-01 17:37:19,316 - [test_login05.py - line:64] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NzQzOS4yMzk5NjI6ODlmZmU0M2JmNzM5ZTViYjJlM2YxNzYwYmJiZWM3NzgxYWQyZGY0Yw=='}
2022-03-01 17:37:19,316 - [test_login05.py - line:65] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YWQyZGY0Yw=='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzQzOS4yMzk5NjI6ODlmZmU0M2JmNzM5ZTViYjJlM2YxNzYwYmJiZWM3NzgxYWQyZGY0Yw=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 61, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YWQyZGY0Yw=='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzQzOS4yMzk5NjI6ODlmZmU0M2JmNzM5ZTViYjJlM2YxNzYwYmJiZWM3NzgxYWQyZGY0Yw=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:37:19,401 - [test_login05.py - line:69] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2022-03-01 17:37:19,489 - [test_login05.py - line:64] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NzQzOS40MDk1MDkyOmU3ODAwNjE3M2I1NDQzODIwYzcwZTZhMzcyYTExMGM5YTBhMzJlNDM='}
2022-03-01 17:37:19,489 - [test_login05.py - line:65] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YTBhMzJlNDM='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzQzOS40MDk1MDkyOmU3ODAwNjE3M2I1NDQzODIwYzcwZTZhMzcyYTExMGM5YTBhMzJlNDM='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 61, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YTBhMzJlNDM='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzQzOS40MDk1MDkyOmU3ODAwNjE3M2I1NDQzODIwYzcwZTZhMzcyYTExMGM5YTBhMzJlNDM='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:37:19,573 - [test_login05.py - line:69] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2022-03-01 17:37:19,656 - [test_login05.py - line:69] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2022-03-01 17:37:19,739 - [test_login05.py - line:69] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2022-03-01 17:37:19,823 - [test_login05.py - line:69] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2022-03-01 17:37:19,912 - [test_login05.py - line:69] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2022-03-01 17:37:27,030 - [test_login05.py - line:69] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-01 17:37:27,132 - [test_login05.py - line:69] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2022-03-01 17:37:27,224 - [test_login05.py - line:69] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2022-03-01 17:37:27,318 - [test_login05.py - line:64] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NzQ0Ny4yMzU1NzE5Ojc1ZTcxYWVmNGRmOTkyYmRmODcxN2NiNjBhMTNmZGYwYjAzYWFmMjk='}
2022-03-01 17:37:27,319 - [test_login05.py - line:65] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YjAzYWFmMjk='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzQ0Ny4yMzU1NzE5Ojc1ZTcxYWVmNGRmOTkyYmRmODcxN2NiNjBhMTNmZGYwYjAzYWFmMjk='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 61, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YjAzYWFmMjk='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzQ0Ny4yMzU1NzE5Ojc1ZTcxYWVmNGRmOTkyYmRmODcxN2NiNjBhMTNmZGYwYjAzYWFmMjk='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:37:27,514 - [test_login05.py - line:69] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2022-03-01 17:37:27,603 - [test_login05.py - line:64] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NzQ0Ny41MjU3OTU3OmM0ZGFlNTI5ODMxNzMyMTZiZjE0MmFhMzQ0Mzc5OTJlNTM4MzAwMzM='}
2022-03-01 17:37:27,603 - [test_login05.py - line:65] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NTM4MzAwMzM='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzQ0Ny41MjU3OTU3OmM0ZGFlNTI5ODMxNzMyMTZiZjE0MmFhMzQ0Mzc5OTJlNTM4MzAwMzM='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 61, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NTM4MzAwMzM='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzQ0Ny41MjU3OTU3OmM0ZGFlNTI5ODMxNzMyMTZiZjE0MmFhMzQ0Mzc5OTJlNTM4MzAwMzM='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:37:27,700 - [test_login05.py - line:69] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2022-03-01 17:37:27,786 - [test_login05.py - line:69] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2022-03-01 17:37:27,871 - [test_login05.py - line:69] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2022-03-01 17:37:27,959 - [test_login05.py - line:69] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2022-03-01 17:37:28,046 - [test_login05.py - line:69] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2022-03-01 17:39:27,007 - [test_login05.py - line:71] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-01 17:39:27,096 - [test_login05.py - line:71] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2022-03-01 17:39:27,183 - [test_login05.py - line:71] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2022-03-01 17:39:27,275 - [test_login05.py - line:71] - INFO:测试编号4,测试用例标题:测试用户名是否区分大小写,执行成功！
2022-03-01 17:39:27,366 - [test_login05.py - line:71] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2022-03-01 17:39:27,452 - [test_login05.py - line:66] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NzU2Ny4zNzUxNzAyOmZmMjYyYTMyOWVjZjEzZjM1YjhkOGVlYjQ2ODNhMTc2MTFlNmExNmE='}
2022-03-01 17:39:27,452 - [test_login05.py - line:67] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MTFlNmExNmE='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzU2Ny4zNzUxNzAyOmZmMjYyYTMyOWVjZjEzZjM1YjhkOGVlYjQ2ODNhMTc2MTFlNmExNmE='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 63, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MTFlNmExNmE='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzU2Ny4zNzUxNzAyOmZmMjYyYTMyOWVjZjEzZjM1YjhkOGVlYjQ2ODNhMTc2MTFlNmExNmE='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:39:27,539 - [test_login05.py - line:71] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2022-03-01 17:39:27,625 - [test_login05.py - line:71] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2022-03-01 17:39:27,722 - [test_login05.py - line:71] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2022-03-01 17:39:27,817 - [test_login05.py - line:71] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2022-03-01 17:39:27,902 - [test_login05.py - line:71] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2022-03-01 17:39:47,296 - [test_login05.py - line:71] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-01 17:39:47,392 - [test_login05.py - line:71] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2022-03-01 17:39:47,482 - [test_login05.py - line:71] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2022-03-01 17:39:47,575 - [test_login05.py - line:66] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NzU4Ny40OTAzNTc6ZjJiMTc3NTI3YjI2NDBhMjU2MWQwMzUzYWM4ZmQxOTM2Y2I4MjljMQ=='}
2022-03-01 17:39:47,575 - [test_login05.py - line:67] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...Y2I4MjljMQ=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzU4Ny40OTAzNTc6ZjJiMTc3NTI3YjI2NDBhMjU2MWQwMzUzYWM4ZmQxOTM2Y2I4MjljMQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 63, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...Y2I4MjljMQ=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzU4Ny40OTAzNTc6ZjJiMTc3NTI3YjI2NDBhMjU2MWQwMzUzYWM4ZmQxOTM2Y2I4MjljMQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:39:47,665 - [test_login05.py - line:71] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2022-03-01 17:39:47,753 - [test_login05.py - line:66] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjE1NzU4Ny42NzM4NjYzOjkyMjdiYjU3ZTE1ZmEzZGUxMmVkYTM1YWQzZDlkMzZhODE0OGYxNmQ='}
2022-03-01 17:39:47,753 - [test_login05.py - line:67] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ODE0OGYxNmQ='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzU4Ny42NzM4NjYzOjkyMjdiYjU3ZTE1ZmEzZGUxMmVkYTM1YWQzZDlkMzZhODE0OGYxNmQ='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 63, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ODE0OGYxNmQ='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjE1NzU4Ny42NzM4NjYzOjkyMjdiYjU3ZTE1ZmEzZGUxMmVkYTM1YWQzZDlkMzZhODE0OGYxNmQ='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-01 17:39:47,853 - [test_login05.py - line:71] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2022-03-01 17:39:47,941 - [test_login05.py - line:71] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2022-03-01 17:39:48,025 - [test_login05.py - line:71] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2022-03-01 17:39:48,108 - [test_login05.py - line:71] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2022-03-01 17:39:48,194 - [test_login05.py - line:71] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2022-03-03 14:58:41,972 - [test_login05.py - line:71] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-03 14:58:42,099 - [test_login05.py - line:71] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2022-03-03 14:58:42,214 - [test_login05.py - line:71] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2022-03-03 14:58:42,322 - [test_login05.py - line:66] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMyMDcyMi4yMjY0MTk3OjgzZDIwNTQ0M2UxMDgzMjk1NTliOWQzYjBhMTUyMzJiNTI1NmY0MTA='}
2022-03-03 14:58:42,322 - [test_login05.py - line:67] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NTI1NmY0MTA='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyMi4yMjY0MTk3OjgzZDIwNTQ0M2UxMDgzMjk1NTliOWQzYjBhMTUyMzJiNTI1NmY0MTA='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 63, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NTI1NmY0MTA='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyMi4yMjY0MTk3OjgzZDIwNTQ0M2UxMDgzMjk1NTliOWQzYjBhMTUyMzJiNTI1NmY0MTA='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 14:58:42,614 - [test_login05.py - line:71] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2022-03-03 14:58:42,707 - [test_login05.py - line:66] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMyMDcyMi42MjUzNTI5OjYzMDUzYmJiMmE2YmRiYWE2Nzg5MzUyYmNiMmU1ZGQ0MTVmZjc2ZDU='}
2022-03-03 14:58:42,707 - [test_login05.py - line:67] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MTVmZjc2ZDU='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyMi42MjUzNTI5OjYzMDUzYmJiMmE2YmRiYWE2Nzg5MzUyYmNiMmU1ZGQ0MTVmZjc2ZDU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 63, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MTVmZjc2ZDU='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyMi42MjUzNTI5OjYzMDUzYmJiMmE2YmRiYWE2Nzg5MzUyYmNiMmU1ZGQ0MTVmZjc2ZDU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 14:58:42,807 - [test_login05.py - line:71] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2022-03-03 14:58:42,896 - [test_login05.py - line:71] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2022-03-03 14:58:42,982 - [test_login05.py - line:71] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2022-03-03 14:58:43,068 - [test_login05.py - line:71] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2022-03-03 14:58:43,176 - [test_login05.py - line:71] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2022-03-03 14:58:43,262 - [test_login01.py - line:40] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-03 14:58:43,350 - [test_login02.py - line:58] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-03 14:58:43,448 - [test_login03.py - line:69] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-03 14:58:43,537 - [test_login03.py - line:69] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2022-03-03 14:58:43,626 - [test_login03.py - line:69] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2022-03-03 14:58:43,728 - [test_login03.py - line:64] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMyMDcyMy42MzY2NDc3OmUzNzBiMzQzYWM0OTI1MGJlNWI4OGUyZjA0YWYwZWZjMDMwN2E2NmU='}
2022-03-03 14:58:43,729 - [test_login03.py - line:65] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MDMwN2E2NmU='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyMy42MzY2NDc3OmUzNzBiMzQzYWM0OTI1MGJlNWI4OGUyZjA0YWYwZWZjMDMwN2E2NmU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 61, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MDMwN2E2NmU='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyMy42MzY2NDc3OmUzNzBiMzQzYWM0OTI1MGJlNWI4OGUyZjA0YWYwZWZjMDMwN2E2NmU='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 14:58:43,834 - [test_login03.py - line:69] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2022-03-03 14:58:43,935 - [test_login03.py - line:64] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMyMDcyMy44NDcwODQ6ZWYzZDliMTY5YjgxOTM1ZTMwYzlhMTY1NDViNTBmYzIxNTMyMWQ5MQ=='}
2022-03-03 14:58:43,936 - [test_login03.py - line:65] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NTMyMWQ5MQ=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyMy44NDcwODQ6ZWYzZDliMTY5YjgxOTM1ZTMwYzlhMTY1NDViNTBmYzIxNTMyMWQ5MQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login03.py", line 61, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NTMyMWQ5MQ=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyMy44NDcwODQ6ZWYzZDliMTY5YjgxOTM1ZTMwYzlhMTY1NDViNTBmYzIxNTMyMWQ5MQ=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 14:58:44,045 - [test_login03.py - line:69] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2022-03-03 14:58:44,145 - [test_login03.py - line:69] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2022-03-03 14:58:44,231 - [test_login03.py - line:69] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2022-03-03 14:58:44,318 - [test_login03.py - line:69] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2022-03-03 14:58:44,449 - [test_login03.py - line:69] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2022-03-03 14:58:44,559 - [test_login04.py - line:65] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-03 14:58:44,644 - [test_login04.py - line:65] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2022-03-03 14:58:44,733 - [test_login04.py - line:65] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2022-03-03 14:58:44,820 - [test_login04.py - line:60] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMyMDcyNC43NDM2ODU1OmVmNGRlMWFiOTUzYzE3MzY1NjhiYjlhYzdiMzU0NzNlYWNlN2ExM2M='}
2022-03-03 14:58:44,821 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YWNlN2ExM2M='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyNC43NDM2ODU1OmVmNGRlMWFiOTUzYzE3MzY1NjhiYjlhYzdiMzU0NzNlYWNlN2ExM2M='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...YWNlN2ExM2M='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyNC43NDM2ODU1OmVmNGRlMWFiOTUzYzE3MzY1NjhiYjlhYzdiMzU0NzNlYWNlN2ExM2M='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 14:58:44,915 - [test_login04.py - line:65] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2022-03-03 14:58:45,002 - [test_login04.py - line:60] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMyMDcyNC45MjYxOTczOjc1YTNjMDhiNGNhMjNmM2JhNjc3ZjgyY2NmMmZlNDI4ZTJhYjA3NjA='}
2022-03-03 14:58:45,002 - [test_login04.py - line:61] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTJhYjA3NjA='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyNC45MjYxOTczOjc1YTNjMDhiNGNhMjNmM2JhNjc3ZjgyY2NmMmZlNDI4ZTJhYjA3NjA='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login04.py", line 57, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTJhYjA3NjA='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyNC45MjYxOTczOjc1YTNjMDhiNGNhMjNmM2JhNjc3ZjgyY2NmMmZlNDI4ZTJhYjA3NjA='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 14:58:45,096 - [test_login04.py - line:65] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2022-03-03 14:58:45,182 - [test_login04.py - line:65] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2022-03-03 14:58:45,267 - [test_login04.py - line:65] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2022-03-03 14:58:45,359 - [test_login04.py - line:65] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2022-03-03 14:58:45,447 - [test_login04.py - line:65] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2022-03-03 14:58:45,544 - [test_login05.py - line:71] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-03 14:58:45,664 - [test_login05.py - line:71] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2022-03-03 14:58:45,767 - [test_login05.py - line:71] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2022-03-03 14:58:45,854 - [test_login05.py - line:66] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMyMDcyNS43Nzc5MTk6YjFhNWVhYmJkM2JkODQzZmQ1NmZlYTc0YmI2OWU3MTVhZTQwNDU2Mw=='}
2022-03-03 14:58:45,854 - [test_login05.py - line:67] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTQwNDU2Mw=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyNS43Nzc5MTk6YjFhNWVhYmJkM2JkODQzZmQ1NmZlYTc0YmI2OWU3MTVhZTQwNDU2Mw=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 63, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZTQwNDU2Mw=='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyNS43Nzc5MTk6YjFhNWVhYmJkM2JkODQzZmQ1NmZlYTc0YmI2OWU3MTVhZTQwNDU2Mw=='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 14:58:45,944 - [test_login05.py - line:71] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2022-03-03 14:58:46,036 - [test_login05.py - line:66] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMyMDcyNS45NTQ0NDYzOmY5ZDI0ZTkxM2JkNTQ4YTkzZTE5ZmMwZjEyZmU2YzBjNTkyNGZhN2Q='}
2022-03-03 14:58:46,036 - [test_login05.py - line:67] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NTkyNGZhN2Q='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyNS45NTQ0NDYzOmY5ZDI0ZTkxM2JkNTQ4YTkzZTE5ZmMwZjEyZmU2YzBjNTkyNGZhN2Q='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 63, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...NTkyNGZhN2Q='}
  Differing items:
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  {'code': 1007} != {'code': 1000}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDcyNS45NTQ0NDYzOmY5ZDI0ZTkxM2JkNTQ4YTkzZTE5ZmMwZjEyZmU2YzBjNTkyNGZhN2Q='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 14:58:46,128 - [test_login05.py - line:71] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2022-03-03 14:58:46,214 - [test_login05.py - line:71] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2022-03-03 14:58:46,306 - [test_login05.py - line:71] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2022-03-03 14:58:46,392 - [test_login05.py - line:71] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2022-03-03 14:58:46,478 - [test_login05.py - line:71] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2022-03-03 15:00:21,070 - [test_login05.py - line:71] - INFO:测试编号1,测试用例标题:正常登录流程,执行成功！
2022-03-03 15:00:21,162 - [test_login05.py - line:71] - INFO:测试编号2,测试用例标题:测试用户名为空的场景,执行成功！
2022-03-03 15:00:21,250 - [test_login05.py - line:71] - INFO:测试编号3,测试用例标题:测试用户名不存在的场景,执行成功！
2022-03-03 15:00:21,344 - [test_login05.py - line:66] - ERROR:测试编号4,测试用例标题:测试用户名是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMyMDgyMS4yNjM0NzIzOmJiMWM1NmI2NmU4NzFkNjdjNzU2MTZjMGQxMTI4ZTM1ZjQ2YjEzZWM='}
2022-03-03 15:00:21,345 - [test_login05.py - line:67] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZjQ2YjEzZWM='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDgyMS4yNjM0NzIzOmJiMWM1NmI2NmU4NzFkNjdjNzU2MTZjMGQxMTI4ZTM1ZjQ2YjEzZWM='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 63, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...ZjQ2YjEzZWM='}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDgyMS4yNjM0NzIzOmJiMWM1NmI2NmU4NzFkNjdjNzU2MTZjMGQxMTI4ZTM1ZjQ2YjEzZWM='}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 15:00:21,562 - [test_login05.py - line:71] - INFO:测试编号5,测试用例标题:测试密码为空的场景,执行成功！
2022-03-03 15:00:21,652 - [test_login05.py - line:66] - ERROR:测试编号6,测试用例标题:测试密码是否区分大小写,执行失败！实际结果:{'code': 1000, 'msg': '登录成功', 'token': 'MTY0NjMyMDgyMS41NzQ2NDo0NzQwYjUyNWUwNWRmNjNjMzU5OTgyY2E1NGY3ZThhMWZhM2Y5NDRh'}
2022-03-03 15:00:21,652 - [test_login05.py - line:67] - ERROR:assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MWZhM2Y5NDRh'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDgyMS41NzQ2NDo0NzQwYjUyNWUwNWRmNjNjMzU5OTgyY2E1NGY3ZThhMWZhM2Y5NDRh'}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_business_token_login02\test_login05.py", line 63, in test_login
    assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思
AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MWZhM2Y5NDRh'}
  Differing items:
  {'code': 1007} != {'code': 1000}
  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}
  Right contains 1 more item:
  {'token': 'MTY0NjMyMDgyMS41NzQ2NDo0NzQwYjUyNWUwNWRmNjNjMzU5OTgyY2E1NGY3ZThhMWZhM2Y5NDRh'}
  Full diff:
    {...
  
  ...Full output truncated (9 lines hidden), use '-vv' to show
2022-03-03 15:00:21,746 - [test_login05.py - line:71] - INFO:测试编号7,测试用例标题:测试错误密码的场景,执行成功！
2022-03-03 15:00:21,832 - [test_login05.py - line:71] - INFO:测试编号8,测试用例标题:测试用户类型为空的场景,执行成功！
2022-03-03 15:00:21,923 - [test_login05.py - line:71] - INFO:测试编号9,测试用例标题:测试用户名格式错误的场景,执行成功！
2022-03-03 15:00:22,012 - [test_login05.py - line:71] - INFO:测试编号10,测试用例标题:测试用户类型格式不正确的场景,执行成功！
2022-03-03 15:00:22,112 - [test_login05.py - line:71] - INFO:测试编号11,测试用例标题:测试用户类型不匹配的场景,执行成功！
2022-03-03 15:00:22,201 - [test_login.py - line:55] - INFO:测试编号1,测试用例标题:登录成功,执行成功！
2022-03-03 15:00:22,287 - [test_login.py - line:55] - INFO:测试编号2,测试用例标题:用户名错误,执行成功！
2022-03-03 15:00:22,369 - [test_login.py - line:55] - INFO:测试编号3,测试用例标题:用户名为空,执行成功！
2022-03-03 15:00:22,453 - [test_login.py - line:55] - INFO:测试编号4,测试用例标题:密码错误,执行成功！
2022-03-03 15:00:22,542 - [test_login.py - line:55] - INFO:测试编号5,测试用例标题:密码为空,执行成功！
2022-03-03 15:00:22,632 - [test_regist.py - line:51] - INFO:测试编号1,测试用例标题:正常注册,执行成功!
2022-03-03 15:00:22,719 - [test_regist.py - line:51] - INFO:测试编号2,测试用例标题:用户名为空,执行成功!
2022-03-03 15:00:22,803 - [test_regist.py - line:51] - INFO:测试编号3,测试用例标题:密码为空,执行成功!
2022-03-03 15:00:22,890 - [test_regist.py - line:46] - ERROR:测试编号4,测试用例标题:确认密码为空,执行失败,实际结果为:{'code': 1004, 'msg': '两次密码输入不一致'}!
2022-03-03 15:00:22,890 - [test_regist.py - line:47] - ERROR:assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 43, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1003...': '确认密码不能为空'} == {'code': 1004...: '两次密码输入不一致'}
  Differing items:
  {'code': 1003} != {'code': 1004}
  {'msg': '确认密码不能为空'} != {'msg': '两次密码输入不一致'}
  Full diff:
  - {'code': 1004, 'msg': '两次密码输入不一致'}
  ?             ^          ^^  -- ^^
  + {'code': 1003, 'msg': '确认密码不能为空'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-03 15:00:22,978 - [test_regist.py - line:51] - INFO:测试编号5,测试用例标题:邮箱为空,执行成功!
2022-03-03 15:00:23,062 - [test_regist.py - line:51] - INFO:测试编号6,测试用例标题:手机号码为空,执行成功!
2022-03-03 15:00:23,143 - [test_regist.py - line:51] - INFO:测试编号7,测试用例标题:密码和确认密码输入不一致,执行成功!
2022-03-03 15:00:23,231 - [test_regist.py - line:46] - ERROR:测试编号8,测试用例标题:手机号码格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-03-03 15:00:23,231 - [test_regist.py - line:47] - ERROR:assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 43, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1007...: '手机号码格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Differing items:
  {'code': 1007} != {'code': 1009}
  {'msg': '手机号码格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  + {'code': 1007, 'msg': '手机号码格式不正确'}
2022-03-03 15:00:23,332 - [test_regist.py - line:51] - INFO:测试编号9,测试用例标题:用户名不在6-18之间,执行成功!
2022-03-03 15:00:23,419 - [test_regist.py - line:51] - INFO:测试编号10,测试用例标题:密码不在6-18位之间,执行成功!
2022-03-03 15:00:23,517 - [test_regist.py - line:46] - ERROR:测试编号11,测试用例标题:邮箱格式不正确,执行失败,实际结果为:{'code': 1009, 'msg': '用户名已存在'}!
2022-03-03 15:00:23,517 - [test_regist.py - line:47] - ERROR:assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
Traceback (most recent call last):
  File "C:\Program Files (x86)\PythonWorkSpace\autotest03\testcases\test_my_interface01\test_regist.py", line 43, in test_register
    assert eval(case.expect) == res_body
AssertionError: assert {'code': 1009...g': '邮箱格式不正确'} == {'code': 1009...sg': '用户名已存在'}
  Omitting 1 identical items, use -vv to show
  Differing items:
  {'msg': '邮箱格式不正确'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1009, 'msg': '用户名已存在'}
  ?                        ^^^^^^
  + {'code': 1009, 'msg': '邮箱格式不正确'}...
  
  ...Full output truncated (2 lines hidden), use '-vv' to show
2022-03-03 15:00:23,608 - [test_regist.py - line:51] - INFO:测试编号12,测试用例标题:用户名已注册,执行成功!
