{
  "uid" : "b9d2f081d32b04fc",
  "name" : "测试密码是否区分大小写",
  "fullName" : "testcases.test_business_token_login02.test_login05.TestLogin#test_login",
  "historyId" : "86671ce0eee3253c5c1283b180d11bf7",
  "time" : {
    "start" : 1646290821568,
    "stop" : 1646290821653,
    "duration" : 85
  },
  "description" : "商品登录模块接口测试用例",
  "descriptionHtml" : "<p>商品登录模块接口测试用例</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MWZhM2Y5NDRh'}\n  Differing items:\n  {'code': 1007} != {'code': 1000}\n  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}\n  Right contains 1 more item:\n  {'token': 'MTY0NjMyMDgyMS41NzQ2NDo0NzQwYjUyNWUwNWRmNjNjMzU5OTgyY2E1NGY3ZThhMWZhM2Y5NDRh'}\n  Full diff:\n    {...\n  \n  ...Full output truncated (9 lines hidden), use '-vv' to show",
  "statusTrace" : "self = <autotest03.testcases.test_business_token_login02.test_login05.TestLogin object at 0x048C5238>\ncase = <comms.excel_utils.CaseData object at 0x03E3EC88>\n\n    @allure.severity(\"critical\")\n    @allure.description(\"商品登录模块接口测试用例\")\n    @pytest.mark.parametrize('case', cases)\n    def test_login(self, case):\n        allure.dynamic.title(case.case_title)\n        allure.attach(body=case.url, name='接口路径')\n        allure.attach(body=case.case_data, name='请求参数')\n    \n        if '#name#' in case.case_data:\n            case.case_data = replace_data(case.case_data, 'username', self.name)\n            if case.case_id == 4:  # 用户名区分大小写\n                case.case_data = replace_data(case.case_data, 'username', self.name.upper())\n        if '#passwd#' in case.case_data:\n            case.case_data = replace_data(case.case_data, 'password', self.pwd)\n            if case.case_id == 6:  # 密码区分大小写\n                case.case_data = replace_data(case.case_data, 'password', self.pwd.upper())\n    \n        response = requests.post(url=case.url, data=eval(case.case_data))\n        res_body = response.json()\n        allure.attach(body=str(res_body), name='响应结果')\n    \n        try:\n            if case.case_id == 1:\n                assert case.expect in str(res_body)\n            else:\n                assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思\n        except AssertionError as e:\n            ReadExcel.write_data(DATA_FILE, '登录1', case.case_id, 7, '失败')\n            logger.error('测试编号{},测试用例标题:{},执行失败！实际结果:{}'.format(case.case_id, case.case_title, res_body))\n            logger.exception(e)\n>           raise e\n\ntestcases\\test_business_token_login02\\test_login05.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <autotest03.testcases.test_business_token_login02.test_login05.TestLogin object at 0x048C5238>\ncase = <comms.excel_utils.CaseData object at 0x03E3EC88>\n\n    @allure.severity(\"critical\")\n    @allure.description(\"商品登录模块接口测试用例\")\n    @pytest.mark.parametrize('case', cases)\n    def test_login(self, case):\n        allure.dynamic.title(case.case_title)\n        allure.attach(body=case.url, name='接口路径')\n        allure.attach(body=case.case_data, name='请求参数')\n    \n        if '#name#' in case.case_data:\n            case.case_data = replace_data(case.case_data, 'username', self.name)\n            if case.case_id == 4:  # 用户名区分大小写\n                case.case_data = replace_data(case.case_data, 'username', self.name.upper())\n        if '#passwd#' in case.case_data:\n            case.case_data = replace_data(case.case_data, 'password', self.pwd)\n            if case.case_id == 6:  # 密码区分大小写\n                case.case_data = replace_data(case.case_data, 'password', self.pwd.upper())\n    \n        response = requests.post(url=case.url, data=eval(case.case_data))\n        res_body = response.json()\n        allure.attach(body=str(res_body), name='响应结果')\n    \n        try:\n            if case.case_id == 1:\n                assert case.expect in str(res_body)\n            else:\n>               assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思\nE               AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MWZhM2Y5NDRh'}\nE                 Differing items:\nE                 {'code': 1007} != {'code': 1000}\nE                 {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}\nE                 Right contains 1 more item:\nE                 {'token': 'MTY0NjMyMDgyMS41NzQ2NDo0NzQwYjUyNWUwNWRmNjNjMzU5OTgyY2E1NGY3ZThhMWZhM2Y5NDRh'}\nE                 Full diff:\nE                   {...\nE                 \nE                 ...Full output truncated (9 lines hidden), use '-vv' to show\n\ntestcases\\test_business_token_login02\\test_login05.py:63: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "connect_db",
    "time" : {
      "start" : 1646290821566,
      "stop" : 1646290821568,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "description" : "商品登录模块接口测试用例",
    "status" : "failed",
    "statusMessage" : "AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MWZhM2Y5NDRh'}\n  Differing items:\n  {'code': 1007} != {'code': 1000}\n  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}\n  Right contains 1 more item:\n  {'token': 'MTY0NjMyMDgyMS41NzQ2NDo0NzQwYjUyNWUwNWRmNjNjMzU5OTgyY2E1NGY3ZThhMWZhM2Y5NDRh'}\n  Full diff:\n    {...\n  \n  ...Full output truncated (9 lines hidden), use '-vv' to show",
    "statusTrace" : "self = <autotest03.testcases.test_business_token_login02.test_login05.TestLogin object at 0x048C5238>\ncase = <comms.excel_utils.CaseData object at 0x03E3EC88>\n\n    @allure.severity(\"critical\")\n    @allure.description(\"商品登录模块接口测试用例\")\n    @pytest.mark.parametrize('case', cases)\n    def test_login(self, case):\n        allure.dynamic.title(case.case_title)\n        allure.attach(body=case.url, name='接口路径')\n        allure.attach(body=case.case_data, name='请求参数')\n    \n        if '#name#' in case.case_data:\n            case.case_data = replace_data(case.case_data, 'username', self.name)\n            if case.case_id == 4:  # 用户名区分大小写\n                case.case_data = replace_data(case.case_data, 'username', self.name.upper())\n        if '#passwd#' in case.case_data:\n            case.case_data = replace_data(case.case_data, 'password', self.pwd)\n            if case.case_id == 6:  # 密码区分大小写\n                case.case_data = replace_data(case.case_data, 'password', self.pwd.upper())\n    \n        response = requests.post(url=case.url, data=eval(case.case_data))\n        res_body = response.json()\n        allure.attach(body=str(res_body), name='响应结果')\n    \n        try:\n            if case.case_id == 1:\n                assert case.expect in str(res_body)\n            else:\n                assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思\n        except AssertionError as e:\n            ReadExcel.write_data(DATA_FILE, '登录1', case.case_id, 7, '失败')\n            logger.error('测试编号{},测试用例标题:{},执行失败！实际结果:{}'.format(case.case_id, case.case_title, res_body))\n            logger.exception(e)\n>           raise e\n\ntestcases\\test_business_token_login02\\test_login05.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <autotest03.testcases.test_business_token_login02.test_login05.TestLogin object at 0x048C5238>\ncase = <comms.excel_utils.CaseData object at 0x03E3EC88>\n\n    @allure.severity(\"critical\")\n    @allure.description(\"商品登录模块接口测试用例\")\n    @pytest.mark.parametrize('case', cases)\n    def test_login(self, case):\n        allure.dynamic.title(case.case_title)\n        allure.attach(body=case.url, name='接口路径')\n        allure.attach(body=case.case_data, name='请求参数')\n    \n        if '#name#' in case.case_data:\n            case.case_data = replace_data(case.case_data, 'username', self.name)\n            if case.case_id == 4:  # 用户名区分大小写\n                case.case_data = replace_data(case.case_data, 'username', self.name.upper())\n        if '#passwd#' in case.case_data:\n            case.case_data = replace_data(case.case_data, 'password', self.pwd)\n            if case.case_id == 6:  # 密码区分大小写\n                case.case_data = replace_data(case.case_data, 'password', self.pwd.upper())\n    \n        response = requests.post(url=case.url, data=eval(case.case_data))\n        res_body = response.json()\n        allure.attach(body=str(res_body), name='响应结果')\n    \n        try:\n            if case.case_id == 1:\n                assert case.expect in str(res_body)\n            else:\n>               assert eval(case.expect) == res_body  # assert是断言的意思，Equal是相等、比较的意思\nE               AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MWZhM2Y5NDRh'}\nE                 Differing items:\nE                 {'code': 1007} != {'code': 1000}\nE                 {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}\nE                 Right contains 1 more item:\nE                 {'token': 'MTY0NjMyMDgyMS41NzQ2NDo0NzQwYjUyNWUwNWRmNjNjMzU5OTgyY2E1NGY3ZThhMWZhM2Y5NDRh'}\nE                 Full diff:\nE                   {...\nE                 \nE                 ...Full output truncated (9 lines hidden), use '-vv' to show\n\ntestcases\\test_business_token_login02\\test_login05.py:63: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "401370676925ab51",
      "name" : "接口路径",
      "source" : "401370676925ab51.attach",
      "type" : "text/plain",
      "size" : 42
    }, {
      "uid" : "983a3a2dd2d164d1",
      "name" : "请求参数",
      "source" : "983a3a2dd2d164d1.attach",
      "type" : "text/plain",
      "size" : 58
    }, {
      "uid" : "2640baaef525dc21",
      "name" : "响应结果",
      "source" : "2640baaef525dc21.attach",
      "type" : "text/plain",
      "size" : 126
    }, {
      "uid" : "12d31d4cb76276a",
      "name" : "log",
      "source" : "12d31d4cb76276a.txt",
      "type" : "text/plain",
      "size" : 1429
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "attachmentsCount" : 4,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "connect_db::0",
    "time" : {
      "start" : 1646290821657,
      "stop" : 1646290821657,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "商品登录模块"
  }, {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "parentSuite",
    "value" : "testcases.test_business_token_login02"
  }, {
    "name" : "suite",
    "value" : "test_login05"
  }, {
    "name" : "subSuite",
    "value" : "TestLogin"
  }, {
    "name" : "host",
    "value" : "DESKTOP-V37VTV5"
  }, {
    "name" : "thread",
    "value" : "112356-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcases.test_business_token_login02.test_login05"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case",
    "value" : "<comms.excel_utils.CaseData object at 0x03E3EC88>"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "b9d2f081d32b04fc.json",
  "parameterValues" : [ "<comms.excel_utils.CaseData object at 0x03E3EC88>" ]
}